[{"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js":"1","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js":"2","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js":"3","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js":"4","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"5","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"6","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js":"7","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"8","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"9","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"10","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js":"11","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"12","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"13","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js":"14","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js":"15","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"16","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js":"17","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js":"18","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js":"19","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"20","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js":"21","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js":"22","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\eligibility.js":"23","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\visit.js":"24","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js":"25","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Alert\\Alert.jsx":"26"},{"size":753,"mtime":1740764368758,"results":"27","hashOfConfig":"28"},{"size":1422,"mtime":1740764368755,"results":"29","hashOfConfig":"28"},{"size":9235,"mtime":1737716984546,"results":"30","hashOfConfig":"28"},{"size":1201,"mtime":1740764369709,"results":"31","hashOfConfig":"28"},{"size":101626,"mtime":1740764369763,"results":"32","hashOfConfig":"28"},{"size":6876,"mtime":1740764369739,"results":"33","hashOfConfig":"28"},{"size":3056,"mtime":1723964180851,"results":"34","hashOfConfig":"28"},{"size":9603,"mtime":1740764481913,"results":"35","hashOfConfig":"28"},{"size":6945,"mtime":1740764369757,"results":"36","hashOfConfig":"28"},{"size":8537,"mtime":1740764485309,"results":"37","hashOfConfig":"28"},{"size":40515,"mtime":1740764369714,"results":"38","hashOfConfig":"28"},{"size":14068,"mtime":1740764369553,"results":"39","hashOfConfig":"28"},{"size":24664,"mtime":1740764369557,"results":"40","hashOfConfig":"28"},{"size":110333,"mtime":1740764369775,"results":"41","hashOfConfig":"28"},{"size":36152,"mtime":1740764369768,"results":"42","hashOfConfig":"28"},{"size":2878,"mtime":1740764369440,"results":"43","hashOfConfig":"28"},{"size":21690,"mtime":1740764369780,"results":"44","hashOfConfig":"28"},{"size":11986,"mtime":1734339713273,"results":"45","hashOfConfig":"28"},{"size":33558,"mtime":1740764118666,"results":"46","hashOfConfig":"28"},{"size":116836,"mtime":1740764369430,"results":"47","hashOfConfig":"28"},{"size":12864,"mtime":1740764369422,"results":"48","hashOfConfig":"28"},{"size":789,"mtime":1740764485296,"results":"49","hashOfConfig":"28"},{"size":2091,"mtime":1734339712972,"results":"50","hashOfConfig":"28"},{"size":6477,"mtime":1737716984543,"results":"51","hashOfConfig":"28"},{"size":375,"mtime":1740764369853,"results":"52","hashOfConfig":"28"},{"size":1215,"mtime":1740764485303,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1cbax3o",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"99","messages":"100","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js",["109"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js",[],["110","111"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["142"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["143","144","145"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["146","147","148"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["149","150","151","152"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["184","185","186"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["187","188","189"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js",["190","191","192","193","194","195","196"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js",["197","198","199"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["200"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js",["201","202","203","204","205","206"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js",["207","208","209","210"],"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardBody, FormGroup, Label, Input } from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { url as baseUrl, token } from '../../../api';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nconst PrEPVisit = props => {\r\n  const patientObj = props.patientObj;\r\n  const classes = useStyles();\r\n  const [objValues, setObjValues] = useState({\r\n    id: '',\r\n    uniqueId: '',\r\n    dateOfRegistration: '',\r\n    entryPointId: '',\r\n    facilityName: '',\r\n    statusAtRegistrationId: '',\r\n    dateConfirmedHiv: '',\r\n    sourceOfReferrer: '',\r\n    enrollmentSettingId: '',\r\n    pregnancyStatusId: '',\r\n    dateOfLpm: '',\r\n    tbStatusId: '',\r\n    targetGroupId: '',\r\n    ovc_enrolled: '',\r\n    ovcNumber: '',\r\n  });\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [carePoints, setCarePoints] = useState([]);\r\n  const [hivStatus, setHivStatus] = useState([]);\r\n  const [transferIn, setTransferIn] = useState(false);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  const handleInputChange = e => {\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    if (e.target.name === 'entryPointId') {\r\n      if (e.target.value === '21') {\r\n        setTransferIn(true);\r\n      } else {\r\n        setTransferIn(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    objValues.personId = patientObj.id;\r\n    patientObj.enrolled = true;\r\n    delete objValues['tableData'];\r\n    setSaving(true);\r\n    axios\r\n      .post(`${baseUrl}hiv/enrollment`, objValues, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setSaving(false);\r\n        toast.success('Record saved successfully! ✔');\r\n        props.toggle();\r\n        props.patientObj.enrolled = true;\r\n        props.PatientCurrentStatus();\r\n      })\r\n      .catch(error => {\r\n        setSaving(false);\r\n        toast.error('Something went wrong ❌');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          <form>\r\n            <div className=\"row\">\r\n              <h2>PrEP Visit</h2>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label for=\"uniqueId\">Duration on PErp </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"uniqueId\"\r\n                    id=\"uniqueId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.uniqueId}\r\n                    required\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>Noted Side Effects</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"entryPointId\"\r\n                    id=\"entryPointId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.entryPointId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {carePoints.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.entryPointId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.entryPointId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n\r\n            <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label for=\"entryPointId\">HTS Result</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"entryPointId\"\r\n                    id=\"entryPointId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.entryPointId}\r\n                    required\r\n                  >\r\n                    <option value=\"\"> </option>\r\n\r\n                    {carePoints.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.entryPointId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.entryPointId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label for=\"entryPointId\">Risk Reduction Plan</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"entryPointId\"\r\n                    id=\"entryPointId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.entryPointId}\r\n                    required\r\n                  >\r\n                    <option value=\"\"> </option>\r\n\r\n                    {carePoints.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.entryPointId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.entryPointId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label for=\"entryPointId\">Syndromic STI Screening</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"entryPointId\"\r\n                    id=\"entryPointId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.entryPointId}\r\n                    required\r\n                  >\r\n                    <option value=\"\"> </option>\r\n\r\n                    {carePoints.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.entryPointId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.entryPointId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <div className=\"row\">\r\n              <h3>PrEP Drugs</h3>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>Regimen</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"statusAtRegistrationId\"\r\n                    id=\"statusAtRegistrationId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.statusAtRegistrationId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {hivStatus.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.statusAtRegistrationId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.statusAtRegistrationId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>Level of Adherence</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"statusAtRegistrationId\"\r\n                    id=\"statusAtRegistrationId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.statusAtRegistrationId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {hivStatus.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label>Why Poor/Fair Adherence?</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"statusAtRegistrationId\"\r\n                    id=\"statusAtRegistrationId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.statusAtRegistrationId}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n\r\n                    {hivStatus.map(value => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                    {errors.statusAtRegistrationId !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.statusAtRegistrationId}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n\r\n            {saving ? <Spinner /> : ''}\r\n            <br />\r\n\r\n            <MatButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSubmit}\r\n            >\r\n              {!saving ? (\r\n                <span style={{ textTransform: 'capitalize' }}>Save</span>\r\n              ) : (\r\n                <span style={{ textTransform: 'capitalize' }}>Saving...</span>\r\n              )}\r\n            </MatButton>\r\n\r\n            <MatButton\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              startIcon={<CancelIcon />}\r\n              onClick={props.toggle}\r\n            >\r\n              <span style={{ textTransform: 'capitalize' }}>Cancel</span>\r\n            </MatButton>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrEPVisit;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js",["211","212","213","214","215","216"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Row, Card, CardBody, FormGroup, Label, Input } from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { url as baseUrl, token } from '../../../api';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport moment from 'moment';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n    '& .card-title': {\r\n      color: '#fff',\r\n      fontWeight: 'bold',\r\n    },\r\n    '& .form-control': {\r\n      borderRadius: '0.25rem',\r\n      height: '2.5625em',\r\n    },\r\n    '& .card-header:first-child': {\r\n      borderRadius: 'calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0',\r\n    },\r\n    '& .dropdown-toggle::after': {\r\n      display: ' block !important',\r\n    },\r\n    '& select': {\r\n      '-webkit-appearance': 'listbox !important',\r\n    },\r\n    '& p': {\r\n      color: 'red',\r\n    },\r\n    '& label': {\r\n      fontSize: '14px',\r\n      color: '#014d88',\r\n      fontWeight: 'bold',\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n  error: {\r\n    color: '#f85032',\r\n    fontSize: '12.8px',\r\n  },\r\n  success: {\r\n    color: '#4BB543 ',\r\n    fontSize: '11px',\r\n  },\r\n}));\r\n\r\nconst PrEPEligibiltyScreeningForm = props => {\r\n  const patientObj = props.patientObj;\r\n  const classes = useStyles();\r\n  const [disabledField, setDisabledField] = useState(false);\r\n  const [objValues, setObjValues] = useState({\r\n    dateInterruption: '',\r\n    why: '',\r\n    interruptionType: '',\r\n    dateRestartPlacedBackMedication: '',\r\n    personId: patientObj.personId,\r\n    causeOfDeath: '',\r\n    dateClientDied: '',\r\n    dateClientReferredOut: '',\r\n    facilityReferredTo: '',\r\n    interruptionDate: '',\r\n    interruptionReason: '',\r\n    sourceOfDeathInfo: '',\r\n    dateSeroconverted: '',\r\n    reasonStopped: '',\r\n    reasonStoppedOthers: '',\r\n    reasonForPrepDiscontinuation: '',\r\n  });\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [prepStatus, setPrepStatus] = useState([]);\r\n  const [reasonStooped, setReasonStooped] = useState([]);\r\n  const [causeOfDeath, setCauseOfDeath] = useState([]);\r\n  const [reasonForDiscontinuationOptions, setReasonForDiscontinuationOptions] =\r\n    useState([]);\r\n  const [patientDto, setPatientDto] = useState();\r\n\r\n  useEffect(() => {\r\n    PREP_STATUS();\r\n    PREP_STATUS_STOPPED_REASON();\r\n    GetPatientDTOObj();\r\n    CAUSE_DEATH();\r\n    getReasonForDiscontinuationOptions();\r\n    if (\r\n      props.activeContent.id &&\r\n      props.activeContent.id !== '' &&\r\n      props.activeContent.id !== null\r\n    ) {\r\n      setDisabledField(\r\n        props.activeContent.actionType === 'view' ? true : false\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const GetPatientDTOObj = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then(response => {\r\n        setPatientDto(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const GetPatientInterruption = id => {\r\n    axios\r\n      .get(`${baseUrl}prep-interruption/${props.activeContent.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setObjValues(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const PREP_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setPrepStatus(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const CAUSE_DEATH = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setCauseOfDeath(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const PREP_STATUS_STOPPED_REASON = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_STATUS_STOPPED_REASON`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setReasonStooped(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const getReasonForDiscontinuationOptions = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/REASON_FOR_DISCONTINUATION`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setReasonForDiscontinuationOptions(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  const getNewPrepStatus = (interruptionOption, allPrepInterruptions) => {\r\n    const transformedInterruption =\r\n      interruptionOption?.interruptionType?.toLowerCase();\r\n    const newPrepInterruptionObj = allPrepInterruptions?.find(interruption =>\r\n      transformedInterruption.includes(\r\n        interruption?.display?.replace(/\\s/g, '_').toLowerCase()\r\n      )\r\n    );\r\n    return newPrepInterruptionObj;\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    setErrors({ ...errors, [e.target.name]: '' });\r\n    if (e.target.name === 'interruptionType') {\r\n      switch (e.target.value) {\r\n        case 'PREP_STATUS_STOPPED':\r\n          setObjValues({\r\n            ...objValues,\r\n            reasonStopped: '',\r\n            reasonStoppedOthers: '',\r\n          });\r\n          break;\r\n        case 'PREP_STATUS_DEAD':\r\n          setObjValues({\r\n            ...objValues,\r\n            causeOfDeath: '',\r\n            sourceOfDeathInfo: '',\r\n            dateClientDied: '',\r\n          });\r\n          break;\r\n        case 'PREP_STATUS_RESTART':\r\n          setObjValues({ ...objValues, dateRestartPlacedBackMedication: '' });\r\n          break;\r\n        case 'PREP_STATUS_TRANSFER_OUT':\r\n          setObjValues({\r\n            ...objValues,\r\n            dateClientReferredOut: '',\r\n            facilityReferredTo: '',\r\n          });\r\n          break;\r\n        case 'PREP_STATUS_SEROCONVERTED':\r\n          setObjValues({ ...objValues, linkToArt: '', dateSeroconverted: '' });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    // if (\r\n    //   containsDiscontinued(objValues.interruptionType) &&\r\n    //   !objValues.reasonForPrepDiscontinuation\r\n    // ) {\r\n    //   temp.reasonForPrepDiscontinuation = 'This field is required';\r\n    // }\r\n    if (\r\n      (objValues.interruptionType === 'PREP_STATUS_ADVERSE_DRUG_REACTION' ||\r\n        objValues.interruptionType === 'PREP_STATUS_STOPPED' ||\r\n        objValues.interruptionType === 'PREP_STATUS_LOSS_TO_FOLLOW_UP') &&\r\n      !objValues.interruptionDate\r\n    ) {\r\n      temp.interruptionDate = 'This field is required';\r\n    }\r\n    if (\r\n      objValues.interruptionType === 'PREP_STATUS_TRANSFER_OUT' &&\r\n      !objValues.dateClientReferredOut\r\n    ) {\r\n      temp.dateClientReferredOut = 'This field is required';\r\n    }\r\n    if (\r\n      objValues.interruptionType === 'PREP_STATUS_DEAD' &&\r\n      !objValues.dateClientDied\r\n    ) {\r\n      temp.dateClientDied = 'This field is required';\r\n    }\r\n    if (!objValues.interruptionType) {\r\n      temp.interruptionType = 'This field is required';\r\n    }\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every(x => x === '');\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (\r\n      objValues.interruptionDate === '' &&\r\n      objValues.dateSeroconverted !== ''\r\n    ) {\r\n      objValues.interruptionDate = objValues.dateSeroconverted;\r\n    } else if (\r\n      objValues.interruptionDate === '' &&\r\n      objValues.dateRestartPlacedBackMedication !== ''\r\n    ) {\r\n      objValues.interruptionDate = objValues.dateRestartPlacedBackMedication;\r\n    } else if (\r\n      objValues.interruptionDate === '' &&\r\n      objValues.dateClientReferredOut !== ''\r\n    ) {\r\n      objValues.interruptionDate = objValues.dateClientReferredOut;\r\n    } else if (\r\n      objValues.interruptionDate === '' &&\r\n      objValues.dateClientDied !== ''\r\n    ) {\r\n      objValues.interruptionDate = objValues.dateClientDied;\r\n    }\r\n    if (validate()) {\r\n      objValues.previousPrepStatus = props.patientObj?.prepStatus;\r\n      setSaving(true);\r\n      if (props.activeContent && props.activeContent.actionType === 'update') {\r\n        axios\r\n          .put(\r\n            `${baseUrl}prep-interruption/${props.activeContent.id}`,\r\n            objValues,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          )\r\n          .then(response => {\r\n            setSaving(false);\r\n            toast.success('👍 Record saved successfully! ✔');\r\n            props.PatientObject();\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: 'recent-history',\r\n            });\r\n          })\r\n          .catch(error => {\r\n            setSaving(false);\r\n            handleError(error);\r\n          });\r\n      } else {\r\n        axios\r\n          .post(`${baseUrl}prep/interruption`, objValues, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then(response => {\r\n            const newStatus = getNewPrepStatus(response.data, prepStatus);\r\n            setSaving(false);\r\n            toast.success('👍 Record saved successfully! ✔');\r\n            props.PatientObject();\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: 'recent-history',\r\n              obj: { newStatus },\r\n            });\r\n          })\r\n          .catch(error => {\r\n            setSaving(false);\r\n            handleError(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleError = error => {\r\n    if (error.response && error.response.data) {\r\n      let errorMessage =\r\n        error.response.data.apierror &&\r\n        error.response.data.apierror.message !== ''\r\n          ? error.response.data.apierror.message\r\n          : '❌ Something went wrong. Please try again...';\r\n      toast.error(errorMessage);\r\n    } else {\r\n      toast.error('❌ Something went wrong. Please try again...');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getReasonForDiscontinuationOptions();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (!['view', 'update'].includes(props.activeContent.actionType)) {\r\n        setObjValues(prevValues => ({\r\n          ...prevValues,\r\n          dateInterruption: '',\r\n          dateRestartPlacedBackMedication: '',\r\n          causeOfDeath: '',\r\n          dateClientDied: '',\r\n          dateClientReferredOut: '',\r\n          facilityReferredTo: '',\r\n          interruptionDate: '',\r\n          sourceOfDeathInfo: '',\r\n          dateSeroconverted: '',\r\n          reasonStopped: '',\r\n          reasonStoppedOthers: '',\r\n          reasonForPrepDiscontinuation: '',\r\n        }));\r\n\r\n        setErrors(prevErrors => ({\r\n          ...prevErrors,\r\n          interruptionDate: '',\r\n          reasonStopped: '',\r\n          reasonStoppedOthers: '',\r\n          dateClientReferredOut: '',\r\n          facilityReferredTo: '',\r\n          dateClientDied: '',\r\n          causeOfDeath: '',\r\n          sourceOfDeathInfo: '',\r\n          dateRestartPlacedBackMedication: '',\r\n          dateSeroconverted: '',\r\n          reasonForPrepDiscontinuation: '',\r\n        }));\r\n      }\r\n    };\r\n  }, [objValues.interruptionType]);\r\n\r\n  useEffect(() => {\r\n    GetPatientInterruption(props.activeContent.id);\r\n  }, [props.activeContent.id]);\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <form>\r\n            <div className=\"row\">\r\n              <h2>PrEP Client Tracking & Discontinuations/Interruptions</h2>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <Label for=\"uniqueId\">\r\n                    PrEP Interruptions <span style={{ color: 'red' }}> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"interruptionType\"\r\n                    id=\"interruptionType\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.interruptionType}\r\n                    required\r\n                    style={{ border: '1px solid #014D88' }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {prepStatus\r\n                      .filter(interruption => interruption?.id !== 743)\r\n                      .map(value => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    {/* <option value=\"PREP_INTERRUPtIONS_DISCONTINUED_ORAL_PREP\">\r\n                      Discontinued Oral PrEP\r\n                    </option>\r\n                    <option value=\"PREP_INTERRUPtIONS_DISCONTINUED_CABLA\">\r\n                      Discontinued CAB-LA\r\n                    </option> */}\r\n                  </Input>\r\n                  {errors.interruptionType !== '' ? (\r\n                    <span className={classes.error}>\r\n                      {errors.interruptionType}\r\n                    </span>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {(objValues.interruptionType ===\r\n                'PREP_STATUS_ADVERSE_DRUG_REACTION' ||\r\n                objValues.interruptionType === 'PREP_STATUS_STOPPED' ||\r\n                objValues.interruptionType ===\r\n                  'PREP_INTERRUPtIONS_DISCONTINUED_ORAL_PREP' ||\r\n                objValues.interruptionType ===\r\n                  'PREP_INTERRUPtIONS_DISCONTINUED_CABLA' ||\r\n                objValues.interruptionType ===\r\n                  'PREP_STATUS_LOSS_TO_FOLLOW_UP') && (\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label for=\"uniqueId\">\r\n                      Date of Interruption{' '}\r\n                      <span style={{ color: 'red' }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      onKeyDown={e => {\r\n                        e.preventDefault();\r\n                      }}\r\n                      name=\"interruptionDate\"\r\n                      id=\"interruptionDate\"\r\n                      min={\r\n                        patientDto && patientDto.dateEnrolled\r\n                          ? patientDto.dateEnrolled\r\n                          : ''\r\n                      }\r\n                      max={moment(new Date()).format('YYYY-MM-DD')}\r\n                      onChange={handleInputChange}\r\n                      value={objValues.interruptionDate}\r\n                      required\r\n                      disabled={disabledField}\r\n                    />\r\n                    {errors.interruptionDate !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.interruptionDate}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.interruptionType === 'PREP_STATUS_STOPPED' && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Reason Stopped </Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"reasonStopped\"\r\n                        id=\"reasonStopped\"\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.reasonStopped}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        {reasonStooped.map(value => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.reasonStopped !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.reasonStopped}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {objValues.reasonStopped === 'Others (Pls specify)' && (\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                      <FormGroup>\r\n                        <Label for=\"uniqueId\">Other Reason Stopped </Label>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"reasonStoppedOthers\"\r\n                          id=\"reasonStoppedOthers\"\r\n                          max={moment(new Date()).format('YYYY-MM-DD')}\r\n                          onChange={handleInputChange}\r\n                          value={objValues.reasonStoppedOthers}\r\n                          disabled={disabledField}\r\n                        ></Input>\r\n                        {errors.reasonStoppedOther !== '' ? (\r\n                          <span className={classes.error}>\r\n                            {errors.reasonStopped}\r\n                          </span>\r\n                        ) : (\r\n                          ''\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n              {objValues.interruptionType === 'PREP_STATUS_TRANSFER_OUT' && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Date of client referred out </Label>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={e => e.preventDefault()}\r\n                        name=\"dateClientReferredOut\"\r\n                        id=\"dateClientReferredOut\"\r\n                        min={\r\n                          patientDto && patientDto.dateEnrolled\r\n                            ? patientDto.dateEnrolled\r\n                            : ''\r\n                        }\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={\r\n                          objValues.dateClientReferredOut ||\r\n                          objValues.interruptionDate\r\n                        }\r\n                        required\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.dateClientReferredOut !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.dateClientReferredOut}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Facility referred to </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"facilityReferredTo\"\r\n                        id=\"facilityReferredTo\"\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.facilityReferredTo}\r\n                        required\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.facilityReferredTo !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.facilityReferredTo}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {objValues.interruptionType === 'PREP_STATUS_DEAD' && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Date of Client's Death </Label>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={e => e.preventDefault()}\r\n                        name=\"dateClientDied\"\r\n                        id=\"dateClientDied\"\r\n                        min={\r\n                          patientDto && patientDto.dateEnrolled\r\n                            ? patientDto.dateEnrolled\r\n                            : ''\r\n                        }\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={\r\n                          objValues.dateClientDied || objValues.interruptionDate\r\n                        }\r\n                        required\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.dateClientDied !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.dateClientDied}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Cause of death</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"causeOfDeath\"\r\n                        id=\"causeOfDeath\"\r\n                        min={\r\n                          patientDto && patientDto.dateEnrolled\r\n                            ? patientDto.dateEnrolled\r\n                            : ''\r\n                        }\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.causeOfDeath}\r\n                        required\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        {causeOfDeath.map(value => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.causeOfDeath !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.causeOfDeath}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Source of death information </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"sourceOfDeathInfo\"\r\n                        id=\"sourceOfDeathInfo\"\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.sourceOfDeathInfo}\r\n                        required\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.sourceOfDeathInfo !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.sourceOfDeathInfo}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {objValues.interruptionType === 'PREP_STATUS_RESTART' && (\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>Date of restart if placed back on medication</Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"date\"\r\n                      onKeyDown={e => e.preventDefault()}\r\n                      name=\"dateRestartPlacedBackMedication\"\r\n                      id=\"dateRestartPlacedBackMedication\"\r\n                      min={\r\n                        patientDto && patientDto.dateEnrolled\r\n                          ? patientDto.dateEnrolled\r\n                          : ''\r\n                      }\r\n                      max={moment(new Date()).format('YYYY-MM-DD')}\r\n                      value={objValues.dateRestartPlacedBackMedication}\r\n                      onChange={handleInputChange}\r\n                      disabled={disabledField}\r\n                      style={{\r\n                        border: '1px solid #014D88',\r\n                        borderRadius: '0.2rem',\r\n                      }}\r\n                    />\r\n                    {errors.dateRestartPlacedBackMedication !== '' ? (\r\n                      <span className={classes.error}>\r\n                        {errors.dateRestartPlacedBackMedication}\r\n                      </span>\r\n                    ) : (\r\n                      ''\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.interruptionType === 'PREP_STATUS_SEROCONVERTED' && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label for=\"uniqueId\">Date Seroconverted </Label>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={e => e.preventDefault()}\r\n                        name=\"dateSeroconverted\"\r\n                        id=\"dateSeroconverted\"\r\n                        min={\r\n                          patientDto && patientDto.dateEnrolled\r\n                            ? patientDto.dateEnrolled\r\n                            : ''\r\n                        }\r\n                        max={moment(new Date()).format('YYYY-MM-DD')}\r\n                        onChange={handleInputChange}\r\n                        value={\r\n                          objValues.dateSeroconverted ||\r\n                          objValues.interruptionDate\r\n                        }\r\n                        required\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.dateSeroconverted !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.dateSeroconverted}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <Label>Link to ART</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"linkToArt\"\r\n                        id=\"linkToArt\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.linkToArt}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\"> Select</option>\r\n                        <option value=\"true\">Yes </option>\r\n                        <option value=\"false\"> No</option>\r\n                      </Input>\r\n                      {errors.linkToArt !== '' ? (\r\n                        <span className={classes.error}>\r\n                          {errors.linkToArt}\r\n                        </span>\r\n                      ) : (\r\n                        ''\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {objValues.linkToArt === 'true' && (\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                      <FormGroup>\r\n                        <Label>Date link to ART</Label>\r\n                        <Input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          onKeyDown={e => e.preventDefault()}\r\n                          name=\"dateLinkToArt\"\r\n                          id=\"dateLinkToArt\"\r\n                          min={\r\n                            patientDto && patientDto.dateEnrolled\r\n                              ? patientDto.dateEnrolled\r\n                              : ''\r\n                          }\r\n                          max={moment(new Date()).format('YYYY-MM-DD')}\r\n                          value={objValues.dateLinkToArt}\r\n                          onChange={handleInputChange}\r\n                          disabled={disabledField}\r\n                          style={{\r\n                            border: '1px solid #014D88',\r\n                            borderRadius: '0.2rem',\r\n                          }}\r\n                        />\r\n                        {errors.dateLinkToArt !== '' ? (\r\n                          <span className={classes.error}>\r\n                            {errors.dateLinkToArt}\r\n                          </span>\r\n                        ) : (\r\n                          ''\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n              {/* {containsDiscontinued(objValues.interruptionType) ? (\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>Reason for discontinuation</Label>\r\n                    <span style={{ color: 'red' }}> *</span>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"reasonForPrepDiscontinuation\"\r\n                      id=\"reasonForPrepDiscontinuation\"\r\n                      value={objValues.reasonForPrepDiscontinuation}\r\n                      placeholder=\"Enter reason for PrEP discontinuation...\"\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: '1px solid #014D88',\r\n                        borderRadius: '0.25rem',\r\n                      }}\r\n                      disabled={disabledField}\r\n                    ></Input>\r\n                  </FormGroup>\r\n                  {errors.reasonForPrepDiscontinuation !== '' ? (\r\n                    <span className={classes.error}>\r\n                      {errors.reasonForPrepDiscontinuation}\r\n                    </span>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </div>\r\n              ) : null} */}\r\n            </div>\r\n            {saving ? <Spinner /> : ''}\r\n            <br />\r\n            {props.activeContent.actionType !== 'view' && (\r\n              <>\r\n                <MatButton\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  startIcon={<SaveIcon />}\r\n                  onClick={handleSubmit}\r\n                  style={{ backgroundColor: '#014d88', fontWeight: 'bolder' }}\r\n                >\r\n                  {!saving ? (\r\n                    <span style={{ textTransform: 'capitalize' }}>Save</span>\r\n                  ) : (\r\n                    <span style={{ textTransform: 'capitalize' }}>\r\n                      Saving...\r\n                    </span>\r\n                  )}\r\n                </MatButton>\r\n                <MatButton\r\n                  variant=\"contained\"\r\n                  className={classes.button}\r\n                  startIcon={<CancelIcon />}\r\n                  onClick={props.toggle}\r\n                  style={{ backgroundColor: '#992E62' }}\r\n                >\r\n                  <span style={{ textTransform: 'capitalize', color: '#fff' }}>\r\n                    {' '}\r\n                    Cancel{' '}\r\n                  </span>\r\n                </MatButton>\r\n              </>\r\n            )}\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrEPEligibiltyScreeningForm;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js",["240","241","242"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js",["243"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\eligibility.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\visit.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Alert\\Alert.jsx",["244","245","246","247"],{"ruleId":"248","severity":1,"message":"249","line":4,"column":41,"nodeType":"250","messageId":"251","endLine":4,"endColumn":47},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"248","severity":1,"message":"256","line":3,"column":10,"nodeType":"250","messageId":"251","endLine":3,"endColumn":16},{"ruleId":"248","severity":1,"message":"257","line":15,"column":10,"nodeType":"250","messageId":"251","endLine":15,"endColumn":21},{"ruleId":"248","severity":1,"message":"258","line":16,"column":13,"nodeType":"250","messageId":"251","endLine":16,"endColumn":16},{"ruleId":"248","severity":1,"message":"259","line":28,"column":10,"nodeType":"250","messageId":"251","endLine":28,"endColumn":17},{"ruleId":"248","severity":1,"message":"260","line":32,"column":10,"nodeType":"250","messageId":"251","endLine":32,"endColumn":18},{"ruleId":"248","severity":1,"message":"261","line":118,"column":17,"nodeType":"250","messageId":"251","endLine":118,"endColumn":25},{"ruleId":"248","severity":1,"message":"262","line":122,"column":18,"nodeType":"250","messageId":"251","endLine":122,"endColumn":27},{"ruleId":"248","severity":1,"message":"263","line":125,"column":10,"nodeType":"250","messageId":"251","endLine":125,"endColumn":22},{"ruleId":"248","severity":1,"message":"264","line":125,"column":24,"nodeType":"250","messageId":"251","endLine":125,"endColumn":39},{"ruleId":"248","severity":1,"message":"265","line":135,"column":10,"nodeType":"250","messageId":"251","endLine":135,"endColumn":36},{"ruleId":"248","severity":1,"message":"266","line":138,"column":22,"nodeType":"250","messageId":"251","endLine":138,"endColumn":35},{"ruleId":"248","severity":1,"message":"267","line":142,"column":9,"nodeType":"250","messageId":"251","endLine":142,"endColumn":19},{"ruleId":"248","severity":1,"message":"268","line":185,"column":27,"nodeType":"250","messageId":"251","endLine":185,"endColumn":45},{"ruleId":"248","severity":1,"message":"269","line":216,"column":13,"nodeType":"250","messageId":"251","endLine":216,"endColumn":27},{"ruleId":"270","severity":1,"message":"271","line":219,"column":32,"nodeType":"272","messageId":"273","endLine":219,"endColumn":34},{"ruleId":"274","severity":1,"message":"275","line":236,"column":25,"nodeType":"276","messageId":"277","endLine":236,"endColumn":27},{"ruleId":"274","severity":1,"message":"275","line":238,"column":68,"nodeType":"276","messageId":"277","endLine":238,"endColumn":70},{"ruleId":"274","severity":1,"message":"275","line":239,"column":68,"nodeType":"276","messageId":"277","endLine":239,"endColumn":70},{"ruleId":"274","severity":1,"message":"275","line":241,"column":25,"nodeType":"276","messageId":"277","endLine":241,"endColumn":27},{"ruleId":"278","severity":1,"message":"279","line":281,"column":6,"nodeType":"280","endLine":281,"endColumn":59,"suggestions":"281"},{"ruleId":"248","severity":1,"message":"282","line":335,"column":9,"nodeType":"250","messageId":"251","endLine":335,"endColumn":40},{"ruleId":"274","severity":1,"message":"275","line":441,"column":24,"nodeType":"276","messageId":"277","endLine":441,"endColumn":26},{"ruleId":"274","severity":1,"message":"275","line":443,"column":31,"nodeType":"276","messageId":"277","endLine":443,"endColumn":33},{"ruleId":"274","severity":1,"message":"275","line":524,"column":45,"nodeType":"276","messageId":"277","endLine":524,"endColumn":47},{"ruleId":"274","severity":1,"message":"275","line":543,"column":21,"nodeType":"276","messageId":"277","endLine":543,"endColumn":23},{"ruleId":"274","severity":1,"message":"275","line":598,"column":45,"nodeType":"276","messageId":"277","endLine":598,"endColumn":47},{"ruleId":"248","severity":1,"message":"269","line":608,"column":13,"nodeType":"250","messageId":"251","endLine":608,"endColumn":27},{"ruleId":"270","severity":1,"message":"271","line":611,"column":24,"nodeType":"272","messageId":"273","endLine":611,"endColumn":26},{"ruleId":"274","severity":1,"message":"275","line":665,"column":35,"nodeType":"276","messageId":"277","endLine":665,"endColumn":37},{"ruleId":"248","severity":1,"message":"283","line":690,"column":15,"nodeType":"250","messageId":"251","endLine":690,"endColumn":23},{"ruleId":"278","severity":1,"message":"284","line":81,"column":6,"nodeType":"280","endLine":81,"endColumn":8,"suggestions":"285"},{"ruleId":"286","severity":1,"message":"287","line":4,"column":10,"nodeType":"288","messageId":"289","endLine":4,"endColumn":24,"fix":"290"},{"ruleId":"248","severity":1,"message":"291","line":72,"column":10,"nodeType":"250","messageId":"251","endLine":72,"endColumn":21},{"ruleId":"248","severity":1,"message":"292","line":73,"column":10,"nodeType":"250","messageId":"251","endLine":73,"endColumn":17},{"ruleId":"248","severity":1,"message":"293","line":1,"column":17,"nodeType":"250","messageId":"251","endLine":1,"endColumn":25},{"ruleId":"248","severity":1,"message":"294","line":3,"column":16,"nodeType":"250","messageId":"251","endLine":3,"endColumn":21},{"ruleId":"248","severity":1,"message":"295","line":45,"column":9,"nodeType":"250","messageId":"251","endLine":45,"endColumn":16},{"ruleId":"248","severity":1,"message":"296","line":75,"column":9,"nodeType":"250","messageId":"251","endLine":75,"endColumn":26},{"ruleId":"248","severity":1,"message":"297","line":82,"column":9,"nodeType":"250","messageId":"251","endLine":82,"endColumn":23},{"ruleId":"248","severity":1,"message":"298","line":89,"column":9,"nodeType":"250","messageId":"251","endLine":89,"endColumn":19},{"ruleId":"278","severity":1,"message":"299","line":104,"column":65,"nodeType":"280","endLine":104,"endColumn":67,"suggestions":"300"},{"ruleId":"248","severity":1,"message":"301","line":1,"column":38,"nodeType":"250","messageId":"251","endLine":1,"endColumn":44},{"ruleId":"248","severity":1,"message":"302","line":2,"column":9,"nodeType":"250","messageId":"251","endLine":2,"endColumn":14},{"ruleId":"248","severity":1,"message":"303","line":2,"column":15,"nodeType":"250","messageId":"251","endLine":2,"endColumn":26},{"ruleId":"248","severity":1,"message":"304","line":2,"column":28,"nodeType":"250","messageId":"251","endLine":2,"endColumn":37},{"ruleId":"248","severity":1,"message":"305","line":2,"column":38,"nodeType":"250","messageId":"251","endLine":2,"endColumn":42},{"ruleId":"248","severity":1,"message":"306","line":3,"column":15,"nodeType":"250","messageId":"251","endLine":3,"endColumn":19},{"ruleId":"248","severity":1,"message":"307","line":3,"column":20,"nodeType":"250","messageId":"251","endLine":3,"endColumn":28},{"ruleId":"248","severity":1,"message":"308","line":3,"column":44,"nodeType":"250","messageId":"251","endLine":3,"endColumn":54},{"ruleId":"248","severity":1,"message":"309","line":7,"column":8,"nodeType":"250","messageId":"251","endLine":7,"endColumn":14},{"ruleId":"248","severity":1,"message":"310","line":13,"column":10,"nodeType":"250","messageId":"251","endLine":13,"endColumn":17},{"ruleId":"248","severity":1,"message":"311","line":15,"column":8,"nodeType":"250","messageId":"251","endLine":15,"endColumn":19},{"ruleId":"248","severity":1,"message":"312","line":19,"column":17,"nodeType":"250","messageId":"251","endLine":19,"endColumn":20},{"ruleId":"248","severity":1,"message":"313","line":20,"column":10,"nodeType":"250","messageId":"251","endLine":20,"endColumn":16},{"ruleId":"248","severity":1,"message":"314","line":20,"column":18,"nodeType":"250","messageId":"251","endLine":20,"endColumn":24},{"ruleId":"248","severity":1,"message":"315","line":20,"column":26,"nodeType":"250","messageId":"251","endLine":20,"endColumn":31},{"ruleId":"248","severity":1,"message":"316","line":20,"column":33,"nodeType":"250","messageId":"251","endLine":20,"endColumn":40},{"ruleId":"248","severity":1,"message":"317","line":22,"column":8,"nodeType":"250","messageId":"251","endLine":22,"endColumn":11},{"ruleId":"248","severity":1,"message":"318","line":23,"column":8,"nodeType":"250","messageId":"251","endLine":23,"endColumn":24},{"ruleId":"248","severity":1,"message":"319","line":24,"column":8,"nodeType":"250","messageId":"251","endLine":24,"endColumn":14},{"ruleId":"248","severity":1,"message":"320","line":25,"column":8,"nodeType":"250","messageId":"251","endLine":25,"endColumn":11},{"ruleId":"248","severity":1,"message":"321","line":26,"column":8,"nodeType":"250","messageId":"251","endLine":26,"endColumn":17},{"ruleId":"248","severity":1,"message":"322","line":29,"column":8,"nodeType":"250","messageId":"251","endLine":29,"endColumn":18},{"ruleId":"248","severity":1,"message":"323","line":38,"column":8,"nodeType":"250","messageId":"251","endLine":38,"endColumn":19},{"ruleId":"248","severity":1,"message":"324","line":115,"column":11,"nodeType":"250","messageId":"251","endLine":115,"endColumn":22},{"ruleId":"248","severity":1,"message":"325","line":119,"column":12,"nodeType":"250","messageId":"251","endLine":119,"endColumn":19},{"ruleId":"248","severity":1,"message":"292","line":120,"column":12,"nodeType":"250","messageId":"251","endLine":120,"endColumn":19},{"ruleId":"248","severity":1,"message":"326","line":123,"column":12,"nodeType":"250","messageId":"251","endLine":123,"endColumn":20},{"ruleId":"248","severity":1,"message":"327","line":129,"column":12,"nodeType":"250","messageId":"251","endLine":129,"endColumn":27},{"ruleId":"248","severity":1,"message":"328","line":131,"column":11,"nodeType":"250","messageId":"251","endLine":131,"endColumn":19},{"ruleId":"278","severity":1,"message":"329","line":191,"column":8,"nodeType":"280","endLine":191,"endColumn":10,"suggestions":"330"},{"ruleId":"248","severity":1,"message":"331","line":222,"column":11,"nodeType":"250","messageId":"251","endLine":222,"endColumn":27},{"ruleId":"286","severity":1,"message":"287","line":5,"column":10,"nodeType":"288","messageId":"289","endLine":5,"endColumn":24,"fix":"332"},{"ruleId":"248","severity":1,"message":"333","line":28,"column":10,"nodeType":"250","messageId":"251","endLine":28,"endColumn":20},{"ruleId":"278","severity":1,"message":"334","line":66,"column":10,"nodeType":"280","endLine":66,"endColumn":31,"suggestions":"335"},{"ruleId":"248","severity":1,"message":"333","line":5,"column":10,"nodeType":"250","messageId":"251","endLine":5,"endColumn":20},{"ruleId":"278","severity":1,"message":"336","line":31,"column":6,"nodeType":"280","endLine":31,"endColumn":35,"suggestions":"337"},{"ruleId":"248","severity":1,"message":"338","line":269,"column":12,"nodeType":"250","messageId":"251","endLine":269,"endColumn":26},{"ruleId":"248","severity":1,"message":"339","line":23,"column":3,"nodeType":"250","messageId":"251","endLine":23,"endColumn":22},{"ruleId":"248","severity":1,"message":"340","line":25,"column":3,"nodeType":"250","messageId":"251","endLine":25,"endColumn":28},{"ruleId":"248","severity":1,"message":"341","line":27,"column":3,"nodeType":"250","messageId":"251","endLine":27,"endColumn":22},{"ruleId":"248","severity":1,"message":"342","line":30,"column":3,"nodeType":"250","messageId":"251","endLine":30,"endColumn":29},{"ruleId":"248","severity":1,"message":"343","line":161,"column":10,"nodeType":"250","messageId":"251","endLine":161,"endColumn":26},{"ruleId":"278","severity":1,"message":"344","line":273,"column":13,"nodeType":"272","endLine":287,"endColumn":4},{"ruleId":"278","severity":1,"message":"345","line":656,"column":6,"nodeType":"280","endLine":656,"endColumn":8,"suggestions":"346"},{"ruleId":"278","severity":1,"message":"347","line":146,"column":6,"nodeType":"280","endLine":146,"endColumn":8,"suggestions":"348"},{"ruleId":"349","severity":1,"message":"350","line":279,"column":36,"nodeType":"351","messageId":"352","endLine":279,"endColumn":56,"fix":"353"},{"ruleId":"278","severity":1,"message":"354","line":478,"column":6,"nodeType":"280","endLine":478,"endColumn":8,"suggestions":"355"},{"ruleId":"278","severity":1,"message":"356","line":58,"column":48,"nodeType":"280","endLine":58,"endColumn":50,"suggestions":"357"},{"ruleId":"248","severity":1,"message":"305","line":2,"column":10,"nodeType":"250","messageId":"251","endLine":2,"endColumn":14},{"ruleId":"248","severity":1,"message":"358","line":2,"column":16,"nodeType":"250","messageId":"251","endLine":2,"endColumn":19},{"ruleId":"248","severity":1,"message":"359","line":6,"column":8,"nodeType":"250","messageId":"251","endLine":6,"endColumn":18},{"ruleId":"248","severity":1,"message":"360","line":12,"column":10,"nodeType":"250","messageId":"251","endLine":12,"endColumn":20},{"ruleId":"278","severity":1,"message":"361","line":126,"column":6,"nodeType":"280","endLine":126,"endColumn":8,"suggestions":"362"},{"ruleId":"274","severity":1,"message":"275","line":218,"column":45,"nodeType":"276","messageId":"277","endLine":218,"endColumn":47},{"ruleId":"248","severity":1,"message":"363","line":69,"column":18,"nodeType":"250","messageId":"251","endLine":69,"endColumn":27},{"ruleId":"248","severity":1,"message":"364","line":70,"column":22,"nodeType":"250","messageId":"251","endLine":70,"endColumn":35},{"ruleId":"248","severity":1,"message":"365","line":71,"column":21,"nodeType":"250","messageId":"251","endLine":71,"endColumn":33},{"ruleId":"248","severity":1,"message":"366","line":72,"column":10,"nodeType":"250","messageId":"251","endLine":72,"endColumn":20},{"ruleId":"248","severity":1,"message":"305","line":2,"column":10,"nodeType":"250","messageId":"251","endLine":2,"endColumn":14},{"ruleId":"248","severity":1,"message":"358","line":2,"column":16,"nodeType":"250","messageId":"251","endLine":2,"endColumn":19},{"ruleId":"248","severity":1,"message":"367","line":109,"column":10,"nodeType":"250","messageId":"251","endLine":109,"endColumn":41},{"ruleId":"278","severity":1,"message":"368","line":128,"column":6,"nodeType":"280","endLine":128,"endColumn":8,"suggestions":"369"},{"ruleId":"278","severity":1,"message":"370","line":420,"column":6,"nodeType":"280","endLine":420,"endColumn":34,"suggestions":"371"},{"ruleId":"278","severity":1,"message":"372","line":424,"column":6,"nodeType":"280","endLine":424,"endColumn":30,"suggestions":"373"},{"ruleId":"248","severity":1,"message":"374","line":106,"column":10,"nodeType":"250","messageId":"251","endLine":106,"endColumn":20},{"ruleId":"248","severity":1,"message":"375","line":108,"column":10,"nodeType":"250","messageId":"251","endLine":108,"endColumn":19},{"ruleId":"248","severity":1,"message":"376","line":111,"column":10,"nodeType":"250","messageId":"251","endLine":111,"endColumn":24},{"ruleId":"248","severity":1,"message":"377","line":113,"column":10,"nodeType":"250","messageId":"251","endLine":113,"endColumn":30},{"ruleId":"248","severity":1,"message":"378","line":123,"column":10,"nodeType":"250","messageId":"251","endLine":123,"endColumn":32},{"ruleId":"248","severity":1,"message":"343","line":129,"column":10,"nodeType":"250","messageId":"251","endLine":129,"endColumn":26},{"ruleId":"270","severity":1,"message":"271","line":263,"column":31,"nodeType":"272","messageId":"273","endLine":263,"endColumn":33},{"ruleId":"270","severity":1,"message":"271","line":264,"column":31,"nodeType":"272","messageId":"273","endLine":264,"endColumn":33},{"ruleId":"349","severity":1,"message":"379","line":648,"column":42,"nodeType":"351","messageId":"352","endLine":648,"endColumn":56,"fix":"380"},{"ruleId":"278","severity":1,"message":"381","line":1024,"column":6,"nodeType":"280","endLine":1024,"endColumn":38,"suggestions":"382"},{"ruleId":"278","severity":1,"message":"383","line":1036,"column":6,"nodeType":"280","endLine":1036,"endColumn":32,"suggestions":"384"},{"ruleId":"278","severity":1,"message":"385","line":1055,"column":6,"nodeType":"280","endLine":1055,"endColumn":71,"suggestions":"386"},{"ruleId":"278","severity":1,"message":"344","line":1080,"column":13,"nodeType":"272","endLine":1089,"endColumn":4},{"ruleId":"278","severity":1,"message":"387","line":1089,"column":6,"nodeType":"280","endLine":1089,"endColumn":27,"suggestions":"388"},{"ruleId":"278","severity":1,"message":"344","line":1091,"column":13,"nodeType":"272","endLine":1116,"endColumn":4},{"ruleId":"278","severity":1,"message":"389","line":1116,"column":6,"nodeType":"280","endLine":1116,"endColumn":27,"suggestions":"390"},{"ruleId":"278","severity":1,"message":"391","line":1125,"column":6,"nodeType":"280","endLine":1125,"endColumn":8,"suggestions":"392"},{"ruleId":"248","severity":1,"message":"393","line":1252,"column":17,"nodeType":"250","messageId":"251","endLine":1252,"endColumn":31},{"ruleId":"248","severity":1,"message":"394","line":1274,"column":17,"nodeType":"250","messageId":"251","endLine":1274,"endColumn":29},{"ruleId":"395","severity":1,"message":"396","line":1798,"column":15,"nodeType":"397","endLine":1798,"endColumn":45},{"ruleId":"274","severity":1,"message":"275","line":1841,"column":40,"nodeType":"276","messageId":"277","endLine":1841,"endColumn":42},{"ruleId":"274","severity":1,"message":"275","line":1845,"column":36,"nodeType":"276","messageId":"277","endLine":1845,"endColumn":38},{"ruleId":"395","severity":1,"message":"396","line":3093,"column":17,"nodeType":"397","endLine":3093,"endColumn":47},{"ruleId":"286","severity":1,"message":"287","line":5,"column":10,"nodeType":"288","messageId":"289","endLine":5,"endColumn":24,"fix":"398"},{"ruleId":"248","severity":1,"message":"399","line":56,"column":7,"nodeType":"250","messageId":"251","endLine":56,"endColumn":16},{"ruleId":"278","severity":1,"message":"400","line":113,"column":8,"nodeType":"280","endLine":113,"endColumn":61,"suggestions":"401"},{"ruleId":null,"fatal":true,"severity":2,"message":"402","line":7,"column":4},{"ruleId":"248","severity":1,"message":"403","line":1,"column":10,"nodeType":"250","messageId":"251","endLine":1,"endColumn":21},{"ruleId":"248","severity":1,"message":"306","line":1,"column":23,"nodeType":"250","messageId":"251","endLine":1,"endColumn":27},{"ruleId":"248","severity":1,"message":"308","line":1,"column":29,"nodeType":"250","messageId":"251","endLine":1,"endColumn":39},{"ruleId":"248","severity":1,"message":"404","line":4,"column":10,"nodeType":"250","messageId":"251","endLine":4,"endColumn":20},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["405"],"no-negated-in-lhs",["406"],"'format' is defined but never used.","'yupResolver' is defined but never used.","'yup' is defined but never used.","'useForm' is defined but never used.","'getValue' is defined but never used.","'setToday' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'editRelative' is assigned a value but never used.","'setEditRelative' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setHideTargetGroup' is assigned a value but never used.","'actualcontacts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'basicInfo', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.","ArrayExpression",["407"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'PatientObject'. Either include it or remove the dependency array.",["408"],"no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"409","text":"410"},"'patientList' is assigned a value but never used.","'loading' is assigned a value but never used.","'useState' is defined but never used.","'Popup' is defined but never used.","'history' is assigned a value but never used.","'getHospitalNumber' is assigned a value but never used.","'getPhoneNumber' is assigned a value but never used.","'getAddress' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'patientObj?.sendCabLaAlert'. Either include it or remove the dependency array.",["411"],"'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'Segment' is defined but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'Typography' is defined but never used.","'UpgradeIcon' is defined but never used.","'permissions' is assigned a value but never used.","'devices' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["412"],"'biometricFingers' is assigned a value but never used.",{"range":"413","text":"410"},"'makeStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["414"],"React Hook useEffect has missing dependencies: 'RecentActivities' and 'Summary'. Either include them or remove the dependency array.",["415"],"'joinActivities' is defined but never used.","'savePrepEligibility' is defined but never used.","'getPatientPrepEligibility' is defined but never used.","'getRecentActivities' is defined but never used.","'getLiverFunctionTestResult' is defined but never used.","'recentActivities' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'getRecentActivities'. Either include it or remove the dependency array.",["416"],"React Hook useEffect has missing dependencies: 'getPatientCommencement', 'getPatientDTOObj', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["417"],"no-useless-computed-key","Unnecessarily computed property ['datereferred'] found.","Property","unnecessarilyComputedProperty",{"range":"418","text":"419"},"React Hook useEffect has a missing dependency: 'getLatestFromEligibility'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has a missing dependency: 'fetchListOfEncounters'. Either include it or remove the dependency array.",["421"],"'Row' is defined but never used.","'CancelIcon' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientPrepEnrollment', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["422"],"'setErrors' is assigned a value but never used.","'setCarePoints' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'transferIn' is assigned a value but never used.","'reasonForDiscontinuationOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["423"],"React Hook useEffect has a missing dependency: 'props.activeContent.actionType'. Either include it or remove the dependency array.",["424"],"React Hook useEffect has a missing dependency: 'GetPatientInterruption'. Either include it or remove the dependency array.",["425"],"'prepStatus' is assigned a value but never used.","'htsResult' is assigned a value but never used.","'labTestOptions' is assigned a value but never used.","'creatinineTestResult' is assigned a value but never used.","'selectedPopulationType' is assigned a value but never used.","Unnecessarily computed property ['others'] found.",{"range":"426","text":"427"},"React Hook useEffect has a missing dependency: 'emptyObjValues'. Either include it or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'populationType'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has a missing dependency: 'visitTypeDurationMapping'. Either include it or remove the dependency array.",["430"],"React Hook useEffect has a missing dependency: 'getPrepEligibilityObj'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has missing dependencies: 'getPatientDtoObj', 'getPatientVisit', 'getPrepEligibilityObj', and 'getTestGroup'. Either include them or remove the dependency array.",["432"],"React Hook useEffect has missing dependencies: 'getHivResult', 'getLatestFromEligibility', and 'getRecentActivities'. Either include them or remove the dependency array.",["433"],"'updateResponse' is assigned a value but never used.","'postResponse' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",{"range":"434","text":"410"},"'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["435"],"Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m  5 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m token \u001b[33m=\u001b[39m\n \u001b[90m  6 |\u001b[39m   process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mNODE_ENV\u001b[39m \u001b[33m===\u001b[39m \u001b[32m'development'\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  7 |\u001b[39m \u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mHEAD\u001b[39m\n \u001b[90m    |\u001b[39m    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m  8 |\u001b[39m     \u001b[33m?\u001b[39m \u001b[32m'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJndWVzdEBsYW1pc3BsdXMub3JnIiwiYXV0aCI6IlN1cGVyIEFkbWluIiwibmFtZSI6Ikd1ZXN0IEd1ZXN0IiwiZXhwIjoxNzQwNzkwNzY1fQ.9iRwUmkVr8Ioz37p9-zKeorWoEFhDhDxEb-DC69xtnKmH-rAcecU1W4FdXDAnDzOtOf65yG_nUxz6b6vSdfmZg'\u001b[39m\n \u001b[90m  9 |\u001b[39m \u001b[33m===\u001b[39m\u001b[33m===\u001b[39m\u001b[33m=\u001b[39m\n \u001b[90m 10 |\u001b[39m     \u001b[33m?\u001b[39m \u001b[32m'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJndWVzdEBsYW1pc3BsdXMub3JnIiwiYXV0aCI6IlN1cGVyIEFkbWluIiwibmFtZSI6Ikd1ZXN0IEd1ZXN0IiwiZXhwIjoxNzM3NDkzNjAyfQ.BgAkyxT2Oz34_R89fGF8LGLkLfMml1QWQrzgjwZoHS-mGLgqmzbSadHUy3kqgJHiAL9wpub4Lg0eOgLzIkLrnw'\u001b[39m\u001b[0m","'CardContent' is defined but never used.","'CardFooter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},[154,168],"token",{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},[184,198],{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},[7479,7495],"'datereferred'",{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},[19676,19686],"'others'",{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},[184,198],{"desc":"476","fix":"477"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",{"range":"478","text":"479"},"Update the dependencies array to be: [PatientObject]",{"range":"480","text":"481"},"Update the dependencies array to be: [patientObj?.sendCabLaAlert]",{"range":"482","text":"483"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"484","text":"485"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"486","text":"487"},"Update the dependencies array to be: [RecentActivities, Summary, props.patientObj.personId]",{"range":"488","text":"489"},"Update the dependencies array to be: [getRecentActivities]",{"range":"490","text":"491"},"Update the dependencies array to be: [getPatientCommencement, getPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",{"range":"492","text":"493"},"Update the dependencies array to be: [getLatestFromEligibility]",{"range":"494","text":"495"},"Update the dependencies array to be: [fetchListOfEncounters]",{"range":"496","text":"497"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",{"range":"498","text":"499"},"Update the dependencies array to be: [GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",{"range":"500","text":"501"},"Update the dependencies array to be: [objValues.interruptionType, props.activeContent.actionType]",{"range":"502","text":"503"},"Update the dependencies array to be: [GetPatientInterruption, props.activeContent.id]",{"range":"504","text":"505"},"Update the dependencies array to be: [emptyObjValues, props.activeContent.actionType]",{"range":"506","text":"507"},"Update the dependencies array to be: [objValues.populationType, populationType]",{"range":"508","text":"509"},"Update the dependencies array to be: [latestFromEligibility, eligibilityVisitDateSync, populationType, visitTypeDurationMapping]",{"range":"510","text":"511"},"Update the dependencies array to be: [getPrepEligibilityObj, props.activeContent]",{"range":"512","text":"513"},"Update the dependencies array to be: [getPatientDtoObj, getPatientVisit, getPrepEligibilityObj, getTestGroup, props.activeContent]",{"range":"514","text":"515"},"Update the dependencies array to be: [getHivResult, getLatestFromEligibility, getRecentActivities]",{"range":"516","text":"517"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.actionType, props]",{"range":"518","text":"519"},[9809,9862],"[patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",[2504,2506],"[PatientObject]",[3384,3386],"[patientObj?.sendCabLaAlert]",[6965,6967],"[clear_storelist, getPersonBiometrics]",[3326,3347],"[PatientHistory, props.patientObj.id]",[1140,1169],"[RecentActivities, Summary, props.patientObj.personId]",[20694,20696],"[getRecentActivities]",[3922,3924],"[getPatientCommencement, getPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",[14562,14564],"[getLatestFromEligibility]",[1665,1667],"[fetchListOfEncounters]",[3479,3481],"[GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",[3461,3463],"[GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",[12358,12386],"[objValues.interruptionType, props.activeContent.actionType]",[12471,12495],"[GetPatientInterruption, props.activeContent.id]",[31216,31248],"[emptyObjValues, props.activeContent.actionType]",[31588,31614],"[objValues.populationType, populationType]",[32378,32443],"[latestFromEligibility, eligibilityVisitDateSync, populationType, visitTypeDurationMapping]",[33422,33443],"[getPrepEligibilityObj, props.activeContent]",[34642,34663],"[getPatientDtoObj, getPatientVisit, getPrepEligibilityObj, getTestGroup, props.activeContent]",[34878,34880],"[getHivResult, getLatestFromEligibility, getRecentActivities]",[4236,4289],"[props.patientObj.id, props.activeContent.actionType, props]"]