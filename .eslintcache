[{"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js":"1","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js":"2","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js":"3","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js":"4","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"5","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"6","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js":"7","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"8","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"9","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"10","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js":"11","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"12","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"13","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js":"14","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js":"15","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"16","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js":"17","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js":"18","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js":"19","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"20","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js":"21","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js":"22","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js":"23","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\eligibility.js":"24"},{"size":753,"mtime":1728016939750,"results":"25","hashOfConfig":"26"},{"size":1373,"mtime":1728495898009,"results":"27","hashOfConfig":"26"},{"size":9235,"mtime":1723964180850,"results":"28","hashOfConfig":"26"},{"size":1951,"mtime":1729069702022,"results":"29","hashOfConfig":"26"},{"size":101626,"mtime":1730975208475,"results":"30","hashOfConfig":"26"},{"size":6876,"mtime":1729134944721,"results":"31","hashOfConfig":"26"},{"size":3056,"mtime":1723964180851,"results":"32","hashOfConfig":"26"},{"size":9031,"mtime":1728497146332,"results":"33","hashOfConfig":"26"},{"size":6945,"mtime":1729134659819,"results":"34","hashOfConfig":"26"},{"size":8018,"mtime":1729714562068,"results":"35","hashOfConfig":"26"},{"size":40515,"mtime":1728495898155,"results":"36","hashOfConfig":"26"},{"size":14068,"mtime":1728495898125,"results":"37","hashOfConfig":"26"},{"size":24664,"mtime":1729134752765,"results":"38","hashOfConfig":"26"},{"size":110196,"mtime":1730974986899,"results":"39","hashOfConfig":"26"},{"size":36354,"mtime":1730904154200,"results":"40","hashOfConfig":"26"},{"size":2878,"mtime":1728497146279,"results":"41","hashOfConfig":"26"},{"size":21690,"mtime":1730969000552,"results":"42","hashOfConfig":"26"},{"size":11986,"mtime":1730970802427,"results":"43","hashOfConfig":"26"},{"size":33361,"mtime":1730975094067,"results":"44","hashOfConfig":"26"},{"size":117193,"mtime":1731357346980,"results":"45","hashOfConfig":"26"},{"size":12864,"mtime":1728495898041,"results":"46","hashOfConfig":"26"},{"size":483,"mtime":1731353352757,"results":"47","hashOfConfig":"26"},{"size":375,"mtime":1728016939803,"results":"48","hashOfConfig":"26"},{"size":2091,"mtime":1730387937085,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"1cbax3o",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"53"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"53"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":9,"source":null},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"102","usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js",["109"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["110","111"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["142"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './PatientCard';\r\nimport { useHistory } from 'react-router-dom';\r\nimport SubMenu from './SubMenu';\r\nimport RecentHistory from './../History/RecentHistory';\r\nimport PatientHistory from './../History/PatientHistory';\r\nimport ClinicVisit from '../Consultation/Index';\r\nimport PrEPCommencementForm from './../PrepServices/PrEPCommencementForm';\r\nimport PrEPDiscontinuationsInterruptions from './../PrepServices/PrEPDiscontinuationsInterruptions';\r\nimport PrEPEligibiltyScreeningForm from './../PrepServices/PrEPEligibiltyScreeningForm';\r\nimport PrEPVisit from './../PrepServices/PrEPVisit';\r\nimport PrEPRegistrationForm from './../PrepServices/PrEPRegistrationForm';\r\nimport Biometrics from './Biometric';\r\nimport axios from 'axios';\r\nimport { url as baseUrl, token } from './../../../api';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing}px ${theme.spacing(2)}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  let history = useHistory();\r\n  const [patientDetail, setPatientDetail] = useState('');\r\n  const [activeContent, setActiveContent] = useState({\r\n    route: 'recent-history',\r\n    id: '',\r\n    activeTab: 'home',\r\n    actionType: 'create',\r\n    obj: {},\r\n  });\r\n  const { classes } = props;\r\n\r\n  const patientObjLocation =\r\n    history.location && history.location.state\r\n      ? history.location.state.patientObj\r\n      : {};\r\n  const prepId =\r\n    history.location && history.location.state\r\n      ? history.location.state.prepId\r\n      : {};\r\n  //console.log(patientObj)\r\n  useEffect(() => {\r\n    PatientObject();\r\n  }, []);\r\n\r\n  async function PatientObject() {\r\n    axios\r\n      .get(`${baseUrl}prep/persons/${patientObjLocation.personId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(response => {\r\n        setPatientDetail(response.data);\r\n        //patientObj=response.data\r\n      })\r\n      .catch(error => {});\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: '0px', marginBottom: '-10px' }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              {' '}\r\n              <Link to={'/'}>PrEP /</Link> Patient Dashboard\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Card>\r\n        <CardContent>\r\n          {/* This component is where the patient menu and route is define and manage */}\r\n          {/* start of patient card detail */}\r\n          <PatientCardDetail\r\n            patientObj={patientObjLocation}\r\n            setActiveContent={setActiveContent}\r\n            activeContent={activeContent}\r\n            patientDetail={patientDetail}\r\n          />\r\n          {/* End of patient card detail */}\r\n          {/* This is the submenu components */}\r\n          <SubMenu\r\n            patientObj={patientObjLocation}\r\n            setActiveContent={setActiveContent}\r\n            patientDetail={patientDetail}\r\n          />\r\n          <br />\r\n          {/* This is the submenu routes */}\r\n          {activeContent.route === 'recent-history' && (\r\n            <RecentHistory\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n            />\r\n          )}\r\n          {activeContent.route === 'biometrics' && (\r\n            <Biometrics\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n            />\r\n          )}\r\n          {activeContent.route === 'consultation' && (\r\n            <ClinicVisit\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n            />\r\n          )}\r\n          {activeContent.route === 'prep-commencement' && (\r\n            <PrEPCommencementForm\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n              PatientObject={PatientObject}\r\n            />\r\n          )}\r\n          {activeContent.route === 'prep-interruptions' && (\r\n            <PrEPDiscontinuationsInterruptions\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n              PatientObject={PatientObject}\r\n            />\r\n          )}\r\n          {activeContent.route === 'prep-screening' && (\r\n            <PrEPEligibiltyScreeningForm\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n              patientDetail={patientDetail}\r\n              PatientObject={PatientObject}\r\n            />\r\n          )}\r\n          {activeContent.route === 'prep-visit' && (\r\n            <PrEPVisit PatientObject={PatientObject} />\r\n          )}\r\n          {activeContent.route === 'prep-registration' && (\r\n            <PrEPRegistrationForm\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n              prepId={prepId}\r\n              PatientObject={PatientObject}\r\n            />\r\n          )}\r\n          {activeContent.route === 'patient-history' && (\r\n            <PatientHistory\r\n              patientObj={patientObjLocation}\r\n              setActiveContent={setActiveContent}\r\n              activeContent={activeContent}\r\n            />\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["143","144","145","146","147"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst Patients = (props) => {\r\n  const [patientList, setPatientList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  async function patients() {\r\n    setLoading(true);\r\n    axios\r\n      .get(`${baseUrl}prep/persons`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setPatientList(response.data);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient\"\r\n        columns={[\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"PrEP Code\", field: \"clientCode\", filtering: false },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n\r\n          { title: \"PrEP Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}prep/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                resolve({\r\n                  data: result?.data?.records?.map?.((row) => ({\r\n                    name: row.firstName + \" \" + row.surname,\r\n                    hospital_number: row.hospitalNumber,\r\n                    clientCode: row.uniqueId,\r\n                    gender: row && row.gender ? row.gender : \"\",\r\n                    age: row.age,\r\n\r\n                    status: (\r\n                      <Label color=\"blue\" size=\"mini\">\r\n                        {row.prepStatus}\r\n                      </Label>\r\n                    ),\r\n\r\n                    actions: (\r\n                      <div>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/patient-dashboard\",\r\n                            state: { patientObj: row },\r\n                          }}\r\n                        >\r\n                          <ButtonGroup\r\n                            variant=\"contained\"\r\n                            aria-label=\"split button\"\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              height: \"30px\",\r\n                              width: \"215px\",\r\n                            }}\r\n                            size=\"large\"\r\n                          >\r\n                            <Button\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              aria-label=\"select merge strategy\"\r\n                              aria-haspopup=\"menu\"\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <MdDashboard />\r\n                            </Button>\r\n                            <Button\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  color: \"#fff\",\r\n                                  fontWeight: \"bolder\",\r\n                                }}\r\n                              >\r\n                                Patient Dashboard\r\n                              </span>\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </Link>\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: true,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div className=\"p-2\">\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["148","149","150"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport { Menu, Popup } from 'semantic-ui-react';\r\n\r\nfunction SubMenu(props) {\r\n  const patientObj = props.patientObj;\r\n  useEffect(() => {\r\n    //Observation();\r\n  }, [props.patientObj]);\r\n\r\n  const loadPrEPDiscontinuationsInterruptions = row => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: 'prep-interruptions',\r\n    });\r\n  };\r\n  const loadPrEPRegistrationForm = row => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: 'prep-registration',\r\n    });\r\n  };\r\n  const loadPrEPCommencementForm = row => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: 'prep-commencement',\r\n    });\r\n  };\r\n  const loadPrEPEligibiltyScreeningForm = row => {\r\n    props.setActiveContent({ ...props.activeContent, route: 'prep-screening' });\r\n  };\r\n\r\n  const onClickConsultation = row => {\r\n    props.setActiveContent({ ...props.activeContent, route: 'consultation' });\r\n  };\r\n  const onClickHome = row => {\r\n    props.setActiveContent({ ...props.activeContent, route: 'recent-history' });\r\n  };\r\n  const loadPatientHistory = () => {\r\n    props.setActiveContent({\r\n      ...props.activeContent,\r\n      route: 'patient-history',\r\n    });\r\n  };\r\n  const history = useHistory();\r\n  useEffect(() => {});\r\n  return (\r\n    <div>\r\n      <Menu size=\"large\" color={'black'} inverted>\r\n        {patientObj?.createdBy !== 'ETL' ? ( //The menu will show if the patient is not migrated\r\n          <>\r\n            <Menu.Item\r\n              onClick={() => {\r\n                onClickHome();\r\n              }}\r\n            >\r\n              Home\r\n            </Menu.Item>\r\n\r\n            {patientObj?.eligibilityCount <= 0 ||\r\n            patientObj?.eligibilityCount === null ? (\r\n              <>\r\n                <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()}>\r\n                  PrEP Eligibility Screening\r\n                </Menu.Item>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {/* check if the patient has done prep commencement */}\r\n                {patientObj?.prepCount === '0' ||\r\n                patientObj?.commencementCount === null ? (\r\n                  <>\r\n                    {patientObj?.prepCount === '0' &&\r\n                      patientObj?.hivresultAtVisit === 'Negative' && (\r\n                        <Menu.Item onClick={() => loadPrEPRegistrationForm()}>\r\n                          PrEP Enrollment\r\n                        </Menu.Item>\r\n                      )}\r\n                    {(patientObj?.commencementCount === null ||\r\n                      patientObj?.commencementCount <= 0) &&\r\n                      patientObj?.hivresultAtVisit === 'Negative' && (\r\n                        <Menu.Item onClick={() => loadPrEPCommencementForm()}>\r\n                          PrEP Commencement\r\n                        </Menu.Item>\r\n                      )}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Menu.Item\r\n                      onClick={() => loadPrEPEligibiltyScreeningForm()}\r\n                    >\r\n                      {' '}\r\n                      PrEP Eligibility Screening{' '}\r\n                    </Menu.Item>\r\n                    {(patientObj?.prepCount === null ||\r\n                      patientObj?.prepCount < 0) &&\r\n                      patientObj?.hivresultAtVisit === 'Negative' && (\r\n                        <Menu.Item onClick={() => loadPrEPRegistrationForm()}>\r\n                          PrEP Enrollment\r\n                        </Menu.Item>\r\n                      )}\r\n                    {(patientObj?.commencementCount === null ||\r\n                      patientObj?.commencementCount <= 0) &&\r\n                      patientObj?.hivresultAtVisit === 'Negative' && (\r\n                        <Menu.Item onClick={() => loadPrEPCommencementForm()}>\r\n                          PrEP Commencement\r\n                        </Menu.Item>\r\n                      )}\r\n                    {patientObj?.hivresultAtVisit === 'Negative' && (\r\n                      <Menu.Item onClick={() => onClickConsultation()}>\r\n                        {' '}\r\n                        PrEP Visit\r\n                      </Menu.Item>\r\n                    )}\r\n                    {patientObj?.hivresultAtVisit === 'Negative' && (\r\n                      <Menu.Item\r\n                        onClick={() => loadPrEPDiscontinuationsInterruptions()}\r\n                      >\r\n                        PrEP Discontinuations & Interruptions\r\n                      </Menu.Item>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n            <Menu.Item onClick={() => loadPatientHistory(patientObj)}>\r\n              History\r\n            </Menu.Item>\r\n          </>\r\n        ) : (\r\n          <>\r\n            {/* This menu will show only if the patient is migrated  and check if the patient last HIV test result is not positive*/}\r\n            <Menu.Item onClick={() => onClickHome()}>Home</Menu.Item>\r\n            {(patientObj?.hivresultAtVisit === 'Negative' ||\r\n              patientObj?.hivresultAtVisit === null) && (\r\n              <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()}>\r\n                PrEP Eligibility Screening\r\n              </Menu.Item>\r\n            )}\r\n            {(patientObj?.hivresultAtVisit === 'Negative' ||\r\n              patientObj?.hivresultAtVisit === null) &&\r\n              patientObj?.prepCount === '0' && (\r\n                <Menu.Item onClick={() => loadPrEPRegistrationForm()}>\r\n                  PrEP Enrollment\r\n                </Menu.Item>\r\n              )}\r\n            {(patientObj?.hivresultAtVisit === 'Negative' ||\r\n              patientObj?.hivresultAtVisit === null) &&\r\n              (patientObj?.commencementCount === null ||\r\n                patientObj?.commencementCount <= 0) && (\r\n                <Menu.Item onClick={() => loadPrEPCommencementForm()}>\r\n                  PrEP Commencement\r\n                </Menu.Item>\r\n              )}\r\n            {(patientObj?.hivresultAtVisit === 'Negative' ||\r\n              patientObj?.hivresultAtVisit === null) && (\r\n              <Menu.Item onClick={() => onClickConsultation()}>\r\n                {' '}\r\n                PrEP Visit\r\n              </Menu.Item>\r\n            )}\r\n            {(patientObj?.hivresultAtVisit === 'Negative' ||\r\n              patientObj?.hivresultAtVisit === null) && (\r\n              <Menu.Item\r\n                onClick={() => loadPrEPDiscontinuationsInterruptions()}\r\n              >\r\n                PrEP Discontinuations & Interruptions\r\n              </Menu.Item>\r\n            )}\r\n            <Menu.Item onClick={() => loadPatientHistory(patientObj)}>\r\n              History\r\n            </Menu.Item>\r\n          </>\r\n        )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubMenu;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["151","152","153","154","155"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport { Link } from 'react-router-dom';\r\nimport ButtonMui from '@material-ui/core/Button';\r\nimport { TiArrowBack } from 'react-icons/ti';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Label } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col, Row } from 'reactstrap';\r\nimport Moment from 'moment';\r\nimport momentLocalizer from 'react-widgets-moment';\r\nimport moment from 'moment';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AccordionSummary } from '@material-ui/core';\r\nMoment.locale('en');\r\nmomentLocalizer();\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing}px ${theme.spacing(2)}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  const patientObj = props?.patientObj;\r\n\r\n  const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split('-');\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject);\r\n    var age_now = today?.getFullYear() - birthDate?.getFullYear();\r\n    var m = today?.getMonth() - birthDate?.getMonth();\r\n    if (m < 0 || (m === 0 && today?.getDate() < birthDate?.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + ' month(s)';\r\n    }\r\n    return age_now + ' year(s)';\r\n  };\r\n  const getHospitalNumber = identifier => {\r\n    const identifiers = identifier;\r\n    const hospitalNumber = identifiers?.identifier?.find?.(\r\n      obj => obj.type === 'HospitalNumber'\r\n    );\r\n    return hospitalNumber ? hospitalNumber?.value : '';\r\n  };\r\n  const getPhoneNumber = identifier => {\r\n    const identifiers = identifier;\r\n    const phoneNumber = identifiers?.contactPoint?.find?.(\r\n      obj => obj?.type === 'phone'\r\n    );\r\n    return phoneNumber ? phoneNumber?.value : '';\r\n  };\r\n  const getAddress = identifier => {\r\n    console.log('identifier: ', identifier);\r\n    const identifiers = identifier;\r\n    const address = identifiers?.address?.find?.(obj => obj?.city);\r\n    const houseAddress =\r\n      Array.isArray(address?.line) && address?.line[0] != null\r\n        ? address?.line[0]\r\n        : '';\r\n    const landMark =\r\n      address && address?.city && address?.city !== null ? address?.city : '';\r\n    return address ? houseAddress + ' ' + landMark : '';\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion>\r\n        <AccordionSummary>\r\n          <Row>\r\n            <Col md={12}>\r\n              {patientObj && patientObj !== null ? (\r\n                <>\r\n                  <Row className={'mt-1'}>\r\n                    <Col md={12} className={classes?.root2}>\r\n                      <b\r\n                        style={{ fontSize: '25px', color: 'rgb(153, 46, 98)' }}\r\n                      >\r\n                        {patientObj?.firstName + ' ' + patientObj?.surname}\r\n                      </b>\r\n                      <Link to={'/'}>\r\n                        <ButtonMui\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          className=\" float-end ms-2 mr-2 mt-2\"\r\n                          startIcon={<TiArrowBack />}\r\n                          style={{\r\n                            backgroundColor: 'rgb(153, 46, 98)',\r\n                            color: '#fff',\r\n                            height: '35px',\r\n                          }}\r\n                        >\r\n                          <span style={{ textTransform: 'capitalize' }}>\r\n                            Back\r\n                          </span>\r\n                        </ButtonMui>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                      <span>\r\n                        {' '}\r\n                        Patient ID :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {patientObj?.hospitalNumber}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n\r\n                    <Col md={4} className={classes.root2}>\r\n                      <span>\r\n                        Date Of Birth :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {patientObj?.dateOfBirth}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                      <span>\r\n                        {' '}\r\n                        Age :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {calculate_age(\r\n                            moment(patientObj?.dateOfBirth).format('DD-MM-YYYY')\r\n                          )}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <span>\r\n                        {' '}\r\n                        Gender :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>{patientObj?.gender}</b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                      <span>\r\n                        {' '}\r\n                        Sex at Birth :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {patientObj?.sexAtBirth || patientObj?.gender}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                      <span>\r\n                        {' '}\r\n                        Phone Number :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {patientObj?.phoneNumber}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n                    <Col md={6} className={classes.root2}>\r\n                      <span>\r\n                        {' '}\r\n                        Address :{' '}\r\n                        <b style={{ color: '#0B72AA' }}>\r\n                          {patientObj?.address}{' '}\r\n                        </b>\r\n                      </span>\r\n                    </Col>\r\n                    {patientObj?.prepStatus !== null && (\r\n                      <Col md={12}>\r\n                        <div>\r\n                          <Typography variant=\"caption\">\r\n                            <Label color={'teal'} size={'mini'}>\r\n                              STATUS :{' '}\r\n                              {props.activeContent?.obj?.newStatus?.display ||\r\n                                patientObj?.prepStatus}\r\n                            </Label>\r\n                          </Typography>\r\n                        </div>\r\n                      </Col>\r\n                    )}\r\n                  </Row>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <p>Loading please wait..</p>\r\n                </>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </AccordionSummary>\r\n        <Divider />\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {Modal,ModalHeader, ModalBody,Form,\r\n    Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\r\n} from \"reactstrap\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"react-select\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport { Button2, Icon, List } from 'semantic-ui-react'\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport axios from \"axios\";\r\nimport {token, url as baseUrl} from \"../../../api\";\r\n\r\nimport { green, red } from '@mui/material/colors';\r\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\r\n\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n//import SaveIcon from '@mui/icons-material/Save';\r\n// import LinearProgress from '@mui/material/LinearProgress';\r\nimport Typography from '@mui/material/Typography';\r\n// import CancelIcon from '@mui/icons-material/Cancel';\r\n// import ModalImage from \"react-modal-image\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport moment from \"moment\";\r\nimport {Dropdown,Badge} from 'react-bootstrap';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport fingerprintimage  from './../../images/fingerprintimage.png';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport UpgradeIcon from '@mui/icons-material/Upgrade';\r\nimport _ from 'lodash';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":{\r\n            fontFamily:'FontAwesome',\r\n            border:'0',\r\n            verticalAlign:'middle',\r\n            marginLeft:'.25em',\r\n            lineHeight:'1'\r\n        },\r\n        \"& .dropdown-menu .dropdown-item\":{\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            padding: '0.3rem 1.5rem',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .mt-4\":{\r\n            marginTop:'28px !important'\r\n        },\r\n        \"& .form-control\":{\r\n            color:'#992E62'\r\n        },\r\n        \"& .form-control:focus\":{\r\n            color:'#014d88'\r\n        },\r\n        \"& .sharp \":{\r\n            \"min-width\": \"35px\",\r\n            padding:\"5px\",\r\n            height: '35px',\r\n            \"min-height\": \"35px\"\r\n}\r\n    },\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n/*    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },*/\r\n}));\r\n\r\nlet checkUrl=\"\"\r\n\r\nfunction Biometrics(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\r\n    const [biometricDevices,setbiometricDevices] = useState([]);\r\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\r\n    const [fingerType, setFingerType] = useState([]);\r\n    const [devices, setDevices] = useState([]);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [pageLoading, setPageLoading] = useState(false);\r\n    const [showCapture, setshowCapture] = React.useState(false);\r\n    const [tryAgain, setTryAgain] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [storedBiometrics, setStoredBiometrics] = useState([]);\r\n    // const [responseImage, setResponseImage] = useState(\"\")\r\n    const [capturedFingered, setCapturedFingered]= useState([]);\r\n    const [selectedFingers, setSelectedFingers] = useState([]);\r\n\r\n    const buttonSx = {\r\n        ...(success && {\r\n            bgcolor: green[500],\r\n            '&:hover': {\r\n                bgcolor: green[700],\r\n            },\r\n        }),\r\n    };\r\n\r\n    const getPersonBiometrics = async() =>{\r\n        const fingersCodeset = await axios.get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n\r\n        axios.get(`${baseUrl}biometrics/person/${props.patientId}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then(async (response)=>{\r\n            if(response.data.length > 0){\r\n                setStoredBiometrics(response.data);\r\n                setPageLoading(true);\r\n                let personCapturedFingers = _.uniq(_.map(response.data,'templateType'))\r\n                setSelectedFingers(personCapturedFingers);\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: personCapturedFingers.includes(item.display)});\r\n\r\n                });\r\n                setFingerType(biometricItems);\r\n            }else{\r\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                    return _.extend({}, item, {captured: false});\r\n                    //return item.captured = personCapturedFingers.includes(item.display)\r\n                });\r\n                setFingerType(biometricItems);\r\n\r\n            }\r\n\r\n        }).catch(async (error)=>{\r\n            console.log(\"getPersonBiometrics error\")\r\n            console.log(error)\r\n\r\n            let biometricItems =  _.map(fingersCodeset.data, (item)=>{\r\n                return _.extend({}, item, {captured: false});\r\n            });\r\n            setFingerType(biometricItems);\r\n            setPageLoading(true);\r\n        })\r\n    }\r\n\r\n    const clear_storelist = () =>{\r\n        axios.post(`${baseUrl}biometrics/store-list/${props.patientId}`,props.patientId,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            console.log('cleared store')\r\n        }).catch((error)=>{\r\n            console.log(\"cleared store error\")\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        clear_storelist();\r\n        getPersonBiometrics();\r\n        TemplateType();\r\n        //biometricFingers();\r\n    }, []);\r\n    //Get list of KP\r\n    const TemplateType =()=>{\r\n        axios\r\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data===true){\r\n                    axios\r\n                        .get(`${baseUrl}biometrics/devices`,\r\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                        )\r\n                        .then((response) => {\r\n                            setDevices(response.data);\r\n                            setbiometricDevices(response.data);\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error)\r\n                        });\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    //Get list of Finger index\r\n    const biometricFingers =()=>{\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setFingerType(response.data);\r\n            })\r\n            .catch((error) => {\r\n            });\r\n\r\n    }\r\n    //check if device is plugged or not\r\n    const checkDevice = e =>{\r\n        const deviceName =e.target.value;\r\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\r\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\r\n        setObjValues({...objValues, device:deviceName})\r\n        axios\r\n            .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                if(response.data.errorType ===\"ERROR\"){\r\n                    toast.error(response.data.errorName + \" is not plug\");\r\n                    //setshowCapture(true)\r\n                }else{\r\n                    setshowCapture(true)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n            });\r\n    }\r\n    // handle the input changes\r\n\r\n    const handleInputChange = e => {\r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n    }\r\n    //form validation\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\r\n        temp.device = objValues.device ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    //to capture  selected index finger\r\n    const captureFinger = (e) => {\r\n        e.preventDefault();\r\n        if(validate()){\r\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    setLoading(true);\r\n                    if(response.data.type ===\"ERROR\"){\r\n                        setLoading(false);\r\n                        setTryAgain(true);\r\n                        window.setTimeout(() => {\r\n                            setTryAgain(false);\r\n                        }, 5000);\r\n                        toast.error(response.data.message.ERROR);\r\n                    }else{\r\n                        const templateType= response.data.templateType\r\n                        setTryAgain(false);\r\n                        setSuccess(true)\r\n                        window.setTimeout(() => {\r\n                            setSuccess(false)\r\n                            setLoading(false);\r\n                        }, 5000);\r\n                        let biometricsEnrollments = response.data\r\n                        biometricsEnrollments.capturedBiometricsList = _.uniqBy(biometricsEnrollments.capturedBiometricsList,\"templateType\");\r\n\r\n                        setCapturedFingered([...capturedFingered, biometricsEnrollments])\r\n                        //fingerType.splice(templateType, 1);\r\n                        _.find(fingerType,{'display':templateType}).captured = true;\r\n                        setFingerType([...fingerType]);\r\n                        //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\r\n                        setObjValues({...objValues, templateType:\"\"});\r\n                    }\r\n                    //toast.success(\"Record save successful\");\r\n                })\r\n                .catch(error => {\r\n                });\r\n        }\r\n    }\r\n\r\n    const deleteBiometric =(id,finger)=>{\r\n        axios.delete(`${baseUrl}biometrics/${id}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\r\n            toast.success(`${finger} deleted successfully`);\r\n            _.find(fingerType,{'display':finger}).captured = false;\r\n            setFingerType([...fingerType]);\r\n            let newStoredBiometrics = _.reject(storedBiometrics, {\"templateType\":finger});\r\n            setStoredBiometrics(newStoredBiometrics);\r\n            clear_storelist();\r\n            if(newStoredBiometrics.length === 0){\r\n                props.updatePatientBiometricStatus(false);\r\n            }\r\n        }).catch((error)=>{\r\n            toast.error(\"Something went wrong\");\r\n            console.log(error)\r\n\r\n        })\r\n    }\r\n\r\n    //Save Biometric capture\r\n    const saveBiometrics = (e) => {\r\n        e.preventDefault();\r\n        if(capturedFingered.length >= 1){\r\n            const capturedObj= capturedFingered[capturedFingered.length - 1];\r\n            capturedObj.capturedBiometricsList =_.uniqBy(capturedObj.capturedBiometricsList,\"templateType\")\r\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            )\r\n                .then(response => {\r\n                    toast.success(\"Biometric save successful\");\r\n                    setCapturedFingered([])\r\n                    getPersonBiometrics();\r\n                    props.patientObj.biometricStatus=true\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                    //props.updatePatientBiometricStatus(true);\r\n                })\r\n                .catch(error => {\r\n                    toast.error(\"Something went wrong saving biometrics\");\r\n                    console.log(error);\r\n                });\r\n        }else{\r\n\r\n            toast.error(\"You can't save less than 2 finger\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n\r\n            <div style={{display:\"flex\",width:'100%'}}>\r\n                <div className=\"\" style={{padding:'5px', flex:\"7\",boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px',minHeight:'400px'}}>\r\n                    {pageLoading && storedBiometrics.length > 0 ? (\r\n                            <div style={{display:\"flex\",width:'100%',flexWrap:'wrap'}}>\r\n                                {storedBiometrics.map((biometric, index)=>(\r\n                                    <div   key={index} style={{minHeight:'120px',padding:'5px', width:'20%'}}>\r\n                                        <div  className=\"card \" style={{borderRadius:\"6px\"}}>\r\n\r\n                                            <div className=\"card-header align-items-start\" style={{backgroundColor:'#fff'}}>\r\n                                                <div>\r\n                                                    <h6 className=\"fs-18 font-w500 mb-3 user-name\"><Link to={\"#\"} style={{color:'#014d88',fontSize:'14px',fontFamily:`\"poppins\",sans-serif`}}>{biometric.templateType}</Link></h6>\r\n                                                    <div className=\"fs-9 text-nowrap\" style={{fontSize:'10px',color:'#992E62', fontWeight:'bold',fontFamily:`\"poppins\",sans-serif`}}><i className=\"fa fa-calendar-o me-3\" aria-hidden=\"true\"></i>{moment(biometric.lastModifiedDate).format(\"YYYY-MM-DD HH:mm\")}</div>\r\n                                                </div>\r\n\r\n                                                {/*Action button -- Dropdown menu*/}\r\n                                                <Dropdown className=\"dropdown ms-auto\"  >\r\n                                                    <Dropdown.Toggle\r\n                                                        as=\"button\"\r\n                                                        variant=\"\"\r\n                                                        drop=\"up\"\r\n                                                        className=\"btn sharp btn-primary \"\r\n                                                        id=\"tp-btn\"\r\n                                                        style={{ backgroundColor: '#014d88', borderColor:'#014d88', borderRadius:'5px',marginRight:'-18px',marginTop:'-10px'}}\r\n                                                    >\r\n                                                        <svg\r\n                                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n                                                            width=\"18px\"\r\n                                                            height=\"18px\"\r\n                                                            viewBox=\"0 0 24 24\"\r\n                                                            version=\"1.1\"\r\n                                                        >\r\n                                                            <g\r\n                                                                stroke=\"none\"\r\n                                                                strokeWidth=\"1\"\r\n                                                                fill=\"none\"\r\n                                                                fillRule=\"evenodd\"\r\n                                                            >\r\n                                                                <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\r\n                                                            </g>\r\n                                                        </svg>\r\n                                                    </Dropdown.Toggle>\r\n                                                    <Dropdown.Menu alignRight={true} className=\"dropdown-menu-right\">\r\n                                                        <Dropdown.Item style={{color:'red'}} onClick={()=>deleteBiometric(biometric.id,biometric.templateType)}>\r\n                                                            <DeleteIcon /> Delete\r\n                                                        </Dropdown.Item>\r\n\r\n                                                    </Dropdown.Menu>\r\n                                                </Dropdown>\r\n\r\n                                            </div>\r\n                                            <div className=\"card-body p-0 pb-2\">\r\n                                                <ul className=\"list-group list-group-flush\">\r\n                                                    <li className=\"list-group-item\" style={{height:'100px', display:'flex',justifyContent:'center'}}>\r\n                                                        <img src={fingerprintimage}  alt=\"\" style={{height:'80px'}} />\r\n                                                    </li>\r\n\r\n                                                    <li className=\"list-group-item\">\r\n\r\n                                                        <Badge variant=\"info badge-xs light\" className=\"card-link float-end\">Version {/*{contact.version}*/}</Badge>\r\n                                                        <span className=\"mb-0 title\">Status {biometric.iso}</span> :\r\n                                                        <span className=\"text-black desc-text ms-2\">\r\n                                                        <Badge variant={biometric.iso===true? \"primary badge-xs\": \"danger badge-xs\"}><i className=\"fa fa-check-square me-2 scale4\" aria-hidden=\"true\"></i> </Badge>\r\n                                                    </span>\r\n                                                    </li>\r\n\r\n                                                </ul>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                ))}\r\n                            </div>\r\n                        )\r\n                        :\r\n                        <>\r\n                            <div className=\"flex-grow-8\">\r\n                                <div  className=\"flex-grow-8\"  >\r\n                                    <Alert severity=\"info\">\r\n                                        <AlertTitle style={{height:'400px'}}>\r\n                                            <strong>No biometrics captured</strong>\r\n                                        </AlertTitle>\r\n                                    </Alert>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                </div>\r\n\r\n                    <div style={{flex:\"3\",padding:'5px',marginLeft:'5px',border:'1px solid rgba(99, 99, 99, 0.2)',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\r\n                        <div className=\"col-12\">\r\n                            <ToastContainer />\r\n                            <Col md={12}>\r\n                                <FormGroup>\r\n                                    <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Device </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"device\"\r\n                                        id=\"device\"\r\n                                        onChange={checkDevice}\r\n                                        value={objValues.device}\r\n                                        required\r\n                                    >\r\n                                        <option value=\"\">Select Device </option>\r\n                                        {biometricDevices.map(({ id, name }) => (\r\n                                            <option key={id} value={name}>\r\n                                                {name}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.device !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.device}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </Col>\r\n                            {showCapture ? (\r\n                                    <div className=\"row col-12\">\r\n                                        <Col md={6}>\r\n                                            <FormGroup>\r\n                                                <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Finger</Label>\r\n                                                <Input\r\n                                                    type=\"select\"\r\n                                                    name=\"templateType\"\r\n                                                    id=\"templateType\"\r\n                                                    onChange={handleInputChange}\r\n                                                    value={objValues.templateType}\r\n                                                    required\r\n                                                >\r\n                                                    <option value=\"\">Select Finger </option>\r\n\r\n                                                    {_.filter(fingerType, ['captured', false]).map((value) => (\r\n                                                        <option key={value.id} value={value.display}>\r\n                                                            {value.display}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Input>\r\n                                                {errors.templateType !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.templateType}</span>\r\n                                                ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n\r\n                                        <Col md={6}>\r\n\r\n                                            <MatButton\r\n                                                type='button'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                onClick={captureFinger}\r\n                                                className={'mt-4'}\r\n                                                style={{backgroundColor:'#992E62'}}\r\n                                                startIcon={<FingerprintIcon />}\r\n                                            >\r\n                                                Capture Finger\r\n                                            </MatButton>\r\n\r\n                                        </Col>\r\n                                        <br/>\r\n\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                \"\"\r\n                            }\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} style={{marginTop:\"10px\", paddingBottom:'20px'}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',border:'1px dotted #014d88',margin:'5px'}}>\r\n                                                            <List.Header style={{ paddingLeft:\"0px\", height:'0.5rem',display:'flex', justifyContent:'right',alignItems: 'right'}}><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content style={{width:'200px',height:'160px',display:'flex', justifyContent:'center',alignItems: 'center'}}> <FingerprintIcon style={{color:\"#992E62\", fontSize: 150}}/></List.Content>\r\n                                                            <List.Content style={{width:'200px',height:'30px',display:'flex', justifyContent:'center',alignItems: 'center', fontSize: '18px',color:'#014d88',fontWeight:'bold', fontFamily:'\"poppins\", sans-serif'}}>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n\r\n                   \r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n            <Form >\r\n\r\n                    <Card>\r\n                         <CardHeader>\r\n                                    Capture Biometrics\r\n                                </CardHeader>\r\n                        <CardBody>\r\n                            <Row form>\r\n                                <ToastContainer />\r\n                                <Col md={4}>\r\n                                    <FormGroup>\r\n                                        <Label for='device'>Select Device </Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"device\"\r\n                                            id=\"device\"\r\n                                            onChange={checkDevice}\r\n                                            value={objValues.device}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Device </option>\r\n                                            {biometricDevices.map(({ id, name }) => (\r\n                                                <option key={id} value={name}>\r\n                                                    {name}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                        {errors.device !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.device}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                {showCapture ? (\r\n                                        <>\r\n                                            <Col md={4}>\r\n                                                <FormGroup>\r\n                                                    <Label for='device'>Select Finger</Label>\r\n                                                    <Input\r\n                                                        type=\"select\"\r\n                                                        name=\"templateType\"\r\n                                                        id=\"templateType\"\r\n                                                        onChange={handleInputChange}\r\n                                                        value={objValues.templateType}\r\n                                                        required\r\n                                                    >\r\n                                                        <option value=\"\">Select Finger </option>\r\n\r\n                                                        {fingerType.map((value) => (\r\n                                                            <option key={value.id} value={value.display}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Input>\r\n                                                    {errors.templateType !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.templateType}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </Col>\r\n\r\n\r\n                                            <Col md={4}>\r\n\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={captureFinger}\r\n                                                    className={'mt-4'}\r\n                                                    startIcon={<FingerprintIcon />}\r\n                                                >\r\n                                                    Capture Finger\r\n                                                </MatButton>\r\n\r\n                                            </Col>\r\n                                            <br/>\r\n\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                                 <img width='500' height='200' src={responseImage}/>\r\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n\r\n                                    {loading && (\r\n                                        <>\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\r\n                                                    </Fab>\r\n                                                    {loading && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: green[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n                                    {tryAgain && (\r\n                                        <>\r\n\r\n\r\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                                <Box sx={{ m: 1, position: 'relative' }}>\r\n                                                    <Fab\r\n                                                        aria-label=\"save\"\r\n                                                        color=\"secondary\"\r\n                                                        sx={buttonSx}\r\n\r\n                                                    >\r\n                                                        <FingerprintIcon />\r\n                                                    </Fab>\r\n                                                    {tryAgain && (\r\n                                                        <CircularProgress\r\n                                                            size={68}\r\n                                                            sx={{\r\n                                                                color: red[500],\r\n                                                                position: 'absolute',\r\n                                                                top: -6,\r\n                                                                left: -6,\r\n                                                                zIndex: 1,\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Box>\r\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                                    Click to Recapture Again\r\n                                                </Typography>\r\n                                            </Box>\r\n                                        </>\r\n                                    )\r\n                                    }\r\n\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                {capturedFingered.length >=1 ? (\r\n                                        <>\r\n                                            <Col md={12} >\r\n                                                <h3>Captured Fingerprints</h3>\r\n                                            </Col>\r\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\r\n                                                <List celled horizontal>\r\n                                                    {capturedFingered.map((x) => (\r\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\r\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\r\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\r\n                                                        </List.Item>\r\n                                                    ))}\r\n\r\n                                                </List>\r\n\r\n                                            </Col>\r\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\r\n                                        <List celled horizontal>\r\n                                            {[1,2,3].map((x) => (\r\n                                                <List.Item>\r\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\r\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\r\n                                                </List.Item>\r\n                                            ))}\r\n\r\n                                        </List>\r\n\r\n                                    </Col>\r\n                                            <br/><br/><br/><br/><br/><br/>\r\n                                            <Col md={12} >\r\n                                                <MatButton\r\n                                                    type='button'\r\n                                                    variant='contained'\r\n                                                    color='primary'\r\n                                                    onClick={saveBiometrics}\r\n                                                    // className={classes.button}\r\n                                                    startIcon={<SaveIcon/>}\r\n                                                >\r\n                                                    Save Capture\r\n                                                </MatButton>\r\n                                            </Col>\r\n                                        </>\r\n                                    )\r\n                                    :\r\n                                    \"\"\r\n                                }\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n            </Form>\r\n*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Biometrics;","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["187","188","189"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst PatientnHistory = (props) => {\r\n    const [recentActivities, setRecentActivities] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [saving, setSaving] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n    const [record, setRecord] = useState(null)\r\n     const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n        PatientHistory()\r\n      }, [props.patientObj.id]);\r\n        ///GET LIST OF Patients        \r\n        const PatientHistory =()=>{\r\n            setLoading(true)\r\n            axios\r\n               .get(`${baseUrl}prep/general-activities/patients/${props.patientObj.personId}`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                setLoading(false)                       \r\n                    setRecentActivities(response.data)\r\n                })\r\n\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n          }\r\n    \r\n    const LoadViewPage =(row,action)=>{\r\n        \r\n        if(row.path==='prep-eligibility'){        \r\n            props.setActiveContent({...props.activeContent, route:'prep-screening', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-enrollment'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-registration', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-clinic'){//prep-commencement \r\n            props.setActiveContent({...props.activeContent, route:'consultation', recentActivities, id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-commencement'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-commencement', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-interruption'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-interruptions', id:row.id, actionType:action})\r\n\r\n        }else{\r\n\r\n        }\r\n        \r\n    }\r\n    const LoadModal =(row)=>{\r\n        toggle()\r\n        setRecord(row)\r\n    }\r\n    const LoadDeletePage =(row)=>{\r\n        \r\n        if(row.path==='prep-eligibility'){ \r\n            setSaving(true)       \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }else if(row.path==='prep-clinic'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-enrollment'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-commencement'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-interruption'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-interruption/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else{\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n        \r\n    <br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Patient History \"\r\n              columns={[\r\n                { title: \"Name\", field: \"name\" },\r\n                {\r\n                  title: \"Encounter Date\",\r\n                  field: \"date\",\r\n                },               \r\n                // { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              isLoading={loading}\r\n              data={recentActivities && recentActivities.map((row) => ({\r\n                   name: row.name,\r\n                   date: row.date,\r\n                   actions:\r\n            \r\n                    <div>\r\n                        <Menu.Menu position='right'  >\r\n                        <Menu.Item >\r\n                            <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                            <Dropdown item text='Action'>\r\n\r\n                            <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                {row.viewable && ( <Dropdown.Item onClick={()=>LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>)}\r\n                                {row.editable && ( <Dropdown.Item  onClick={()=>LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>)}\r\n                                <Dropdown.Item  onClick={()=>LoadModal(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                            </Button>\r\n                        </Menu.Item>\r\n                        </Menu.Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n        <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered backdrop=\"static\">\r\n            <Modal.Header >\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n                \r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n            \r\n        </Modal.Footer>\r\n        </Modal>    \r\n    </div>\r\n  );\r\n}\r\n    \r\nexport default PatientnHistory;\r\n\r\n\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["190","191","192"],"import React, { Fragment, useState, useEffect } from 'react';\r\n// BS\r\nimport { Dropdown } from 'react-bootstrap';\r\n/// Scroll\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n//import { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { url as baseUrl, token } from '../../../api';\r\n//import { Alert } from \"react-bootstrap\";\r\nimport { Card, Accordion } from 'react-bootstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nconst RecentHistory = props => {\r\n  const [recentActivities, setRecentActivities] = useState([]);\r\n  const [summary, setSummary] = useState(null);\r\n  const [saving, setSaving] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [record, setRecord] = useState(null);\r\n  const toggle = () => setOpen(!open);\r\n  const [activeAccordionHeaderShadow, setActiveAccordionHeaderShadow] =\r\n    useState(0);\r\n\r\n  useEffect(() => {\r\n    Summary();\r\n    RecentActivities();\r\n  }, [props?.patientObj?.personId]);\r\n\r\n  const RecentActivities = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then(response => {\r\n        setRecentActivities(response.data);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const Summary = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep-clinic/person/${props.patientObj.personId}?full=true`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then(response => {\r\n        setSummary(response.data[0]);\r\n      })\r\n      .catch(error => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n\r\n  function countPrepEligibility(data) {\r\n    let count = 0;\r\n    let relevantActivities = ['Prep Commencement', 'Prep Clinic'];\r\n    data.forEach(entry => {\r\n      entry?.activities?.forEach(activity => {\r\n        if (relevantActivities.includes(activity?.name)) {\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  const ActivityName = name => {\r\n    if (name === 'HIV Enrollment') {\r\n      return 'HE';\r\n    } else if (name === 'Prep Clinic') {\r\n      return 'PC';\r\n    } else if (name === 'Prep Enrollment') {\r\n      return 'PE';\r\n    } else if (name === 'Prep Eligibility') {\r\n      return 'PE';\r\n    } else if (name === 'ART Commencement') {\r\n      return 'AC';\r\n    } else {\r\n      return 'RA';\r\n    }\r\n  };\r\n\r\n  const LoadViewPage = (row, action) => {\r\n    if (row.path === 'prep-eligibility') {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: 'prep-screening',\r\n        id: row.id,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === 'prep-enrollment') {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: 'prep-registration',\r\n        id: row.id,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === 'prep-clinic') {\r\n      //prep-commencement\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: 'consultation',\r\n        id: row.id,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === 'prep-commencement') {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: 'prep-commencement',\r\n        id: row.id,\r\n        actionType: action,\r\n      });\r\n    } else if (row.path === 'prep-interruption') {\r\n      props.setActiveContent({\r\n        ...props.activeContent,\r\n        route: 'prep-interruptions',\r\n        id: row.id,\r\n        actionType: action,\r\n      });\r\n    } else {\r\n    }\r\n  };\r\n  const LoadModal = row => {\r\n    toggle();\r\n    setRecord(row);\r\n  };\r\n  const LoadDeletePage = row => {\r\n    if (row.path === 'prep-eligibility') {\r\n      setSaving(true);\r\n      axios\r\n        .delete(`${baseUrl}prep-eligibility/${row.id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then(response => {\r\n          setSaving(false);\r\n          toast.success('Record Deleted Successfully');\r\n          RecentActivities();\r\n          toggle();\r\n        })\r\n        .catch(error => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== ''\r\n                ? error.response.data.apierror.message\r\n                : 'Something went wrong, please try again';\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error('Something went wrong. Please try again...');\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-clinic') {\r\n      setSaving(true);\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then(response => {\r\n          setSaving(false);\r\n          toast.success('Record Deleted Successfully');\r\n          RecentActivities();\r\n          toggle();\r\n        })\r\n        .catch(error => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== ''\r\n                ? error.response.data.apierror.message\r\n                : 'Something went wrong, please try again';\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error('Something went wrong. Please try again...');\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-enrollment') {\r\n      setSaving(true);\r\n      axios\r\n        .delete(`${baseUrl}prep-enrollment/${row.id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then(response => {\r\n          setSaving(false);\r\n          toast.success('Record Deleted Successfully');\r\n          RecentActivities();\r\n          toggle();\r\n        })\r\n        .catch(error => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== ''\r\n                ? error.response.data.apierror.message\r\n                : 'Something went wrong, please try again';\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error('Something went wrong. Please try again...');\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-commencement') {\r\n      setSaving(true);\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then(response => {\r\n          setSaving(false);\r\n          toast.success('Record Deleted Successfully');\r\n          RecentActivities();\r\n          toggle();\r\n        })\r\n        .catch(error => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== ''\r\n                ? error.response.data.apierror.message\r\n                : 'Something went wrong, please try again';\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error('Something went wrong. Please try again...');\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-interruption') {\r\n      setSaving(true);\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-interruption/${row.id}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then(response => {\r\n          setSaving(false);\r\n          toast.success('Record Deleted Successfully');\r\n          RecentActivities();\r\n          toggle();\r\n        })\r\n        .catch(error => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== ''\r\n                ? error.response.data.apierror.message\r\n                : 'Something went wrong, please try again';\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error('Something went wrong. Please try again...');\r\n          }\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n  // const redirectLink=()=>{\r\n  //   props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n  // }\r\n  //const index= 1\r\n\r\n  function joinActivities(data) {\r\n    return data.reduce((acc, item) => {\r\n      return acc.concat(item.activities);\r\n    }, []);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\">\r\n              <h4 className=\"card-title\">Recent Activities</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: '370px' }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <Accordion\r\n                  className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                  defaultActiveKey=\"0\"\r\n                >\r\n                  <>\r\n                    {recentActivities.map((data, i) => (\r\n                      <div className=\"accordion-item\" key={i}>\r\n                        <Accordion.Toggle\r\n                          as={Card.Text}\r\n                          eventKey={`${i}`}\r\n                          className={`accordion-header ${\r\n                            activeAccordionHeaderShadow === 1 ? '' : 'collapsed'\r\n                          } accordion-header-info`}\r\n                          onClick={() =>\r\n                            setActiveAccordionHeaderShadow(\r\n                              activeAccordionHeaderShadow === 1 ? -1 : i\r\n                            )\r\n                          }\r\n                        >\r\n                          <span className=\"accordion-header-icon\"></span>\r\n                          <span className=\"accordion-header-text\">\r\n                            Encounter Date :{' '}\r\n                            <span className=\"\">{data.date}</span>{' '}\r\n                          </span>\r\n                          <span className=\"accordion-header-indicator\"></span>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse\r\n                          eventKey={`${i}`}\r\n                          className=\"accordion__body\"\r\n                        >\r\n                          <div className=\"accordion-body-text\">\r\n                            <ul className=\"timeline\">\r\n                              {data?.activities &&\r\n                                data?.activities.map((activity, index) => (\r\n                                  <li key={activity.id}>\r\n                                    <div className=\"timeline-panel\">\r\n                                      <div\r\n                                        key={0}\r\n                                        className={\r\n                                          index % 2 === 0\r\n                                            ? 'media me-2 media-info'\r\n                                            : 'media me-2 media-success'\r\n                                        }\r\n                                      >\r\n                                        {ActivityName(data.name)}\r\n                                      </div>\r\n                                      <div key={1} className=\"media-body\">\r\n                                        <h5 className=\"mb-1\">\r\n                                          {activity.name}\r\n                                        </h5>\r\n                                        <small className=\"d-block\">\r\n                                          {activity.date}\r\n                                        </small>\r\n                                      </div>\r\n                                      <Dropdown className=\"dropdown\">\r\n                                        <Dropdown.Toggle\r\n                                          variant=\"light\"\r\n                                          className=\"i-false p-0 btn-info sharp\"\r\n                                        >\r\n                                          <svg\r\n                                            width=\"18px\"\r\n                                            height=\"18px\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            version=\"1.1\"\r\n                                          >\r\n                                            <g\r\n                                              stroke=\"none\"\r\n                                              strokeWidth=\"1\"\r\n                                              fill=\"none\"\r\n                                              fillRule=\"evenodd\"\r\n                                            >\r\n                                              <rect\r\n                                                x=\"0\"\r\n                                                y=\"0\"\r\n                                                width=\"24\"\r\n                                                height=\"24\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"5\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"12\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                              <circle\r\n                                                fill=\"#000000\"\r\n                                                cx=\"19\"\r\n                                                cy=\"12\"\r\n                                                r=\"2\"\r\n                                              />\r\n                                            </g>\r\n                                          </svg>\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() =>\r\n                                              LoadViewPage(activity, 'view')\r\n                                            }\r\n                                          >\r\n                                            View\r\n                                          </Dropdown.Item>\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() =>\r\n                                              LoadViewPage(activity, 'update')\r\n                                            }\r\n                                          >\r\n                                            Update\r\n                                          </Dropdown.Item>\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            to=\"/widget-basic\"\r\n                                            onClick={() => LoadModal(activity)}\r\n                                          >\r\n                                            Delete\r\n                                          </Dropdown.Item>\r\n                                        </Dropdown.Menu>\r\n                                      </Dropdown>\r\n                                    </div>\r\n                                  </li>\r\n                                ))}\r\n                            </ul>\r\n                          </div>\r\n                        </Accordion.Collapse>\r\n                      </div>\r\n                    ))}\r\n                  </>\r\n                </Accordion>\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-8 col-xxl-8 col-lg-8\">\r\n          <div className=\"card\">\r\n            <div\r\n              className=\"card-header border-0  pb-2\"\r\n              style={{ backgroundColor: '#EEEEEE' }}\r\n            >\r\n              <h4 className=\"card-title\">Summary </h4>\r\n            </div>\r\n            <div className=\"row\">\r\n              {\r\n                <>\r\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"col-sm-12 col-md-12 col-lg-12\">\r\n                        <div className=\"card overflow-hidden\">\r\n                          <div className=\"social-graph-wrapper widget-facebook\">\r\n                            <span className=\"s-icon\">\r\n                              <span style={{ fontSize: '16px' }}>\r\n                                Total Clinic Visit :{' '}\r\n                                {countPrepEligibility(recentActivities)}\r\n                              </span>\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"row\">\r\n                            <div className=\"col-6 border-right\">\r\n                              <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                                <h4 className=\"m-1\">\r\n                                  <span className=\"counter\">\r\n                                    <b>{summary?.encounterDate}</b>\r\n                                  </span>\r\n                                </h4>\r\n                                {summary && (\r\n                                  <p className=\"m-0\">\r\n                                    <b>Last Visit </b>\r\n                                  </p>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-6\">\r\n                              <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                                <h4 className=\"m-1\">\r\n                                  <span className=\"counter\">\r\n                                    <b>{summary?.nextAppointment}</b>\r\n                                  </span>\r\n                                </h4>\r\n                                {summary && (\r\n                                  <p className=\"m-0\">\r\n                                    <b>Next Visit</b>\r\n                                  </p>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n                        <div className=\"widget-stat card\">\r\n                          <div\r\n                            className=\"card-body p-4\"\r\n                            style={{ backgroundColor: '#fff' }}\r\n                          >\r\n                            <h4\r\n                              className=\"card-title\"\r\n                              style={{ fontSize: '15px' }}\r\n                            >\r\n                              <b>Current Regimen Given</b>\r\n                            </h4>\r\n                            <h4 className=\"text-info \">\r\n                              {summary ? summary?.regimen : 'NIL'}\r\n                            </h4>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"card overflow-hidden\">\r\n                        <div className=\"social-graph-wrapper widget-linkedin\">\r\n                          <span className=\"s-icon\">\r\n                            <span style={{ fontSize: '16px' }}>\r\n                              {\r\n                                <>\r\n                                  BMI :{' '}\r\n                                  {summary\r\n                                    ? (\r\n                                        summary?.weight /\r\n                                        ((summary?.height / 100) *\r\n                                          (summary?.height / 100))\r\n                                      ).toFixed(2)\r\n                                    : 'NIL'}{' '}\r\n                                  {summary && (\r\n                                    <>\r\n                                      kg/m<sup>2</sup>\r\n                                      <span></span>\r\n                                    </>\r\n                                  )}\r\n                                </>\r\n                              }\r\n                            </span>\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-6 border-right\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              {summary && (\r\n                                <>\r\n                                  <h4 className=\"m-1\">\r\n                                    <span className=\"counter\">\r\n                                      {summary ? summary.weight : '0'} Kg\r\n                                    </span>\r\n                                  </h4>\r\n                                  <p className=\"m-0\">\r\n                                    <b>Weight </b>\r\n                                  </p>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-6\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              {summary && (\r\n                                <>\r\n                                  <h4 className=\"m-1\">\r\n                                    <span className=\"counter\">\r\n                                      {summary ? summary.height : '0'} cm\r\n                                    </span>\r\n                                  </h4>\r\n                                  <p className=\"m-0\">\r\n                                    <b>Height </b>\r\n                                  </p>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete <b>{record && record.name}</b>\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(record)}\r\n            style={{ backgroundColor: 'red', color: '#fff' }}\r\n            disabled={saving}\r\n          >\r\n            {saving === false ? 'Yes' : 'Deleting...'}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: '#014d88', color: '#fff' }}\r\n            disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentHistory;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js",["193","194","195","196","197","198","199"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js",["200","201","202"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["203"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs, } from \"react-bootstrap\";\r\nimport ConsultationPage from './Home';\r\nimport ClinicHistoryPage from \"./ClinicHistory\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst ClinicVisitPage = (props) => {\r\n  const [key, setKey] = useState('home');\r\n  const patientObj = props.patientObj\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const getPatientHistory = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/person/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setRecentActivities(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  const [encounters, setEncounters] = useState([])\r\n\r\n  const fetchListOfEncounters = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setEncounters(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setKey(props.activeContent.activeTab)\r\n  }, [props.activeContent]);\r\n\r\n  useEffect(() => { fetchListOfEncounters() }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n\r\n                  <Tab eventKey=\"home\" title=\"CLINIC VISIT \">\r\n                    <ConsultationPage encounters={encounters}  recentActivities={recentActivities} patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} />\r\n                  </Tab>\r\n                  <Tab eventKey=\"history\" title=\"HISTORY\">\r\n                    <ClinicHistoryPage encounters={encounters} getPatientHistory={getPatientHistory} loading={loading} recentActivities={recentActivities} patientObj={patientObj} activeContent={props.activeContent} setActiveContent={props.setActiveContent} />\r\n                  </Tab>\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ClinicVisitPage;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js",["204","205","206","207","208","209"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js",["210","211","212","213"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js",["214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js",["263","264","265"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Dropdown, Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\n\r\n\r\nconst PatientnHistory = (props) => {\r\n\r\n    const [saving, setSaving] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n    const [record, setRecord] = useState(null)\r\n\r\n    const toggle = () => setOpen(prev => !prev);\r\n    useEffect(() => {\r\n        props.getPatientHistory()\r\n        if (props.activeContent.actionType === \"view\") {\r\n            props.getPatientHistory()\r\n        }\r\n    }, [props.patientObj.id, props.activeContent.actionType]);\r\n\r\n    const LoadViewPage = (row, action) => {\r\n        props.setActiveContent({ ...props.activeContent, route: 'consultation', id: row.id, actionType: action, activeTab: 'home' })\r\n    }\r\n    const LoadModal = (row) => {\r\n        toggle()\r\n        setRecord(row)\r\n    }\r\n    const LoadDeletePage = (row) => {\r\n        if (row.path === 'prep-eligibility') {\r\n            setSaving(true)\r\n            axios\r\n                .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                    props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n        } else if (row.path === 'prep-clinic') {\r\n            setSaving(true)\r\n            axios\r\n                .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                    props.getPatientHistory()\r\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else if (row.path === 'prep-enrollment') {\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n                .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                    props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else if (row.path === 'prep-enrollment2') {\r\n            setSaving(true)\r\n            axios\r\n                .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                    props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <br />\r\n\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                title=\"Patient Clinic Visit History\"\r\n                columns={[\r\n                    { title: \"Visit Date\", field: \"date\" },\r\n                    {\r\n                        title: \"Regimen Given\",\r\n                        field: \"regimen\",\r\n                    },\r\n                    { title: \"Next Appointment\", field: \"nextAppointment\", filtering: false },\r\n                    { title: \"Actions\", field: \"actions\", filtering: false },\r\n                ]}\r\n                isLoading={props.loading}\r\n                data={props.recentActivities && props.recentActivities.map((row) => ({\r\n                    date: row.encounterDate,\r\n                    regimen: row.regimen,\r\n                    nextAppointment: row.nextAppointment,\r\n                    actions:\r\n\r\n                        <div>\r\n                            <Menu.Menu position='right'  >\r\n                                <Menu.Item >\r\n                                    <Button style={{ backgroundColor: 'rgb(153,46,98)' }} primary>\r\n                                        <Dropdown item text='Action'>\r\n\r\n                                            <Dropdown.Menu style={{ marginTop: \"10px\", }}>\r\n                                                <Dropdown.Item onClick={() => LoadViewPage(row, 'view')}> <Icon name='eye' />View</Dropdown.Item>\r\n                                                <Dropdown.Item onClick={() => LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>\r\n                                                <Dropdown.Item onClick={() => LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </Button>\r\n                                </Menu.Item>\r\n                            </Menu.Menu>\r\n                        </div>\r\n\r\n                }))}\r\n\r\n                options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width: '200%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions: [10, 20, 100],\r\n                    pageSize: 10,\r\n                    debounceInterval: 400\r\n                }}\r\n            />\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Notification!\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => LoadDeletePage({ ...record, path: \"prep-clinic\" })} style={{ backgroundColor: \"red\", color: \"#fff\" }} disabled={saving}>{saving === false ? \"Yes\" : \"Deleting...\"}</Button>\r\n                    <Button onClick={toggle} style={{ backgroundColor: \"#014d88\", color: \"#fff\" }} disabled={saving}>No</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientnHistory;\r\n\r\n\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\apiCalls\\eligibility.js",[],{"ruleId":"266","severity":1,"message":"267","line":4,"column":41,"nodeType":"268","messageId":"269","endLine":4,"endColumn":47},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"266","severity":1,"message":"274","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":16},{"ruleId":"266","severity":1,"message":"275","line":15,"column":10,"nodeType":"268","messageId":"269","endLine":15,"endColumn":21},{"ruleId":"266","severity":1,"message":"276","line":16,"column":13,"nodeType":"268","messageId":"269","endLine":16,"endColumn":16},{"ruleId":"266","severity":1,"message":"277","line":28,"column":10,"nodeType":"268","messageId":"269","endLine":28,"endColumn":17},{"ruleId":"266","severity":1,"message":"278","line":32,"column":10,"nodeType":"268","messageId":"269","endLine":32,"endColumn":18},{"ruleId":"266","severity":1,"message":"279","line":118,"column":17,"nodeType":"268","messageId":"269","endLine":118,"endColumn":25},{"ruleId":"266","severity":1,"message":"280","line":122,"column":18,"nodeType":"268","messageId":"269","endLine":122,"endColumn":27},{"ruleId":"266","severity":1,"message":"281","line":125,"column":10,"nodeType":"268","messageId":"269","endLine":125,"endColumn":22},{"ruleId":"266","severity":1,"message":"282","line":125,"column":24,"nodeType":"268","messageId":"269","endLine":125,"endColumn":39},{"ruleId":"266","severity":1,"message":"283","line":135,"column":10,"nodeType":"268","messageId":"269","endLine":135,"endColumn":36},{"ruleId":"266","severity":1,"message":"284","line":138,"column":22,"nodeType":"268","messageId":"269","endLine":138,"endColumn":35},{"ruleId":"266","severity":1,"message":"285","line":142,"column":9,"nodeType":"268","messageId":"269","endLine":142,"endColumn":19},{"ruleId":"266","severity":1,"message":"286","line":185,"column":27,"nodeType":"268","messageId":"269","endLine":185,"endColumn":45},{"ruleId":"266","severity":1,"message":"287","line":216,"column":13,"nodeType":"268","messageId":"269","endLine":216,"endColumn":27},{"ruleId":"288","severity":1,"message":"289","line":219,"column":32,"nodeType":"290","messageId":"291","endLine":219,"endColumn":34},{"ruleId":"292","severity":1,"message":"293","line":236,"column":25,"nodeType":"294","messageId":"295","endLine":236,"endColumn":27},{"ruleId":"292","severity":1,"message":"293","line":238,"column":68,"nodeType":"294","messageId":"295","endLine":238,"endColumn":70},{"ruleId":"292","severity":1,"message":"293","line":239,"column":68,"nodeType":"294","messageId":"295","endLine":239,"endColumn":70},{"ruleId":"292","severity":1,"message":"293","line":241,"column":25,"nodeType":"294","messageId":"295","endLine":241,"endColumn":27},{"ruleId":"296","severity":1,"message":"297","line":281,"column":6,"nodeType":"298","endLine":281,"endColumn":59,"suggestions":"299"},{"ruleId":"266","severity":1,"message":"300","line":335,"column":9,"nodeType":"268","messageId":"269","endLine":335,"endColumn":40},{"ruleId":"292","severity":1,"message":"293","line":441,"column":24,"nodeType":"294","messageId":"295","endLine":441,"endColumn":26},{"ruleId":"292","severity":1,"message":"293","line":443,"column":31,"nodeType":"294","messageId":"295","endLine":443,"endColumn":33},{"ruleId":"292","severity":1,"message":"293","line":524,"column":45,"nodeType":"294","messageId":"295","endLine":524,"endColumn":47},{"ruleId":"292","severity":1,"message":"293","line":543,"column":21,"nodeType":"294","messageId":"295","endLine":543,"endColumn":23},{"ruleId":"292","severity":1,"message":"293","line":598,"column":45,"nodeType":"294","messageId":"295","endLine":598,"endColumn":47},{"ruleId":"266","severity":1,"message":"287","line":608,"column":13,"nodeType":"268","messageId":"269","endLine":608,"endColumn":27},{"ruleId":"288","severity":1,"message":"289","line":611,"column":24,"nodeType":"290","messageId":"291","endLine":611,"endColumn":26},{"ruleId":"292","severity":1,"message":"293","line":665,"column":35,"nodeType":"294","messageId":"295","endLine":665,"endColumn":37},{"ruleId":"266","severity":1,"message":"301","line":690,"column":15,"nodeType":"268","messageId":"269","endLine":690,"endColumn":23},{"ruleId":"296","severity":1,"message":"302","line":81,"column":6,"nodeType":"298","endLine":81,"endColumn":8,"suggestions":"303"},{"ruleId":"304","severity":1,"message":"305","line":4,"column":10,"nodeType":"306","messageId":"307","endLine":4,"endColumn":24,"fix":"308"},{"ruleId":"266","severity":1,"message":"309","line":25,"column":10,"nodeType":"268","messageId":"269","endLine":25,"endColumn":20},{"ruleId":"266","severity":1,"message":"310","line":33,"column":8,"nodeType":"268","messageId":"269","endLine":33,"endColumn":14},{"ruleId":"266","severity":1,"message":"311","line":63,"column":10,"nodeType":"268","messageId":"269","endLine":63,"endColumn":21},{"ruleId":"266","severity":1,"message":"312","line":64,"column":10,"nodeType":"268","messageId":"269","endLine":64,"endColumn":17},{"ruleId":"266","severity":1,"message":"313","line":1,"column":17,"nodeType":"268","messageId":"269","endLine":1,"endColumn":25},{"ruleId":"266","severity":1,"message":"314","line":3,"column":16,"nodeType":"268","messageId":"269","endLine":3,"endColumn":21},{"ruleId":"266","severity":1,"message":"315","line":45,"column":9,"nodeType":"268","messageId":"269","endLine":45,"endColumn":16},{"ruleId":"266","severity":1,"message":"313","line":1,"column":17,"nodeType":"268","messageId":"269","endLine":1,"endColumn":25},{"ruleId":"266","severity":1,"message":"316","line":1,"column":27,"nodeType":"268","messageId":"269","endLine":1,"endColumn":36},{"ruleId":"266","severity":1,"message":"317","line":74,"column":9,"nodeType":"268","messageId":"269","endLine":74,"endColumn":26},{"ruleId":"266","severity":1,"message":"318","line":81,"column":9,"nodeType":"268","messageId":"269","endLine":81,"endColumn":23},{"ruleId":"266","severity":1,"message":"319","line":88,"column":9,"nodeType":"268","messageId":"269","endLine":88,"endColumn":19},{"ruleId":"266","severity":1,"message":"320","line":1,"column":38,"nodeType":"268","messageId":"269","endLine":1,"endColumn":44},{"ruleId":"266","severity":1,"message":"321","line":2,"column":9,"nodeType":"268","messageId":"269","endLine":2,"endColumn":14},{"ruleId":"266","severity":1,"message":"322","line":2,"column":15,"nodeType":"268","messageId":"269","endLine":2,"endColumn":26},{"ruleId":"266","severity":1,"message":"323","line":2,"column":28,"nodeType":"268","messageId":"269","endLine":2,"endColumn":37},{"ruleId":"266","severity":1,"message":"324","line":2,"column":38,"nodeType":"268","messageId":"269","endLine":2,"endColumn":42},{"ruleId":"266","severity":1,"message":"325","line":3,"column":15,"nodeType":"268","messageId":"269","endLine":3,"endColumn":19},{"ruleId":"266","severity":1,"message":"326","line":3,"column":20,"nodeType":"268","messageId":"269","endLine":3,"endColumn":28},{"ruleId":"266","severity":1,"message":"327","line":3,"column":44,"nodeType":"268","messageId":"269","endLine":3,"endColumn":54},{"ruleId":"266","severity":1,"message":"328","line":7,"column":8,"nodeType":"268","messageId":"269","endLine":7,"endColumn":14},{"ruleId":"266","severity":1,"message":"329","line":13,"column":10,"nodeType":"268","messageId":"269","endLine":13,"endColumn":17},{"ruleId":"266","severity":1,"message":"330","line":15,"column":8,"nodeType":"268","messageId":"269","endLine":15,"endColumn":19},{"ruleId":"266","severity":1,"message":"331","line":19,"column":17,"nodeType":"268","messageId":"269","endLine":19,"endColumn":20},{"ruleId":"266","severity":1,"message":"332","line":20,"column":10,"nodeType":"268","messageId":"269","endLine":20,"endColumn":16},{"ruleId":"266","severity":1,"message":"333","line":20,"column":18,"nodeType":"268","messageId":"269","endLine":20,"endColumn":24},{"ruleId":"266","severity":1,"message":"334","line":20,"column":26,"nodeType":"268","messageId":"269","endLine":20,"endColumn":31},{"ruleId":"266","severity":1,"message":"335","line":20,"column":33,"nodeType":"268","messageId":"269","endLine":20,"endColumn":40},{"ruleId":"266","severity":1,"message":"336","line":22,"column":8,"nodeType":"268","messageId":"269","endLine":22,"endColumn":11},{"ruleId":"266","severity":1,"message":"337","line":23,"column":8,"nodeType":"268","messageId":"269","endLine":23,"endColumn":24},{"ruleId":"266","severity":1,"message":"338","line":24,"column":8,"nodeType":"268","messageId":"269","endLine":24,"endColumn":14},{"ruleId":"266","severity":1,"message":"339","line":25,"column":8,"nodeType":"268","messageId":"269","endLine":25,"endColumn":11},{"ruleId":"266","severity":1,"message":"340","line":26,"column":8,"nodeType":"268","messageId":"269","endLine":26,"endColumn":17},{"ruleId":"266","severity":1,"message":"341","line":29,"column":8,"nodeType":"268","messageId":"269","endLine":29,"endColumn":18},{"ruleId":"266","severity":1,"message":"342","line":38,"column":8,"nodeType":"268","messageId":"269","endLine":38,"endColumn":19},{"ruleId":"266","severity":1,"message":"343","line":115,"column":11,"nodeType":"268","messageId":"269","endLine":115,"endColumn":22},{"ruleId":"266","severity":1,"message":"344","line":119,"column":12,"nodeType":"268","messageId":"269","endLine":119,"endColumn":19},{"ruleId":"266","severity":1,"message":"312","line":120,"column":12,"nodeType":"268","messageId":"269","endLine":120,"endColumn":19},{"ruleId":"266","severity":1,"message":"345","line":123,"column":12,"nodeType":"268","messageId":"269","endLine":123,"endColumn":20},{"ruleId":"266","severity":1,"message":"346","line":129,"column":12,"nodeType":"268","messageId":"269","endLine":129,"endColumn":27},{"ruleId":"266","severity":1,"message":"347","line":131,"column":11,"nodeType":"268","messageId":"269","endLine":131,"endColumn":19},{"ruleId":"296","severity":1,"message":"348","line":191,"column":8,"nodeType":"298","endLine":191,"endColumn":10,"suggestions":"349"},{"ruleId":"266","severity":1,"message":"350","line":222,"column":11,"nodeType":"268","messageId":"269","endLine":222,"endColumn":27},{"ruleId":"304","severity":1,"message":"305","line":5,"column":10,"nodeType":"306","messageId":"307","endLine":5,"endColumn":24,"fix":"351"},{"ruleId":"266","severity":1,"message":"309","line":28,"column":10,"nodeType":"268","messageId":"269","endLine":28,"endColumn":20},{"ruleId":"296","severity":1,"message":"352","line":66,"column":10,"nodeType":"298","endLine":66,"endColumn":31,"suggestions":"353"},{"ruleId":"266","severity":1,"message":"309","line":5,"column":10,"nodeType":"268","messageId":"269","endLine":5,"endColumn":20},{"ruleId":"296","severity":1,"message":"354","line":31,"column":6,"nodeType":"298","endLine":31,"endColumn":35,"suggestions":"355"},{"ruleId":"266","severity":1,"message":"356","line":269,"column":12,"nodeType":"268","messageId":"269","endLine":269,"endColumn":26},{"ruleId":"266","severity":1,"message":"357","line":23,"column":3,"nodeType":"268","messageId":"269","endLine":23,"endColumn":22},{"ruleId":"266","severity":1,"message":"358","line":25,"column":3,"nodeType":"268","messageId":"269","endLine":25,"endColumn":28},{"ruleId":"266","severity":1,"message":"359","line":27,"column":3,"nodeType":"268","messageId":"269","endLine":27,"endColumn":22},{"ruleId":"266","severity":1,"message":"360","line":30,"column":3,"nodeType":"268","messageId":"269","endLine":30,"endColumn":29},{"ruleId":"266","severity":1,"message":"361","line":161,"column":10,"nodeType":"268","messageId":"269","endLine":161,"endColumn":26},{"ruleId":"296","severity":1,"message":"362","line":273,"column":13,"nodeType":"290","endLine":287,"endColumn":4},{"ruleId":"296","severity":1,"message":"363","line":649,"column":6,"nodeType":"298","endLine":649,"endColumn":8,"suggestions":"364"},{"ruleId":"296","severity":1,"message":"365","line":146,"column":6,"nodeType":"298","endLine":146,"endColumn":8,"suggestions":"366"},{"ruleId":"367","severity":1,"message":"368","line":279,"column":36,"nodeType":"369","messageId":"370","endLine":279,"endColumn":56,"fix":"371"},{"ruleId":"296","severity":1,"message":"372","line":478,"column":6,"nodeType":"298","endLine":478,"endColumn":8,"suggestions":"373"},{"ruleId":"296","severity":1,"message":"374","line":58,"column":48,"nodeType":"298","endLine":58,"endColumn":50,"suggestions":"375"},{"ruleId":"266","severity":1,"message":"324","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":14},{"ruleId":"266","severity":1,"message":"376","line":2,"column":16,"nodeType":"268","messageId":"269","endLine":2,"endColumn":19},{"ruleId":"266","severity":1,"message":"377","line":6,"column":8,"nodeType":"268","messageId":"269","endLine":6,"endColumn":18},{"ruleId":"266","severity":1,"message":"378","line":12,"column":10,"nodeType":"268","messageId":"269","endLine":12,"endColumn":20},{"ruleId":"296","severity":1,"message":"379","line":126,"column":6,"nodeType":"298","endLine":126,"endColumn":8,"suggestions":"380"},{"ruleId":"292","severity":1,"message":"293","line":218,"column":45,"nodeType":"294","messageId":"295","endLine":218,"endColumn":47},{"ruleId":"266","severity":1,"message":"381","line":69,"column":18,"nodeType":"268","messageId":"269","endLine":69,"endColumn":27},{"ruleId":"266","severity":1,"message":"382","line":70,"column":22,"nodeType":"268","messageId":"269","endLine":70,"endColumn":35},{"ruleId":"266","severity":1,"message":"383","line":71,"column":21,"nodeType":"268","messageId":"269","endLine":71,"endColumn":33},{"ruleId":"266","severity":1,"message":"384","line":72,"column":10,"nodeType":"268","messageId":"269","endLine":72,"endColumn":20},{"ruleId":"266","severity":1,"message":"324","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":14},{"ruleId":"266","severity":1,"message":"376","line":2,"column":16,"nodeType":"268","messageId":"269","endLine":2,"endColumn":19},{"ruleId":"296","severity":1,"message":"385","line":135,"column":6,"nodeType":"298","endLine":135,"endColumn":8,"suggestions":"386"},{"ruleId":"266","severity":1,"message":"387","line":199,"column":10,"nodeType":"268","messageId":"269","endLine":199,"endColumn":41},{"ruleId":"266","severity":1,"message":"388","line":211,"column":10,"nodeType":"268","messageId":"269","endLine":211,"endColumn":36},{"ruleId":"266","severity":1,"message":"389","line":214,"column":9,"nodeType":"268","messageId":"269","endLine":214,"endColumn":38},{"ruleId":"367","severity":1,"message":"390","line":232,"column":36,"nodeType":"369","messageId":"370","endLine":232,"endColumn":57,"fix":"391"},{"ruleId":"367","severity":1,"message":"392","line":233,"column":36,"nodeType":"369","messageId":"370","endLine":233,"endColumn":63,"fix":"393"},{"ruleId":"367","severity":1,"message":"394","line":244,"column":36,"nodeType":"369","messageId":"370","endLine":244,"endColumn":56,"fix":"395"},{"ruleId":"367","severity":1,"message":"396","line":245,"column":36,"nodeType":"369","messageId":"370","endLine":245,"endColumn":61,"fix":"397"},{"ruleId":"367","severity":1,"message":"398","line":246,"column":36,"nodeType":"369","messageId":"370","endLine":246,"endColumn":58,"fix":"399"},{"ruleId":"367","severity":1,"message":"400","line":254,"column":36,"nodeType":"369","messageId":"370","endLine":254,"endColumn":75,"fix":"401"},{"ruleId":"367","severity":1,"message":"402","line":263,"column":36,"nodeType":"369","messageId":"370","endLine":263,"endColumn":62,"fix":"403"},{"ruleId":"367","severity":1,"message":"404","line":264,"column":36,"nodeType":"369","messageId":"370","endLine":264,"endColumn":65,"fix":"405"},{"ruleId":"367","severity":1,"message":"406","line":273,"column":36,"nodeType":"369","messageId":"370","endLine":273,"endColumn":61,"fix":"407"},{"ruleId":"367","severity":1,"message":"408","line":274,"column":36,"nodeType":"369","messageId":"370","endLine":274,"endColumn":53,"fix":"409"},{"ruleId":"292","severity":1,"message":"293","line":294,"column":45,"nodeType":"294","messageId":"295","endLine":294,"endColumn":47},{"ruleId":"266","severity":1,"message":"410","line":106,"column":10,"nodeType":"268","messageId":"269","endLine":106,"endColumn":20},{"ruleId":"266","severity":1,"message":"411","line":108,"column":10,"nodeType":"268","messageId":"269","endLine":108,"endColumn":19},{"ruleId":"266","severity":1,"message":"412","line":111,"column":10,"nodeType":"268","messageId":"269","endLine":111,"endColumn":24},{"ruleId":"266","severity":1,"message":"413","line":113,"column":10,"nodeType":"268","messageId":"269","endLine":113,"endColumn":30},{"ruleId":"266","severity":1,"message":"414","line":123,"column":10,"nodeType":"268","messageId":"269","endLine":123,"endColumn":32},{"ruleId":"266","severity":1,"message":"361","line":129,"column":10,"nodeType":"268","messageId":"269","endLine":129,"endColumn":26},{"ruleId":"288","severity":1,"message":"289","line":273,"column":31,"nodeType":"290","messageId":"291","endLine":273,"endColumn":33},{"ruleId":"288","severity":1,"message":"289","line":274,"column":31,"nodeType":"290","messageId":"291","endLine":274,"endColumn":33},{"ruleId":"266","severity":1,"message":"415","line":407,"column":9,"nodeType":"268","messageId":"269","endLine":407,"endColumn":33},{"ruleId":"367","severity":1,"message":"416","line":637,"column":42,"nodeType":"369","messageId":"370","endLine":637,"endColumn":56,"fix":"417"},{"ruleId":"367","severity":1,"message":"418","line":646,"column":42,"nodeType":"369","messageId":"370","endLine":646,"endColumn":65,"fix":"419"},{"ruleId":"367","severity":1,"message":"418","line":648,"column":42,"nodeType":"369","messageId":"370","endLine":648,"endColumn":64,"fix":"420"},{"ruleId":"367","severity":1,"message":"421","line":654,"column":44,"nodeType":"369","messageId":"370","endLine":654,"endColumn":68,"fix":"422"},{"ruleId":"367","severity":1,"message":"418","line":656,"column":43,"nodeType":"369","messageId":"370","endLine":656,"endColumn":65,"fix":"423"},{"ruleId":"367","severity":1,"message":"424","line":684,"column":46,"nodeType":"369","messageId":"370","endLine":684,"endColumn":71,"fix":"425"},{"ruleId":"367","severity":1,"message":"424","line":686,"column":41,"nodeType":"369","messageId":"370","endLine":686,"endColumn":65,"fix":"426"},{"ruleId":"367","severity":1,"message":"427","line":693,"column":46,"nodeType":"369","messageId":"370","endLine":693,"endColumn":71,"fix":"428"},{"ruleId":"367","severity":1,"message":"427","line":695,"column":41,"nodeType":"369","messageId":"370","endLine":695,"endColumn":65,"fix":"429"},{"ruleId":"266","severity":1,"message":"430","line":1037,"column":12,"nodeType":"268","messageId":"269","endLine":1037,"endColumn":32},{"ruleId":"266","severity":1,"message":"431","line":1050,"column":12,"nodeType":"268","messageId":"269","endLine":1050,"endColumn":23},{"ruleId":"296","severity":1,"message":"432","line":1118,"column":6,"nodeType":"298","endLine":1118,"endColumn":38,"suggestions":"433"},{"ruleId":"296","severity":1,"message":"434","line":1130,"column":6,"nodeType":"298","endLine":1130,"endColumn":32,"suggestions":"435"},{"ruleId":"296","severity":1,"message":"362","line":1173,"column":13,"nodeType":"290","endLine":1182,"endColumn":4},{"ruleId":"296","severity":1,"message":"436","line":1182,"column":6,"nodeType":"298","endLine":1182,"endColumn":27,"suggestions":"437"},{"ruleId":"296","severity":1,"message":"362","line":1184,"column":13,"nodeType":"290","endLine":1208,"endColumn":4},{"ruleId":"296","severity":1,"message":"438","line":1208,"column":6,"nodeType":"298","endLine":1208,"endColumn":27,"suggestions":"439"},{"ruleId":"296","severity":1,"message":"440","line":1217,"column":6,"nodeType":"298","endLine":1217,"endColumn":8,"suggestions":"441"},{"ruleId":"442","severity":1,"message":"443","line":1770,"column":15,"nodeType":"444","endLine":1770,"endColumn":45},{"ruleId":"292","severity":1,"message":"293","line":1813,"column":40,"nodeType":"294","messageId":"295","endLine":1813,"endColumn":42},{"ruleId":"292","severity":1,"message":"293","line":1817,"column":36,"nodeType":"294","messageId":"295","endLine":1817,"endColumn":38},{"ruleId":"292","severity":1,"message":"293","line":2559,"column":53,"nodeType":"294","messageId":"295","endLine":2559,"endColumn":55},{"ruleId":"292","severity":1,"message":"293","line":2644,"column":53,"nodeType":"294","messageId":"295","endLine":2644,"endColumn":55},{"ruleId":"304","severity":1,"message":"305","line":5,"column":10,"nodeType":"306","messageId":"307","endLine":5,"endColumn":24,"fix":"445"},{"ruleId":"266","severity":1,"message":"446","line":56,"column":7,"nodeType":"268","messageId":"269","endLine":56,"endColumn":16},{"ruleId":"296","severity":1,"message":"447","line":113,"column":8,"nodeType":"298","endLine":113,"endColumn":61,"suggestions":"448"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["449"],"no-negated-in-lhs",["450"],"'format' is defined but never used.","'yupResolver' is defined but never used.","'yup' is defined but never used.","'useForm' is defined but never used.","'getValue' is defined but never used.","'setToday' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'editRelative' is assigned a value but never used.","'setEditRelative' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setHideTargetGroup' is assigned a value but never used.","'actualcontacts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'basicInfo', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.","ArrayExpression",["451"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'PatientObject'. Either include it or remove the dependency array.",["452"],"no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"453","text":"454"},"'makeStyles' is defined but never used.","'moment' is defined but never used.","'patientList' is assigned a value but never used.","'loading' is assigned a value but never used.","'useState' is defined but never used.","'Popup' is defined but never used.","'history' is assigned a value but never used.","'useEffect' is defined but never used.","'getHospitalNumber' is assigned a value but never used.","'getPhoneNumber' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'Segment' is defined but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'Typography' is defined but never used.","'UpgradeIcon' is defined but never used.","'permissions' is assigned a value but never used.","'devices' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["455"],"'biometricFingers' is assigned a value but never used.",{"range":"456","text":"454"},"React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["457"],"React Hook useEffect has missing dependencies: 'RecentActivities' and 'Summary'. Either include them or remove the dependency array.",["458"],"'joinActivities' is defined but never used.","'savePrepEligibility' is defined but never used.","'getPatientPrepEligibility' is defined but never used.","'getRecentActivities' is defined but never used.","'getLiverFunctionTestResult' is defined but never used.","'recentActivities' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has a missing dependency: 'getRecentActivities'. Either include it or remove the dependency array.",["459"],"React Hook useEffect has missing dependencies: 'getPatientCommencement', 'getPatientDTOObj', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["460"],"no-useless-computed-key","Unnecessarily computed property ['datereferred'] found.","Property","unnecessarilyComputedProperty",{"range":"461","text":"462"},"React Hook useEffect has a missing dependency: 'getLatestFromEligibility'. Either include it or remove the dependency array.",["463"],"React Hook useEffect has a missing dependency: 'fetchListOfEncounters'. Either include it or remove the dependency array.",["464"],"'Row' is defined but never used.","'CancelIcon' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientPrepEnrollment', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["465"],"'setErrors' is assigned a value but never used.","'setCarePoints' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'transferIn' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientInterruption', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["466"],"'reasonForDiscontinuationOptions' is assigned a value but never used.","'reasonForPrepInterruptions' is assigned a value but never used.","'getReasonForPrepInterruptions' is assigned a value but never used.","Unnecessarily computed property ['reasonStopped'] found.",{"range":"467","text":"468"},"Unnecessarily computed property ['reasonStoppedOthers'] found.",{"range":"469","text":"470"},"Unnecessarily computed property ['causeOfDeath'] found.",{"range":"471","text":"472"},"Unnecessarily computed property ['sourceOfDeathInfo'] found.",{"range":"473","text":"474"},"Unnecessarily computed property ['dateClientDied'] found.",{"range":"475","text":"476"},"Unnecessarily computed property ['dateRestartPlacedBackMedication'] found.",{"range":"477","text":"478"},"Unnecessarily computed property ['facilityReferredTo'] found.",{"range":"479","text":"480"},"Unnecessarily computed property ['dateClientReferredOut'] found.",{"range":"481","text":"482"},"Unnecessarily computed property ['dateSeroconverted'] found.",{"range":"483","text":"484"},"Unnecessarily computed property ['linkToArt'] found.",{"range":"485","text":"486"},"'prepStatus' is assigned a value but never used.","'htsResult' is assigned a value but never used.","'labTestOptions' is assigned a value but never used.","'creatinineTestResult' is assigned a value but never used.","'selectedPopulationType' is assigned a value but never used.","'getPrepRiskReductionPlan' is assigned a value but never used.","Unnecessarily computed property ['others'] found.",{"range":"487","text":"488"},"Unnecessarily computed property ['syphilisTest'] found.",{"range":"489","text":"490"},{"range":"491","text":"490"},"Unnecessarily computed property ['hepatitisTest'] found.",{"range":"492","text":"493"},{"range":"494","text":"490"},"Unnecessarily computed property ['urinalysisTest'] found.",{"range":"495","text":"496"},{"range":"497","text":"496"},"Unnecessarily computed property ['creatinineTest'] found.",{"range":"498","text":"499"},{"range":"500","text":"499"},"'countPrepEligibility' is defined but never used.","'isValidDate' is defined but never used.","React Hook useEffect has a missing dependency: 'emptyObjValues'. Either include it or remove the dependency array.",["501"],"React Hook useEffect has a missing dependency: 'populationType'. Either include it or remove the dependency array.",["502"],"React Hook useEffect has a missing dependency: 'getPrepEligibilityObj'. Either include it or remove the dependency array.",["503"],"React Hook useEffect has missing dependencies: 'getPatientDtoObj', 'getPatientVisit', 'getPrepEligibilityObj', and 'getTestGroup'. Either include them or remove the dependency array.",["504"],"React Hook useEffect has missing dependencies: 'getHivResult', 'getLatestFromEligibility', and 'getRecentActivities'. Either include them or remove the dependency array.",["505"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",{"range":"506","text":"454"},"'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["507"],"no-global-assign","no-unsafe-negation",{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},[154,168],"token",{"desc":"512","fix":"513"},[184,198],{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},[7479,7495],"'datereferred'",{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},[6728,6745],"'reasonStopped'",[6790,6813],"'reasonStoppedOthers'",[7197,7213],"'causeOfDeath'",[7258,7279],"'sourceOfDeathInfo'",[7324,7342],"'dateClientDied'",[7635,7670],"'dateRestartPlacedBackMedication'",[8000,8022],"'facilityReferredTo'",[8067,8092],"'dateClientReferredOut'",[8410,8431],"'dateSeroconverted'",[8476,8489],"'linkToArt'",[19261,19271],"'others'",[19617,19633],"'syphilisTest'",[19701,19717],[19912,19929],"'hepatitisTest'",[19998,20014],[20734,20752],"'urinalysisTest'",[20819,20837],[21037,21055],"'creatinineTest'",[21122,21140],{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},[184,198],{"desc":"540","fix":"541"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",{"range":"542","text":"543"},"Update the dependencies array to be: [PatientObject]",{"range":"544","text":"545"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"546","text":"547"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"548","text":"549"},"Update the dependencies array to be: [RecentActivities, Summary, props.patientObj.personId]",{"range":"550","text":"551"},"Update the dependencies array to be: [getRecentActivities]",{"range":"552","text":"553"},"Update the dependencies array to be: [getPatientCommencement, getPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",{"range":"554","text":"555"},"Update the dependencies array to be: [getLatestFromEligibility]",{"range":"556","text":"557"},"Update the dependencies array to be: [fetchListOfEncounters]",{"range":"558","text":"559"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",{"range":"560","text":"561"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",{"range":"562","text":"563"},"Update the dependencies array to be: [emptyObjValues, props.activeContent.actionType]",{"range":"564","text":"565"},"Update the dependencies array to be: [objValues.populationType, populationType]",{"range":"566","text":"567"},"Update the dependencies array to be: [getPrepEligibilityObj, props.activeContent]",{"range":"568","text":"569"},"Update the dependencies array to be: [getPatientDtoObj, getPatientVisit, getPrepEligibilityObj, getTestGroup, props.activeContent]",{"range":"570","text":"571"},"Update the dependencies array to be: [getHivResult, getLatestFromEligibility, getRecentActivities]",{"range":"572","text":"573"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.actionType, props]",{"range":"574","text":"575"},[9809,9862],"[patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",[2504,2506],"[PatientObject]",[6965,6967],"[clear_storelist, getPersonBiometrics]",[3326,3347],"[PatientHistory, props.patientObj.id]",[1140,1169],"[RecentActivities, Summary, props.patientObj.personId]",[20435,20437],"[getRecentActivities]",[3922,3924],"[getPatientCommencement, getPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",[14562,14564],"[getLatestFromEligibility]",[1665,1667],"[fetchListOfEncounters]",[3479,3481],"[GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",[3774,3776],"[GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",[34703,34735],"[emptyObjValues, props.activeContent.actionType]",[35075,35101],"[objValues.populationType, populationType]",[36798,36819],"[getPrepEligibilityObj, props.activeContent]",[37964,37985],"[getPatientDtoObj, getPatientVisit, getPrepEligibilityObj, getTestGroup, props.activeContent]",[38200,38202],"[getHivResult, getLatestFromEligibility, getRecentActivities]",[4236,4289],"[props.patientObj.id, props.activeContent.actionType, props]"]