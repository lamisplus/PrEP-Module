[{"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\index.js":"1","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\App.js":"2","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"7","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"8","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"9","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"10","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"11","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\api.js":"12","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js":"13","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"14","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"15","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js":"16","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js":"17","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"18","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js":"19","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js":"20","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js":"21","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js":"22","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"23"},{"size":729,"mtime":1726153407043,"results":"24","hashOfConfig":"25"},{"size":1326,"mtime":1726153407027,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1726153409829,"results":"27","hashOfConfig":"25"},{"size":8947,"mtime":1726153409852,"results":"28","hashOfConfig":"25"},{"size":2920,"mtime":1726153409867,"results":"29","hashOfConfig":"25"},{"size":1887,"mtime":1726153453666,"results":"30","hashOfConfig":"25"},{"size":5936,"mtime":1726153455090,"results":"31","hashOfConfig":"25"},{"size":119482,"mtime":1726153455152,"results":"32","hashOfConfig":"25"},{"size":7449,"mtime":1726153455074,"results":"33","hashOfConfig":"25"},{"size":9039,"mtime":1726153455106,"results":"34","hashOfConfig":"25"},{"size":5243,"mtime":1726153455137,"results":"35","hashOfConfig":"25"},{"size":475,"mtime":1726207088479,"results":"36","hashOfConfig":"25"},{"size":39704,"mtime":1726153455021,"results":"37","hashOfConfig":"25"},{"size":20195,"mtime":1726161933920,"results":"38","hashOfConfig":"25"},{"size":13728,"mtime":1726153454273,"results":"39","hashOfConfig":"25"},{"size":29656,"mtime":1726153455252,"results":"40","hashOfConfig":"25"},{"size":47648,"mtime":1726161515413,"results":"41","hashOfConfig":"25"},{"size":2919,"mtime":1726161515394,"results":"42","hashOfConfig":"25"},{"size":14971,"mtime":1726153455290,"results":"43","hashOfConfig":"25"},{"size":118902,"mtime":1726163328376,"results":"44","hashOfConfig":"25"},{"size":21766,"mtime":1726153455274,"results":"45","hashOfConfig":"25"},{"size":13058,"mtime":1726161515394,"results":"46","hashOfConfig":"25"},{"size":98919,"mtime":1726233142209,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"1xyzrsn",{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":10,"source":"90","usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93","usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"51"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"51"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"51"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"51"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108","usedDeprecatedRules":"51"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\index.js",["111"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\n\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \n\nReactDOM.render(\n\t<React.StrictMode>\n\n            <SimpleReactLightbox>\n                <BrowserRouter basename='/'>\n                    <ThemeContext>\n                        <App />\n                    </ThemeContext>  \n                </BrowserRouter>\n            </SimpleReactLightbox>\n\n\t</React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n",["112","113"],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\App.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["114"],"import React,{useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport PatientCardDetail from './PatientCard'\nimport { useHistory } from \"react-router-dom\";\nimport SubMenu from './SubMenu';\nimport RecentHistory from './../History/RecentHistory';\nimport PatientHistory from './../History/PatientHistory'\nimport ClinicVisit from '../Consultation/Index'\nimport PrEPCommencementForm from './../PrepServices/PrEPCommencementForm';\nimport PrEPDiscontinuationsInterruptions from './../PrepServices/PrEPDiscontinuationsInterruptions';\nimport PrEPEligibiltyScreeningForm from './../PrepServices/PrEPEligibiltyScreeningForm';\nimport PrEPVisit from './../PrepServices/PrEPVisit';\nimport PrEPRegistrationForm from './../PrepServices/PrEPRegistrationForm';\nimport Biometrics from './Biometric'\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../api\";\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '20.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n});\n\n\nfunction PatientCard(props) {\n  \n    let history = useHistory();\n    console.log(\"props\", history.location)\n    const [patientDetail, setPatientDetail] = useState(\"\")\n    const [activeContent, setActiveContent] = useState({route:\"recent-history\", id:\"\", activeTab:\"home\", actionType:\"create\", obj:{}});\n    const { classes } = props;\n    \n    const patientObjLocation = history.location && history.location.state ? history.location.state.patientObj : {}\n    console.log(\"patientId\", patientObjLocation)\n    const prepId = history.location && history.location.state ? history.location.state.prepId : {}\n    //console.log(patientObj)\n    useEffect(() => {\n      PatientObject()\n     }, []);\n\n     async function PatientObject() {\n      axios\n          .get(`${baseUrl}prep/persons/${patientObjLocation.personId}`,\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\n          )\n          .then((response) => {\n            setPatientDetail(response.data);\n            //patientObj=response.data\n          })\n          .catch((error) => {    \n          });        \n    }\n  return (\n    <div className={classes.root}>\n      <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\n\t\t\t<ol className=\"breadcrumb\">\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >PrEP /</Link> Patient Dashboard</h4></li>\n\t\t\t</ol>\n\t\t  </div>\n      <Card >\n        <CardContent>\n          {/* This component is where the patient menu and route is define and manage */}\n            {/* start of patient card detail */}\n            <PatientCardDetail patientObj={patientObjLocation}  setActiveContent={setActiveContent} patientDetail={patientDetail}/> \n            {/* End of patient card detail */} \n            {/* This is the submenu components */}          \n            <SubMenu patientObj={patientObjLocation}  setActiveContent={setActiveContent} patientDetail={patientDetail}/>\n            <br/>\n            {/* This is the submenu routes */}\n            {activeContent.route==='recent-history' &&(<RecentHistory patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\n            {activeContent.route==='biometrics' &&(<Biometrics patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\n            {activeContent.route==='consultation' &&( <ClinicVisit patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\n            {/* {activeContent==='child-consultation' &&( <ChildConsultation patientObj={patientObj} setActiveContent={setActiveContent}/>)} */}\n            {activeContent.route==='prep-commencement' &&( <PrEPCommencementForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)}\n            {activeContent.route==='prep-interruptions' &&( <PrEPDiscontinuationsInterruptions patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)}\n            {activeContent.route==='prep-screening' &&( <PrEPEligibiltyScreeningForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} patientDetail={patientDetail} PatientObject={PatientObject}/>)}\n            {activeContent.route==='prep-visit' &&( <PrEPVisit PatientObject={PatientObject}/>)}\n            {activeContent.route==='prep-registration' &&( <PrEPRegistrationForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)} \n            {activeContent.route==='patient-history' &&( <PatientHistory patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent}/>)}         \n          {/* History Pages */}\n         \n         </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {format} from 'date-fns';\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport {FormGroup, Label, Spinner,Input,Form} from \"reactstrap\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\nimport {TiArrowBack} from 'react-icons/ti'\nimport {useForm} from \"react-hook-form\";\nimport {token, url as baseUrl } from \"../../../api\";\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport { getValue } from \"@syncfusion/ej2-base\";\nimport  './patient.css'\n// import Form from 'react-bootstrap/Form';\n\n\n\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: 752,\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst UserRegistration = (props) => {\n    console.log(props)\n    const [basicInfo, setBasicInfo]= useState(\n            {\n                active: true,\n                address: [],\n                contact: [],\n                contactPoint: [],\n                dateOfBirth: \"\",\n                deceased: false,\n                deceasedDateTime: null,\n                firstName: \"\",\n                genderId: \"\",\n                identifier: \"\",\n                otherName: \"\",\n                maritalStatusId: \"\",\n                educationId: \"\",\n                employmentStatusId:\"\",\n                dateOfRegistration: \"\",\n                isDateOfBirthEstimated: null,\n                age:\"\",\n                phoneNumber:\"\",\n                altPhonenumber:\"\",\n                dob:\"\",\n                countryId:\"\",\n                stateId:\"\",\n                district:\"\",\n                landmark:\"\",\n                sexId:\"\",\n                ninNumber:\"\"\n\n            }\n    )\n    const [relatives, setRelatives]= useState(\n                { \n                    address:\"\",\n                    phone:\"\",\n                    firstName: \"\",\n                    email: \"\",\n                    relationshipId: \"\",\n                    lastName: \"\",\n                    middleName: \"\"\n                }\n        )\n\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\n    const [contacts, setContacts] = useState([]);\n    const [saving, setSaving] = useState(false);\n    const [ageDisabled, setAgeDisabled] = useState(true);\n    const [showRelative, setShowRelative] = useState(false);\n    const [editRelative, setEditRelative] = useState(null);\n    const [genders, setGenders]= useState([]);\n    const [maritalStatusOptions, setMaritalStatusOptions]= useState([]);\n    const [educationOptions, setEducationOptions]= useState([]);\n    const [occupationOptions, setOccupationOptions]= useState([]);\n    const [relationshipOptions, setRelationshipOptions]= useState([]);\n    const [countries, setCountries] = useState([]);\n    const [states, setStates] = useState([]);\n    const [provinces, setProvinces] = useState([]);\n    const [errors, setErrors] = useState({})\n    const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions]= useState([]);\n    const [patientDTO, setPatientDTO]= useState({\"person\":\"\", \"hivEnrollment\":\"\"})\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\n    const classes = useStyles();\n    const history = useHistory();\n    const location = useLocation();\n     //HIV INFORMATION\n     const [femaleStatus, setfemaleStatus]= useState(false)\n     //const [values, setValues] = useState([]);\n     const [objValues, setObjValues] = useState({id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",dateConfirmedHiv:\"\",sourceOfReferrerId:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\",\n     householdNumber:\"\", referredToOVCPartner:\"\", dateReferredToOVCPartner:\"\",\n     referredFromOVCPartner:\"\", dateReferredFromOVCPartner:\"\",\n     careEntryPointOther:\"\"});\n     const [carePoints, setCarePoints] = useState([]);\n     const [sourceReferral, setSourceReferral] = useState([]);\n     const [hivStatus, setHivStatus] = useState([]);\n     const [enrollSetting, setEnrollSetting] = useState([]);\n     const [tbStatus, setTbStatus] = useState([]);\n     const [kP, setKP] = useState([]);\n     const [pregnancyStatus, setPregnancyStatus] = useState([]);\n     //set ro show the facility name field if is transfer in \n     const [transferIn, setTransferIn] = useState(false);\n     // display the OVC number if patient is enrolled into OVC \n     const [ovcEnrolled, setOvcEnrolled] = useState(false);\n     //Input fields to hidden base on some conditions\n     const [hideTargetGroup, setHideTargetGroup]= useState(\"false\");\n    \n    const locationState = location.state;\n    let patientId = null;\n    let patientObj = {};\n    patientId = locationState ? locationState.patientId : null;\n    patientObj = locationState ? locationState.patientObj : {}; \n    //status for hospital Number \n    const [hospitalNumStatus, setHospitalNumStatus]= useState(false);\n    const [hospitalNumStatus2, setHospitalNumStatus2]= useState(false);\n    \n    useEffect(() => { \n        loadGenders();\n        loadMaritalStatus();\n        loadEducation();\n        loadOccupation();\n        loadRelationships();\n        loadTopLevelCountry();        \n        CareEntryPoint();\n        SourceReferral();\n        HivStatus();\n        EnrollmentSetting();\n        TBStatus();\n        KP();\n        PregnancyStatus();\n        GetCountry();\n        if(patientObj){\n            const contacts = patientObj.contact ? patientObj.contact : [];\n            //setContacts(contacts.contact);\n            let newConatctsInfo=[]\n            //Manipulate relatives contact  address:\"\",\n            const actualcontacts=contacts.contact && contacts.contact.length>0 && contacts.contact.map((x)=>{ \n                const contactInfo = \n                    { \n                        address:x.address.line[0],\n                        phone:x.contactPoint.value,\n                        firstName:x.firstName,\n                        email: \"\",\n                        relationshipId: x.relationshipId,\n                        lastName: x.surname,\n                        middleName: x.otherName\n                    }\n                newConatctsInfo.push(contactInfo)\n            })\n            setContacts(newConatctsInfo);\n            const identifiers = patientObj.identifier;\n            const address = patientObj.address;\n            const contactPoint = patientObj.contactPoint;\n            const hospitalNumber = identifiers.identifier.find(obj => obj.type == 'HospitalNumber');\n            const phone = contactPoint.contactPoint.find(obj => obj.type == 'phone');\n            const email = contactPoint.contactPoint.find(obj => obj.type == 'email');\n            const altphone = contactPoint.contactPoint.find(obj => obj.type == 'altphone');\n            const country = address && address.address && address.address.length > 0 ? address.address[0] : null;\n            //setValue('dob', format(new Date(patientObj.dateOfBirth), 'yyyy-MM-dd'));\n            basicInfo.dob=patientObj.dateOfBirth\n            basicInfo.firstName=patientObj.firstName\n            basicInfo.dateOfRegistration=patientObj.dateOfRegistration\n            basicInfo.middleName=patientObj.otherName\n            basicInfo.lastName=patientObj.surname\n            basicInfo.hospitalNumber=hospitalNumber ? hospitalNumber.value : ''\n            basicInfo.maritalStatusId=patientObj.maritalStatus.id\n            basicInfo.employmentStatusId=patientObj.employmentStatus.id\n            basicInfo.genderId=patientObj.gender ? patientObj.gender.id : null\n            basicInfo.sexId=patientObj.sex \n            basicInfo.educationId=patientObj.education.id\n            basicInfo.phoneNumber=phone && phone.value ? phone.value : \"\"\n            basicInfo.altPhonenumber= altphone && altphone.value ? altphone.value : \"\"\n            basicInfo.email=email && email.value ? email.value : \"\"\n            basicInfo.address=country && country.city ? country.city : \"\"\n            basicInfo.landmark=country.line[0]\n            basicInfo.countryId=country.countryId\n            setStateByCountryId(country.countryId); \n            getProvincesId(country.stateId)\n            basicInfo.stateId=country.stateId\n            basicInfo.district=country.district\n            setObjValues(patientObj.enrollment)\n            const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"))\n            basicInfo.age=patientAge\n            setfemaleStatus(patientObj.sex==='Female'? true : false)\n            basicInfo.ninNumber=patientObj.ninNumber\n\n        }\n        if(basicInfo.dateOfRegistration < basicInfo.dob){\n            alert('Date of registration can not be earlier than date of birth')\n        }\n        \n    }, [patientObj, patientId, basicInfo.dateOfRegistration]);\n\n    const loadGenders = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setGenders(response.data);\n        } catch (e) {\n            \n        }\n    }, []);\n    const loadMaritalStatus = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setMaritalStatusOptions(response.data);\n        } catch (e) {\n        }\n    }, []);\n    const loadEducation = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}application-codesets/v2/EDUCATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setEducationOptions(response.data);\n        } catch (e) {\n\n        }\n    }, []);\n    const loadOccupation = useCallback(async () => {\n        try {\n            const response = await axios.get(`${baseUrl}application-codesets/v2/OCCUPATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n            setOccupationOptions(response.data);\n        } catch (e) {\n\n        }\n    }, []);\n    const loadRelationships = useCallback(async () => {\n      try {\n          const response = await axios.get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n          setRelationshipOptions(response.data);\n      } catch (e) {\n      }\n    }, []);\n    const loadTopLevelCountry = useCallback(async () => {\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/0`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n        settopLevelUnitCountryOptions(response.data);\n    }, []);\n    const loadOrganisationUnitsByParentId = async (parentId) => {\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/${parentId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n        return response.data;\n    };\n\n    //Country List\n      const GetCountry =()=>{\n        axios\n        .get(`${baseUrl}organisation-units/parent-organisation-units/0`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setCountries(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });        \n    }\n    //Calculate Date of birth \n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now ;\n      };\n     //Get States from selected country\n     const getStates = e => {\n        const getCountryId =e.target.value;\n\n            setStateByCountryId(getCountryId); \n            setBasicInfo({ ...basicInfo, countryId: getCountryId });\n    };\n    //Get list of State\n    function setStateByCountryId(getCountryId) {\n        axios\n        .get(`${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setStates(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });  \n    }\n    \n     //fetch province\n     const getProvinces = e => {\n            const stateId = e.target.value;\n            setBasicInfo({ ...basicInfo, stateId: e.target.value });\n            axios\n            .get(`${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setProvinces(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });  \n    };\n    function getProvincesId(getStateId) {\n        axios\n        .get(`${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setProvinces(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });  \n    }\n    //Date of Birth and Age handle \n    const handleDobChange = (e) => {\n        if (e.target.value) {\n            const today = new Date();\n            const birthDate = new Date(e.target.value);\n            let age_now = today.getFullYear() - birthDate.getFullYear();\n            const m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                age_now--;\n            }\n            basicInfo.age=age_now\n            //setBasicInfo({...basicInfo, age: age_now});        \n        } else {\n            setBasicInfo({...basicInfo, age:  \"\"});\n        }\n        setBasicInfo({...basicInfo, dob: e.target.value});\n        \n    }\n    const handleDateOfBirthChange = (e) => {\n        if (e.target.value == \"Actual\") {\n            setAgeDisabled(true);\n        } else if (e.target.value == \"Estimated\") {\n            setAgeDisabled(false);\n        }\n    }\n    const handleAgeChange = (e) => {\n        if (!ageDisabled && e.target.value) {\n            \n            const currentDate = new Date();\n            currentDate.setDate(15);\n            currentDate.setMonth(5);\n            const estDob = moment(currentDate.toISOString());\n            const dobNew = estDob.add((e.target.value * -1), 'years');\n            //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\n            basicInfo.dob =moment(dobNew).format(\"YYYY-MM-DD\")\n\n        }\n        setBasicInfo({...basicInfo, age: e.target.value});\n    }\n    //End of Date of Birth and Age handling \n    //Handle Input Change for Basic Infor\n    const handleInputChangeBasic = e => {        \n        setBasicInfo ({...basicInfo,  [e.target.name]: e.target.value}); \n        //manupulate inpute fields base on gender/sex \n        if(e.target.name==='sexId' && e.target.value==='Female') {\n            setfemaleStatus(true)\n        }\n        if(e.target.name==='firstName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\n        }\n        if(e.target.name==='lastName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\n        }\n        if(e.target.name==='middleName' && e.target.value!==''){\n            const name = alphabetOnly(e.target.value)\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\n        }\n        if(e.target.name==='hospitalNumber' && e.target.value!==''){\n            async function getCharacters() {\n                const hosiptalNumber=e.target.value\n                const response = await axios.post(`${baseUrl}patient/exist/hospital-number`, hosiptalNumber,\n                        { headers: {\"Authorization\" : `Bearer ${token}`, 'Content-Type': 'text/plain'} }\n                    );\n                if(response.data!==true){\n                    setHospitalNumStatus(false)\n                    setObjValues ({...objValues,  uniqueId: e.target.value});\n                    setHospitalNumStatus2(true)\n                }else{\n                    setHospitalNumStatus(false)\n                    setHospitalNumStatus2(true)\n                }\n            }\n            getCharacters();\n            }  \n             \n    } \n    //Function to show relatives \n    const handleAddRelative = () => {\n        setShowRelative(true);\n    };\n    //Function to cancel the relatives form\n    const handleCancelSaveRelationship = () => {\n        setShowRelative(false);\n    }\n    const handleCancel =()=>{\n        history.push({ pathname: '/' });\n    }\n    /*****  Validation  Relationship Input*/\n    const validateRelatives = () => {\n        let temp = { ...errors }\n            temp.firstName = relatives.firstName ? \"\" : \"First Name is required\"\n            temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\"\n            temp.relationshipId = relatives.relationshipId ? \"\" : \"Relationship Type is required.\"  \n                setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n    //Function to add relatives \n    const handleSaveRelationship = (e) => {\n        if(validateRelatives()){\n            setContacts([...contacts, relatives])\n        }\n\n    }\n    const handleDeleteRelative = (index) => {\n        contacts.splice(index, 1);\n        setContacts([...contacts]);\n    };\n    const handleEditRelative = (relative, index) => {\n        setRelatives(relative)\n        setShowRelative(true);\n        contacts.splice(index, 1); \n    };     \n    const getRelationship = (relationshipId) => {\n        const relationship = relationshipOptions.find(obj => obj.id == relationshipId);\n        return relationship ? relationship.display : '';\n    };\n    const handleInputChangeRelatives = e => {        \n        setRelatives ({...relatives,  [e.target.name]: e.target.value});               \n    }\n    /*****  Validation  */\n    const validate = () => {\n        let temp = { ...errors }\n            temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\"\n            temp.hospitalNumber = basicInfo.hospitalNumber ? \"\" : \"Hospital Number  is required.\"\n            //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\n            //temp.landmark = basicInfo.landmark ? \"\" : \"This field is required.\"\n            temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\"\n            temp.sexId = basicInfo.sexId ? \"\" : \"Sex is required.\"\n            temp.dateOfRegistration1 = basicInfo.dateOfRegistration ? \"\" : \"Date of Registration is required.\"\n            temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\"\n            temp.address = basicInfo.address ? \"\" : \"Address is required.\"\n            temp.phoneNumber = basicInfo.phoneNumber ? \"\" : \"Phone Number  is required.\"\n            temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\"    \n            temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\"  \n            temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\" \n            //HIV FORM VALIDATION\n            temp.targetGroupId = objValues.targetGroupId ? \"\" : \"Target group is required.\"\n            temp.dateConfirmedHiv = objValues.dateConfirmedHiv ? \"\" : \"date confirm HIV is required.\"\n            temp.sourceOfReferrerId = objValues.sourceOfReferrerId ? \"\" : \"Source of referrer is required.\"\n            temp.enrollmentSettingId = objValues.enrollmentSettingId ? \"\" : \"Enrollment Setting Number  is required.\"\n            temp.tbStatusId = objValues.tbStatusId ? \"\" : \"TB status is required.\"    \n            temp.statusAtRegistrationId = objValues.statusAtRegistrationId ? \"\" : \"Status at Registration is required.\"  \n            temp.entryPointId = objValues.entryPointId ? \"\" : \"Care Entry Point is required.\" \n            temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"Date of Registration is required.\"  \n            temp.uniqueId = objValues.uniqueId ? \"\" : \"Unique ID is required.\"\n            \n                setErrors({ ...temp })\n        return Object.values(temp).every(x => x == \"\")\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault(); \n        const getSexId=  genders.find((x)=> x.display===basicInfo.sexId)//get patient sex ID by filtering the request\n        basicInfo.sexId=getSexId.id\n         if(validate()){\n            let newConatctsInfo=[]\n            //Manipulate relatives contact  address:\"\",\n            const actualcontacts=contacts && contacts.length>0 && contacts.map((x)=>{\n                \n                const contactInfo = { \n                address: {\n                    line: [\n                        x.address\n                    ],\n                },\n                contactPoint: {\n                    type: \"phone\",\n                    value: x.phone\n                },\n                firstName: x.firstName,\n                fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\n                relationshipId: x.relationshipId,\n                surname: x.lastName,\n                otherName: x.middleName\n            }\n            \n            newConatctsInfo.push(contactInfo)\n            })\n            try {\n                const patientForm = {\n                    active: true,\n                    address: [\n                        {\n                            \"city\": basicInfo.address,\n                            \"countryId\": basicInfo.countryId,\n                            \"district\": basicInfo.district,\n                            \"line\": [\n                                basicInfo.landmark\n                            ],\n                            \"organisationUnitId\": 0,\n                            \"postalCode\": \"\",\n                            \"stateId\": basicInfo.stateId\n                        }\n                    ],\n                    contact: newConatctsInfo,\n                    contactPoint: [],\n                    dateOfBirth: basicInfo.dob,\n                    deceased: false,\n                    deceasedDateTime: null,\n                    firstName: basicInfo.firstName,\n                    genderId: basicInfo.genderId,\n                    sexId:basicInfo.sexId,\n                    identifier: [\n                        {\n                            \"assignerId\": 1,\n                            \"type\": \"HospitalNumber\",\n                            \"value\": basicInfo.hospitalNumber\n                        }\n                    ],\n                    otherName: basicInfo.middleName,\n                    maritalStatusId: basicInfo.maritalStatusId,\n                    surname: basicInfo.lastName,\n                    educationId: basicInfo.educationId,\n                    employmentStatusId: basicInfo.employmentStatusId,\n                    dateOfRegistration: basicInfo.dateOfRegistration,\n                    isDateOfBirthEstimated: basicInfo.dateOfBirth == \"Actual\" ? false : true,\n                    ninNumber: basicInfo.ninNumber\n                };\n                const phone = {\n                    \"type\": \"phone\",\n                    \"value\": basicInfo.phoneNumber\n                };\n                if (basicInfo.email) {\n                    const email = {\n                        \"type\": \"email\",\n                        \"value\": basicInfo.email\n                    }\n                    patientForm.contactPoint.push(email);\n                }\n                if (basicInfo.altPhonenumber) {\n                    const altPhonenumber = {\n                        \"type\": \"altphone\",\n                        \"value\": basicInfo.altPhonenumber\n                    }\n                    patientForm.contactPoint.push(altPhonenumber);\n                }\n                patientForm.contactPoint.push(phone);\n                patientForm.id = patientId;\n                patientDTO.person=patientForm;\n                patientDTO.hivEnrollment=objValues;\n                const response = await axios.put(`${baseUrl}hiv/patient/${patientObj.id}`, patientDTO, { headers: {\"Authorization\" : `Bearer ${token}`} });\n                toast.success(\"Patient Updated successful\");\n                history.push('/');\n            } catch (error) {                \n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage); \n                }\n            }\n        }\n\n    }\n    const alphabetOnly=(value)=>{\n        const result = value.replace(/[^a-z]/gi, '');\n        return result\n    }\n   \n    const CareEntryPoint =()=>{\n            axios\n                .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`,\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    //console.log(response.data);\n                    setCarePoints(response.data);\n                })\n                .catch((error) => {\n                //console.log(error);\n                });            \n    }\n    //Get list of Source of Referral\n    const SourceReferral =()=>{\n            axios\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                //console.log(response.data);\n                setSourceReferral(response.data);\n            })\n            .catch((error) => {\n            //console.log(error);\n            });        \n    }\n    //Get list of HIV STATUS ENROLLMENT\n    const HivStatus =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/HIV_STATUS_ENROL`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setHivStatus(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of HIV STATUS ENROLLMENT\n    const EnrollmentSetting =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/ENROLLMENT_SETTING`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setEnrollSetting(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of HIV STATUS ENROLLMENT\n    const TBStatus =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setTbStatus(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of KP\n    const KP =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setKP(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //Get list of KP\n    const PregnancyStatus =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            //console.log(response.data);\n            setPregnancyStatus(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    const handleInputChange = e => {        \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        if(e.target.name ===\"entryPointId\" ){\n            if(e.target.value===\"21\"){\n                setTransferIn(true)\n            }else{\n                setTransferIn(false)\n            }\n        }\n        if(e.target.name ===\"pregnancyStatusId\" ){\n            console.log(e.target.value)\n            if(e.target.value===\"72\"){\n                setTransferIn(true)\n            }else{\n                setTransferIn(false)\n            }\n        }                  \n    }    \n    \n    const checkPhoneNumber=(e, inputName)=>{\n        const limit = 10;\n            setRelatives({...relatives,  [inputName]: e.slice(0, limit)});     \n    }\n    const checkPhoneNumberBasic=(e, inputName)=>{\n        const limit = 10;\n\n            setBasicInfo({...basicInfo,  [inputName]: e.slice(0, limit)});     \n    } \n    //Handle CheckBox \n    const handleCheckBox =e =>{\n        if(e.target.checked){\n            setOvcEnrolled(true)\n        }else{\n            setOvcEnrolled(false)\n        }\n    }\n\n\n    return (\n        <>\n            <ToastContainer autoClose={3000} hideProgressBar />\n            <Card className={classes.cardBottom}>\n                <CardContent>\n                <Link\n                    to={{\n                        pathname: \"/patient-history\",\n                        state: { patientObj: patientObj  }\n                    }}\n                >\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\" float-end ms-1\"\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\n                            startIcon={<TiArrowBack />}\n                        >\n                            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\n                        </Button>\n                    </Link>\n                    <br />\n                    <br />\n                    <div className=\"col-xl-12 col-lg-12\">\n                        <Form >\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Edit User Information</h5>\n                                </div>\n\n                                <div className=\"card-body\">\n                                    <div className=\"basic-form\">\n                                        <div className=\"row\">\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"dateOfRegistration\">Date of Registration* </Label>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"date\"\n                                                        onKeyDown={(e)=>e.preventDefault()}\n                                                        name=\"dateOfRegistration\"\n                                                        id=\"dateOfRegistration\"\n                                                        value={basicInfo.dateOfRegistration}\n                                                        onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                   {errors.dateOfRegistration1 !==\"\" ? (\n                                                    <span className={classes.error}>{errors.dateOfRegistration1}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </div>\n                                            \n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"patientId\">Hospital Number* </Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"hospitalNumber\"\n                                                        id=\"hospitalNumber\"\n                                                        value={basicInfo.hospitalNumber}\n                                                        onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\n                                                        disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                   {errors.hospitalNumber !==\"\" ? (\n                                                    <span className={classes.error}>{errors.hospitalNumber}</span>\n                                                    ) : \"\" }\n                                                    {errors.hospitalNumber !==\"\" ? (\n                                                    <span className={classes.error}>{errors.hospitalNumber}</span>\n                                                    ) : \"\" }\n                                                    {hospitalNumStatus===true ? (\n                                                        <span className={classes.error}>{\"Hospital number already exist\"}</span>\n                                                    ) : \"\" }\n                                                    {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"}\n                                                </FormGroup>\n                                            </div>\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"patientId\">EMR Number* </Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"emrNumber\"\n                                                        id=\"emrNumber\"\n                                                        disabled='true'\n                                                        value={Math.floor(Math.random() * 1094328)}\n                                                        //onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\n                                                    />\n                                                   \n                                                </FormGroup>\n                                            \n                                        </div>\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"firstName\">First Names *</Label>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"firstName\"\n                                                        id=\"firstName\"\n                                                        value={basicInfo.firstName}\n                                                        onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                    {errors.firstName !==\"\" ? (\n                                                    <span className={classes.error}>{errors.firstName}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </div>\n\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label>Middle Name</Label>\n                                                    <Input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"middleName\"\n                                                        id=\"middleName\"\n                                                        value={basicInfo.middleName}\n                                                        onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                </FormGroup>\n                                            </div>\n\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label>Last Name *</Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"lastName\"\n                                                        id=\"lastName\"\n                                                        value={basicInfo.lastName}\n                                                        onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                   {errors.lastName !==\"\" ? (\n                                                    <span className={classes.error}>{errors.lastName}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row\">\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label>Sex *</Label>\n                                                    <select\n                                                            className=\"form-control\"\n                                                            name=\"sexId\"\n                                                            id=\"sexId\"\n                                                            onChange={handleInputChangeBasic}\n                                                            value={basicInfo.sexId}\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                            \n                                                        >\n                                                            <option value={\"\"}>Select</option>\n                                                            {genders.map((gender, index) => (\n                                                            <option key={gender.id} value={gender.display}>{gender.display}</option>\n                                                            ))}\n                                                        </select>\n                                                        {errors.sexId !==\"\" ? (\n                                                    <span className={classes.error}>{errors.sexId}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </div>\n                                            <div className=\"form-group mb-2 col-md-2\">\n                                                <FormGroup>\n                                                    <Label>Date Of Birth</Label>\n                                                    <div className=\"radio\">\n                                                        <label>\n                                                            <input\n                                                                type=\"radio\"\n                                                                value=\"Actual\"\n                                                                name=\"dateOfBirth\"\n                                                                defaultChecked\n                                                                //disabled={locationState.actionType==='update'? false : true}\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                            /> Actual\n                                                        </label>\n                                                    </div>\n                                                    <div className=\"radio\">\n                                                        <label>\n                                                            <input\n                                                                type=\"radio\"\n                                                                value=\"Estimated\"\n                                                                name=\"dateOfBirth\"\n                                                                //disabled={locationState.actionType==='update'? false : true}\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                            /> Estimated\n                                                        </label>\n                                                    </div>\n                                                </FormGroup>\n                                            </div>\n\n                                            <div className=\"form-group mb-3 col-md-3\">\n                                                <FormGroup>\n                                                    <Label>Date</Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"date\"\n                                                        onKeyDown={(e)=>e.preventDefault()}\n                                                        name=\"dob\"\n                                                        id=\"dob\"\n                                                        max={today}\n                                                        value={basicInfo.dob}\n                                                        onChange={handleDobChange}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    />\n                                                   \n                                                </FormGroup>\n                                            </div>\n\n                                            <div className=\"form-group mb-3 col-md-3\">\n                                                <FormGroup>\n                                                    <Label>Age</Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"number\"\n                                                        name=\"age\"\n                                                        id=\"age\"\n                                                        value={basicInfo.age}\n                                                        disabled={ageDisabled}\n                                                        onChange={handleAgeChange}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    />\n                                                </FormGroup>\n                                            </div>\n                                        </div>\n\n                                        <div className={\"row\"}>\n{/*                                            {watchShowAge >=0 &&\n                                            <>*/}\n                                                <div className=\"form-group mb-3 col-md-3\">\n                                                    <FormGroup>\n                                                        <Label>Marital Status</Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"maritalStatusId\"\n                                                            id=\"maritalStatusId\"\n                                                            onChange={handleInputChangeBasic}\n                                                            value={basicInfo.maritalStatusId}\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                        >\n                                                            <option value={\"\"}>Select</option>\n                                                            {maritalStatusOptions.map((maritalStatusOption, index) => (\n                                                                <option key={maritalStatusOption.id} value={maritalStatusOption.id}>{maritalStatusOption.display}</option>\n                                                            ))}\n                                                        </select>\n                                                        \n                                                    </FormGroup>\n                                                </div>\n\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label>Employment Status *</Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"employmentStatusId\"\n                                                            id=\"employmentStatusId\"\n                                                            onChange={handleInputChangeBasic}\n                                                            value={basicInfo.employmentStatusId}\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                        >\n                                                            <option value={\"\"}>Select</option>\n                                                            {occupationOptions.map((occupationOption, index) => (\n                                                                <option key={occupationOption.id} value={occupationOption.id}>{occupationOption.display}</option>\n                                                            ))}\n                                                        </select>\n                                                        {errors.employmentStatusId !==\"\" ? (\n                                                        <span className={classes.error}>{errors.employmentStatusId}</span>\n                                                        ) : \"\" }\n                                                    </FormGroup>\n                                                </div>\n\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label>Education Level *</Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"educationId\"\n                                                        id=\"educationId\"\n                                                        onChange={handleInputChangeBasic}\n                                                        value={basicInfo.educationId}\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                        //disabled={locationState.actionType==='update'? false : true}\n                                                    >\n                                                        <option value={\"\"}>Select</option>\n                                                        {educationOptions.map((educationOption, index) => (\n                                                            <option key={educationOption.id} value={educationOption.id}>{educationOption.display}</option>\n                                                        ))}\n                                                    </select>\n                                                    {errors.educationId !==\"\" ? (\n                                                    <span className={classes.error}>{errors.educationId}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </div>\n                                            <div className=\"form-group mb-3 col-md-4\">\n                                                <FormGroup>\n                                                    <Label for=\"patientId\">National Identity Number (NIN)  </Label>\n                                                    <input\n                                                        className=\"form-control\"\n                                                        type=\"text\"\n                                                        name=\"nin\"\n                                                        id=\"nin\"\n                                                        value={basicInfo.ninNumber}\n                                                        //onChange={handleInputChangeBasic}\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\n                                                    />\n                                                   \n                                                </FormGroup>\n                                            \n                                        </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Contact Details</h5>\n                                </div>\n\n                                <div className=\"card-body\">\n                                    <div className={\"row\"}>\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>Phone Number *</Label>\n                                                <PhoneInput\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\n                                                    country={'ng'}\n                                                    placeholder=\"(234)7099999999\"\n                                                    maxLength={5}\n                                                    name=\"phoneNumber\"\n                                                    id=\"phoneNumber\"\n                                                    value={basicInfo.phoneNumber}\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'phoneNumber')}}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                    \n                                                />\n                                                {errors.phoneNumber !==\"\" ? (\n                                                    <span className={classes.error}>{errors.phoneNumber}</span>\n                                                    ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>Alt. Phone Number</Label>\n                                                <PhoneInput\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\n                                                    country={'ng'}\n                                                    placeholder=\"(234)7099999999\"\n                                                    value={basicInfo.altPhonenumber}\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'altPhonenumber')}}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                />\n\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>Email</Label>\n                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"email\"\n                                                    name=\"email\"\n                                                    id=\"email\"\n                                                    onChange={handleInputChangeBasic}\n                                                    value={basicInfo.email}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                />\n                                               \n                                            </FormGroup>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"row\">\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>Country *</Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"countryId\"\n                                                    id=\"countryId\"\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    value={basicInfo.countryId}\n                                                    onChange={getStates}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                    >\n                                                    <option value={\"\"}>Select</option>\n                                                    {countries.map((value, index) => (\n                                                        <option key={index} value={value.id}>\n                                                            {value.name}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {errors.countryId !==\"\" ? (\n                                                    <span className={classes.error}>{errors.countryId}</span>\n                                                    ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>State *</Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"stateId\"\n                                                    id=\"stateId\"\n                                                    value={basicInfo.stateId}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    onChange={getProvinces}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                    >\n                                                    <option value=\"\">Select</option>\n                                                    {states.map((value, index) => (\n                                                        <option key={index} value={value.id}>\n                                                            {value.name}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {errors.stateId !==\"\" ? (\n                                                    <span className={classes.error}>{errors.stateId}</span>\n                                                    ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>Province/District/LGA *</Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"district\"\n                                                    id=\"district\"\n                                                    value={basicInfo.district}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    onChange={handleInputChangeBasic}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                    >\n                                                    <option value=\"\">Select</option>\n                                                    {provinces.map((value, index) => (\n                                                        <option key={index} value={value.id}>\n                                                            {value.name}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                                {errors.district !==\"\" ? (\n                                                    <span className={classes.error}>{errors.district}</span>\n                                                    ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n                                    </div>\n\n                                    <div className={\"row\"}>\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>Street Address*</Label>\n                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"address\"\n                                                    id=\"address\"\n                                                    value={basicInfo.address}\n                                                    onChange={handleInputChangeBasic}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                   \n                                                />\n                                               {errors.address !==\"\" ? (\n                                                    <span className={classes.error}>{errors.address}</span>\n                                                    ) : \"\" }\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>Landmark</Label>\n                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"text\"\n                                                    name=\"landmark\"\n                                                    id=\"landmark\"\n                                                    value={basicInfo.landmark}\n                                                    onChange={handleInputChangeBasic}\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                    //disabled={locationState.actionType==='update'? false : true}\n                                                    \n                                                />\n                                                \n                                            </FormGroup>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Relationship / Next Of Kin</h5>\n                                </div>\n                                <div className=\"card-body\">\n                                    <div className=\"row\">\n                                        {\n                                            contacts && contacts.length > 0 && (\n                                                <div className=\"col-xl-12 col-lg-12\">\n                                                    <table style={{ width: '100%' }} className=\"mb-3\">\n                                                        <thead className=\"mb-3\">\n                                                        <tr>\n                                                            <th>Relationship Type</th>\n                                                            <th>Name</th>\n                                                            <th>Phone</th>\n                                                            <th>Address</th>\n                                                            <th>Actions</th>\n                                                        </tr>\n                                                        </thead>\n                                                        <tbody className=\"mb-3\">\n                                                        {contacts.map((item, index) => {\n                                                            return (\n                                                                <tr key={item.index} className=\"mb-3\">\n                                                                    <td>{ \n                                                                        getRelationship(item.relationshipId) \n                                                                    }</td>\n                                                                    <td>{ \n                                                                        item.firstName + \" \"  + item.middleName + \" \" + item.lastName\n                                                                    }</td>\n                                                                    <td>{ \n                                                                            item.phone\n                                                                        }</td>\n                                                                    <td>{ \n                                                                            item.address\n                                                                    }</td>\n                                                                    <td>\n                                                                        <button type=\"button\"\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\n                                                                                onClick={() => handleEditRelative(item, index)}\n                                                                                >\n                                                                            <FontAwesomeIcon icon=\"edit\" />\n                                                                        </button>\n                                                                        &nbsp;&nbsp;\n                                                                        <button\n                                                                            type=\"button\"\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\n                                                                            onClick={(e) => handleDeleteRelative(index)}\n                                                                            >\n                                                                            <FontAwesomeIcon icon=\"trash\" />\n                                                                        </button>\n                                                                    </td>\n                                                                </tr>\n                                                            );\n                                                        })}\n                                                        </tbody>\n                                                    </table>\n                                                </div>\n                                            )\n                                        }\n                                        <div className=\"col-xl-12 col-lg-12\">\n                                            {\n                                                showRelative && (\n                                                    <div className=\"card\">\n                                                        <div className=\"card-body\">\n                                                            <div className=\"row\">\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label for=\"relationshipType\">Relationship Type *</Label>\n                                                                        <select\n                                                                            className=\"form-control\"\n                                                                            name=\"relationshipId\"\n                                                                            id=\"relationshipId\"\n                                                                            value={relatives.relationshipId}\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                            >\n                                                                            <option value={\"\"}>Select</option>\n                                                                            {relationshipOptions.map((relative, index) => (\n                                                                                <option key={relative.id} value={relative.id}>{relative.display}</option>\n                                                                            ))}\n                                                                        </select>\n                                                                        {errors.relationshipId !==\"\" ? (\n                                                                        <span className={classes.error}>{errors.relationshipId}</span>\n                                                                        ) : \"\" }\n                                                                    </FormGroup>\n                                                                </div>\n\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label for=\"cfirstName\">First Name *</Label>\n                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"firstName\"\n                                                                            value={relatives.firstName}\n                                                                            id=\"firstName\"\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                        />\n                                                                       {errors.firstName !==\"\" ? (\n                                                                        <span className={classes.error}>{errors.firstName}</span>\n                                                                        ) : \"\" }\n                                                                    </FormGroup>\n                                                                </div>\n\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label>Middle Name</Label>\n                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"middleName\"\n                                                                            id=\"middleName\"\n                                                                            value={relatives.middleName}\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                        />\n                                                                        {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\n                                                                    </FormGroup>\n                                                                </div>\n\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label>Last Name *</Label>\n                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"lastName\"\n                                                                            id=\"lastName\"\n                                                                            value={relatives.lastName}\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                        />\n                                                                       {errors.lastName !==\"\" ? (\n                                                                        <span className={classes.error}>{errors.lastName}</span>\n                                                                        ) : \"\" }\n                                                                    </FormGroup>\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row\">\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label for=\"contactPhoneNumber\">Phone Number</Label>\n                                                                        <PhoneInput\n                                                                            containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\n                                                                            inputStyle={{width:'100%',borderRadius:'0px'}}\n                                                                            country={'ng'}\n                                                                            placeholder=\"(234)7099999999\"\n                                                                            name=\"phone\"\n                                                                            value={relatives.phone}\n                                                                            id=\"phone\"\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                            onChange={(e)=>{checkPhoneNumber(e.slice(0, 10),'phone')}}\n                                                                        />\n                                                                    \n                                                                    </FormGroup>\n                                                                </div>\n\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label for=\"contactEmail\">Email</Label>\n                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"email\"\n                                                                            id=\"email\"\n                                                                            value={relatives.email}\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                        />\n                                                                        {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\n                                                                    </FormGroup>\n                                                                </div>\n\n                                                                <div className=\"form-group mb-3 col-md-3\">\n                                                                    <FormGroup>\n                                                                        <Label for=\"contactAddress\">Address</Label>\n                                                                        <input\n                                                                            className=\"form-control\"\n                                                                            type=\"text\"\n                                                                            name=\"address\"\n                                                                            id=\"address\"\n                                                                            value={relatives.address}\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                                                            onChange={handleInputChangeRelatives}\n                                                                            //disabled={locationState.actionType==='update'? false : true}\n                                                                        />\n                                                                        {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\n                                                                    </FormGroup>\n                                                                </div>\n                                                            </div>\n\n                                                            <div className=\"row\">\n                                                                <div className=\"col-1\">\n                                                                    <MatButton\n                                                                        type=\"button\"\n                                                                        variant=\"contained\"\n                                                                        color=\"primary\"\n                                                                        className={classes.button}\n                                                                        onClick={handleSaveRelationship}\n                                                                    >\n                                                                        Add\n                                                                    </MatButton>\n                                                                </div>\n\n                                                                <div className=\"col-1\">\n                                                                    <MatButton\n                                                                        type=\"button\"\n                                                                        variant=\"contained\"\n                                                                        color=\"secondary\"\n                                                                        className={classes.button}\n                                                                        onClick={handleCancelSaveRelationship}\n                                                                    >\n                                                                        Cancel\n                                                                    </MatButton>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                )\n                                            }\n                                        </div>\n                                    </div>\n\n                                    <div className=\"row\"></div>\n                                        <MatButton\n                                            type=\"button\"\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            className={classes.button}\n                                            startIcon={<AddIcon />}\n                                            onClick={handleAddRelative}\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\n                                        >\n                                            Add a Relative/Next Of Kin\n                                        </MatButton>\n                                    {/* </div> */}\n                                </div>\n                            </div>\n                            {/* Adding HIV ENROLLEMENT FORM HERE */}\n                            <div className=\"card\">\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder', borderRadius:\"0.2rem\"}}>\n                                    <h5 className=\"card-title\"  style={{color:'#fff'}}>HIV Enrollment</h5>\n                                </div>\n\n                                <div className=\"card-body\">\n                                <div className=\"row\">\n                                \n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label for=\"uniqueId\">Unique ID No  * </Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"uniqueId\"\n                                        id=\"uniqueId\"\n                                        onChange={handleInputChange}\n                                        value={objValues.uniqueId}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        disabled\n                                        \n                                    />\n                                    {errors.uniqueId !==\"\" ? (\n                                    <span className={classes.error}>{errors.uniqueId}</span>\n                                    ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label for=\"dateOfRegistration\">Date of Enrollment * </Label>\n                                    <Input\n                                        type=\"date\"\n                                        onKeyDown={(e)=>e.preventDefault()}\n                                        name=\"dateOfRegistration\"\n                                        id=\"dateOfRegistration\"\n                                        min={basicInfo.dateOfRegistration}\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                        onChange={handleInputChange}\n                                        value={objValues.dateOfRegistration}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        \n                                    />\n                                    {errors.dateOfRegistration !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\n                                    ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label for=\"entryPointId\">Care Entry Point * </Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"entryPointId\"\n                                    id=\"entryPointId\"\n                                    onChange={handleInputChange}\n                                    value={objValues.entryPointId}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    //disabled={locationState.actionType==='update'? false : true}\n                                    \n                                >\n                                <option value=\"\"> </option>                  \n                                {carePoints.map((value) => (\n                                    <option key={value.id} value={value.id}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                                </Input>\n                                {errors.entryPointId !==\"\" ? (\n                                    <span className={classes.error}>{errors.entryPointId}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                                \n                                </div>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                {transferIn===true ? \n                                    (\n                                        <FormGroup>\n                                        <Label >Facility Name</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"facilityName\"\n                                            id=\"facilityName\"\n                                            onChange={handleInputChange}\n                                            value={objValues.facilityName}  \n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            //disabled={locationState.actionType==='update'? false : true}\n                                        />\n                                        </FormGroup>\n                                    ):\"\"}\n                                </div>\n                                \n                                <div className=\"form-group mb-3 col-md-6\">\n                                <FormGroup>\n                                <Label >HIV Status at Registration *</Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"statusAtRegistrationId\"\n                                    id=\"statusAtRegistrationId\"\n                                    onChange={handleInputChange}\n                                    value={objValues.statusAtRegistrationId}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    //disabled={locationState.actionType==='update'? false : true}\n                                    \n                                >\n                                <option value=\"\"> Select</option>                  \n                                {hivStatus.map((value) => (\n                                    <option key={value.id} value={value.id}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                                </Input>\n                                {errors.statusAtRegistrationId !==\"\" ? (\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                                </div>\n\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label >Date of Confirmed HIV Test *</Label>\n                                    <Input\n                                        type=\"date\"\n                                        onKeyDown={(e)=>e.preventDefault()}\n                                        name=\"dateConfirmedHiv\"\n                                        id=\"dateConfirmedHiv\"\n                                        min={basicInfo.dob}\n                                        max={objValues.dateOfRegistration}\n                                        onChange={handleInputChange}\n                                        value={objValues.dateConfirmedHiv}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        \n                                    /> \n                                    {errors.dateConfirmedHiv !==\"\" ? (\n                                        <span className={classes.error}>{errors.dateConfirmedHiv}</span>\n                                        ) : \"\" } \n                                    </FormGroup>\n                                </div>\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label >Source of Referral *</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"sourceOfReferrerId\"\n                                        id=\"sourceOfReferrerId\"\n                                        value={objValues.sourceOfReferrerId}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        \n                                    >\n                                        <option value=\"\">Select </option>                 \n                                            {sourceReferral.map((value) => (\n                                                <option key={value.id} value={value.id}>\n                                                    {value.display}\n                                                </option>\n                                            ))}\n                                    </Input>\n                                    {errors.sourceOfReferrerId !==\"\" ? (\n                                        <span className={classes.error}>{errors.sourceOfReferrerId}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                \n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label >Enrollment Setting *</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"enrollmentSettingId\"\n                                        id=\"enrollmentSettingId\"\n                                        value={objValues.enrollmentSettingId}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        onChange={handleInputChange}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        >\n                                        <option value=\"\"> Select</option>\n\n                                            {enrollSetting.map((value) => (\n                                                <option key={value.id} value={value.id}>\n                                                    {value.display}\n                                                </option>\n                                            ))}\n                                    </Input>\n                                    {errors.enrollmentSettingId !==\"\" ? (\n                                        <span className={classes.error}>{errors.enrollmentSettingId}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                {(femaleStatus && basicInfo.age > 9) && (\n                                    <>\n                                   \n                                    <div className = \"form-group mb-3 col-md-6\" >\n                                        <FormGroup>\n                                        <Label> Pregnancy </Label>\n                                        <Input\n                                            type = \"select\"\n                                            name = \"pregnancyStatusId\"\n                                            id = \"pregnancyStatusId\"\n                                            value = {objValues.pregnancyStatusId}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            onChange = {handleInputChange}  \n                                            //disabled={locationState.actionType==='update'? false : true}                                      \n                                        >\n                                        < option value = \"\" >Select </option>\n                                        {pregnancyStatus.map((value) => (\n                                                    <option key={value.id} value={value.id}>\n                                                        {value.display}\n                                                    </option>\n                                                ))}\n                                        </Input>                                                                        \n                                    </FormGroup>  \n                                    </div>\n                                    {objValues.pregnancyStatusId!=='72' && (\n                                    <>\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Date of LMP </Label>                                    \n                                        <Input\n                                            type=\"date\"\n                                            onKeyDown={(e)=>e.preventDefault()}\n                                            name=\"dateOfLpm\"\n                                            id=\"dateOfLpm\"\n                                            max={today}\n                                            onChange={handleInputChange}\n                                            value={objValues.dateOfLpm}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            //disabled={locationState.actionType==='update'? false : true}\n                                        />  \n                                            \n                                        </FormGroup>\n                                    </div>\n                                    </>\n                                    )}\n                                    </>\n                                )}\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label >TB Status * </Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"tbStatusId\"\n                                        id=\"tbStatusId\"\n                                        value={objValues.tbStatusId}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        >\n                                        <option value=\"\"> Select</option>\n                                            {tbStatus.map((value) => (\n                                                <option key={value.id} value={value.id}>\n                                                    {value.display}\n                                                </option>\n                                            ))}\n\n                                    </Input>\n                                    {errors.tbStatusId !==\"\" ? (\n                                        <span className={classes.error}>{errors.tbStatusId}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                {hideTargetGroup===\"false\" ? (\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <FormGroup>\n                                    <Label >Target Group *</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"targetGroupId\"\n                                        id=\"targetGroupId\"\n                                        value={objValues.targetGroupId}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        >\n                                        <option value=\"\"> Select</option>                    \n                                                {kP.map((value) => (\n                                                    <option key={value.id} value={value.id}>\n                                                        {value.display}\n                                                    </option>\n                                                ))}\n                                    </Input>\n                                    {errors.targetGroupId !==\"\" ? (\n                                        <span className={classes.error}>{errors.targetGroupId}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </div>\n                                ) : \"\"}\n                                <div className=\"form-group mb-3 col-md-3\">\n                                    \n                                    <div className=\"form-check custom-checkbox ml-1 \">\n                                        <input\n                                        type=\"checkbox\"\n                                        className=\"form-check-input\"\n                                        name=\"ovc_enrolled\"\n                                        id=\"ovc_enrolled\"                                        \n                                        onChange={handleCheckBox}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                        />\n                                        <label\n                                        className=\"form-check-label\"\n                                        htmlFor=\"basic_checkbox_1\"\n                                        >\n                                        Enrolled into OVC?\n                                        </label>\n                                    </div>\n                                </div>\n                                {basicInfo.age <=14 && (\n                                <div className=\"form-group mb-3 col-md-3\">\n                                    \n                                    <div className=\"form-check custom-checkbox ml-1 \">\n                                        <input\n                                        type=\"checkbox\"\n                                        className=\"form-check-input\"\n                                        name=\"ovc_enrolled\"\n                                        id=\"ovc_enrolled\"                                        \n                                        onChange={handleCheckBox}\n                                        />\n                                        <label\n                                        className=\"form-check-label\"\n                                        htmlFor=\"basic_checkbox_1\"\n                                        >\n                                        Enrolled into OVC?\n                                        </label>\n                                    </div>\n                                </div>\n                                )}\n                                {/* <div className=\"form-group mb-3 col-md-3\">\n                                    {ovcEnrolled===true ? \n                                        (\n                                        <FormGroup>\n                                        <Label >OVC Number</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"ovcNumber\"\n                                            id=\"ovcNumber\"\n                                            required={ovcEnrolled}\n                                            onChange={handleInputChange}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            value={objValues.ovcNumber}\n                                            \n                                        />\n                                        </FormGroup>\n                                        )\n                                        :\n                                        \"\"\n                                    }\n                                </div> */}\n                                \n                                {ovcEnrolled===true && \n                                (\n                                <>        \n                                <div className=\"row\">\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Household Unique Number</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"householdNumber\"\n                                            id=\"householdNumber\"\n                                            required={ovcEnrolled}\n                                            onChange={handleInputChange}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            value={objValues.householdNumber}\n                                            \n                                        />\n                                        </FormGroup>\n                                    </div>\n                                    <div className=\"form-group mb-3 col-md-6\"></div>\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Referred To OVC Partner</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"referredToOVCPartner\"\n                                            id=\"referredToOVCPartner\"\n                                            required={ovcEnrolled}\n                                            onChange={handleInputChange}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            value={objValues.referredToOVCPartner}\n                                            \n                                        />\n                                        </FormGroup>\n                                    </div>\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Date Referred To OVC Partner</Label>\n                                        <Input\n                                            type=\"date\"\n                                            onKeyDown={(e)=>e.preventDefault()}\n                                            name=\"dateReferredToOVCPartner\"\n                                            id=\"dateReferredToOVCPartner\"\n                                            min={basicInfo.dob}\n                                            max={objValues.dateOfRegistration }\n                                            onChange={handleInputChange}\n                                            value={objValues.dateReferredToOVCPartner}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            \n                                        /> \n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\n                                            ) : \"\" }  */}\n                                        </FormGroup>\n                                    </div>\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Referred From OVC Partner</Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"referredFromOVCPartner\"\n                                            id=\"referredFromOVCPartner\"\n                                            required={ovcEnrolled}\n                                            onChange={handleInputChange}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            value={objValues.referredFromOVCPartner}\n                                            \n                                        />\n                                        </FormGroup>\n                                    </div>\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <FormGroup>\n                                        <Label >Date Referred From OVC Partner</Label>\n                                        <Input\n                                            type=\"date\"\n                                            onKeyDown={(e)=>e.preventDefault()}\n                                            name=\"dateReferredFromOVCPartner\"\n                                            id=\"dateReferredFromOVCPartner\"\n                                            min={basicInfo.dob}\n                                            max={objValues.dateOfRegistration }\n                                            onChange={handleInputChange}\n                                            value={objValues.dateReferredFromOVCPartner}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                            \n                                        /> \n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\n                                            ) : \"\" }  */}\n                                        </FormGroup>\n                                    </div>\n                                </div>\n                                </>\n                                )}\n                            \n                            </div>\n                                </div>\n                            </div>\n                            {/* END OF HIV ENROLLEMENT FORM */}\n                            {saving ? <Spinner /> : \"\"}\n\n                            <br />\n\n                            {locationState.actionType ==='update' ?\n                            (\n                                <>\n                                    <MatButton\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.button}\n                                        startIcon={<SaveIcon />}\n                                        onClick={handleSubmit}\n                                        style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\n                                    >\n                                        {!saving ? (\n                                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                                        ) : (\n                                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\n                                        )}\n                                    </MatButton>\n            \n                                    <MatButton\n                                        variant=\"contained\"\n                                        className={classes.button}\n                                        startIcon={<CancelIcon />}\n                                        onClick={handleCancel}\n                                        style={{backgroundColor:'#992E62'}}\n                                    >\n                                        <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\n                                    </MatButton>\n                            </>\n                            ):\"\"}\n                        </Form>\n                    </div>\n                </CardContent>\n            </Card>\n        </>\n    );\n};\n\nexport default UserRegistration","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["145","146","147","148","149","150","151","152"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\n//import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\n//import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n//import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Link } from 'react-router-dom'\nimport ButtonMui from \"@material-ui/core/Button\";\nimport { TiArrowBack } from 'react-icons/ti'\n//import Chip from '@material-ui/core/Chip';\nimport Divider from '@material-ui/core/Divider';\n//import { Button } from 'semantic-ui-react';\nimport { Label, } from \"semantic-ui-react\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Col, Row } from \"reactstrap\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\n//import axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport Typography from '@material-ui/core/Typography';\n// import CaptureBiometric from './CaptureBiometric';\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '20.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  const { classes } = props;\n  //const patientObj = props.patientObj ? props.patientObj : {}\n  //const [patientObj, setpatientObj] = useState(props.patientObj)\n  const patientObj = props?.patientObj;\n  //console.log(\"inn\",props.patientObj)\n\n  // useEffect(() => {\n  //   setpatientObj(props.patientDetail);\n  // }, [props.patientDetail]);\n\n  const calculate_age = dob => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today?.getFullYear() - birthDate?.getFullYear();\n    var m = today?.getMonth() - birthDate?.getMonth();\n    if (m < 0 || (m === 0 && today?.getDate() < birthDate?.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n  const getHospitalNumber = (identifier) => {\n    const identifiers = identifier;\n    const hospitalNumber = identifiers?.identifier?.find?.(obj => obj.type === 'HospitalNumber');\n    return hospitalNumber ? hospitalNumber?.value : '';\n  };\n  const getPhoneNumber = (identifier) => {\n    const identifiers = identifier;\n    const phoneNumber = identifiers?.contactPoint?.find?.(obj => obj?.type === 'phone');\n    return phoneNumber ? phoneNumber?.value : '';\n  };\n  const getAddress = (identifier) => {\n    console.log('identifier: ', identifier)\n    const identifiers = identifier;\n    const address = identifiers?.address?.find?.(obj => obj?.city);\n    const houseAddress = Array.isArray(address?.line) && (address?.line[0] != null) ? address?.line[0] : \"\"\n    const landMark = address && address?.city && address?.city !== null ? address?.city : \"\"\n    return address ? houseAddress + \" \" + landMark : '';\n  };\n\n\n  return (\n    <div className={classes.root}>\n      <ExpansionPanel >\n        <ExpansionPanelSummary >\n          <Row>\n            <Col md={12}>\n              {patientObj && patientObj !== null ? (<>\n                <Row className={\"mt-1\"}>\n                  <Col md={12} className={classes?.root2}>\n                    <b style={{ fontSize: \"25px\", color: 'rgb(153, 46, 98)' }}>\n                      {patientObj?.firstName + \" \" + patientObj?.surname}\n                    </b>\n                    <Link to={\"/\"} >\n                      <ButtonMui\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className=\" float-end ms-2 mr-2 mt-2\"\n                        //startIcon={<FaUserPlus size=\"10\"/>}\n                        startIcon={<TiArrowBack />}\n                        style={{ backgroundColor: \"rgb(153, 46, 98)\", color: '#fff', height: '35px' }}\n\n                      >\n                        <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                      </ButtonMui>\n                    </Link>\n                  </Col>\n                  <Col md={4} className={classes.root2}>\n                    <span>\n                      {\" \"}\n                      Patient ID : <b style={{ color: '#0B72AA' }}>{patientObj?.hospitalNumber}</b>\n                    </span>\n                  </Col>\n\n                  <Col md={4} className={classes.root2}>\n                    <span>\n                      Date Of Birth : <b style={{ color: '#0B72AA' }}>{patientObj?.dateOfBirth}</b>\n                    </span>\n                  </Col>\n                  <Col md={4} className={classes.root2}>\n                    <span>\n                      {\" \"}\n                      Age : <b style={{ color: '#0B72AA' }}>{calculate_age(moment(patientObj?.dateOfBirth).format(\"DD-MM-YYYY\"))}</b>\n                    </span>\n                  </Col>\n                  <Col md={4}>\n                    <span>\n                      {\" \"}\n                      Gender :{\" \"}\n                      <b style={{ color: '#0B72AA' }}>{patientObj?.gender}</b>\n                    </span>\n                  </Col>\n                  <Col md={4} className={classes.root2}>\n                    <span>\n                      {\" \"}\n                      Phone Number : <b style={{ color: '#0B72AA' }}>{patientObj?.phoneNumber}</b>\n                    </span>\n                  </Col>\n                  <Col md={4} className={classes.root2}>\n                    <span>\n                      {\" \"}\n                      Address : <b style={{ color: '#0B72AA' }}>{patientObj?.address} </b>\n                    </span>\n                  </Col>\n                  {patientObj?.prepStatus !== null && (\n                    <Col md={12}>\n                      <div >\n                        <Typography variant=\"caption\">\n                          <Label color={\"teal\"} size={\"mini\"}>\n                            STATUS : {patientObj && patientObj?.prepStatus}\n                          </Label>\n\n                        </Typography>\n                      </div>\n                    </Col>\n                  )}\n                </Row>\n              </>)\n                : (\n                  <>\n                    <p>Loading please wait..</p>\n                  </>\n                )\n              }\n            </Col>\n          </Row>\n        </ExpansionPanelSummary>\n        <Divider />\n      </ExpansionPanel>\n\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["153","154","155","156","157"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst Patients = (props) => {\n  const [patientList, setPatientList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showPPI, setShowPPI] = useState(true);\n  useEffect(() => {\n    patients();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients() {\n    setLoading(true);\n    axios\n      .get(`${baseUrl}prep/persons`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setLoading(false);\n        setPatientList(response.data);\n      })\n      .catch((error) => {\n        setLoading(false);\n      });\n  }\n\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find Patient\"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n          },\n          {\n            title: \"Hospital Number\",\n            field: \"hospital_number\",\n            filtering: false,\n          },\n          { title: \"PrEP Code\", field: \"clientCode\", filtering: false },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          { title: \"PrEP Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        //isLoading={loading}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}prep/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n                resolve({\n                  data: result?.data?.records?.map?.((row) => ({\n                    name: row.firstName + \" \" + row.surname,\n                    hospital_number: row.hospitalNumber,\n                    clientCode: row.uniqueId,\n                    //phone_number:  row.phone,\n                    gender: row && row.gender ? row.gender : \"\",\n                    age: row.age,\n\n                    status: (\n                      <Label color=\"blue\" size=\"mini\">\n                        {row.prepStatus}\n                      </Label>\n                    ),\n\n                    actions: (\n                      <div>\n                        <Link\n                          to={{\n                            pathname: \"/patient-dashboard\",\n                            state: { patientObj: row },\n                          }}\n                        >\n                          <ButtonGroup\n                            variant=\"contained\"\n                            aria-label=\"split button\"\n                            style={{\n                              backgroundColor: \"rgb(153, 46, 98)\",\n                              height: \"30px\",\n                              width: \"215px\",\n                            }}\n                            size=\"large\"\n                          >\n                            <Button\n                              color=\"primary\"\n                              size=\"small\"\n                              aria-label=\"select merge strategy\"\n                              aria-haspopup=\"menu\"\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <MdDashboard />\n                            </Button>\n                            <Button\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\n                            >\n                              <span\n                                style={{\n                                  fontSize: \"12px\",\n                                  color: \"#fff\",\n                                  fontWeight: \"bolder\",\n                                }}\n                              >\n                                Patient Dashboard\n                              </span>\n                            </Button>\n                          </ButtonGroup>\n                        </Link>\n                      </div>\n                    ),\n                  })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: true,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div className=\"p-2\">\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Patients;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["158","159"],"import React, { useState, useEffect } from \"react\";\nimport { Menu, Popup } from \"semantic-ui-react\";\n\n\n\n\nfunction SubMenu(props) {\n\n    const patientObj = props.patientObj \n    useEffect(() => {\n        //Observation();\n    }, [props.patientObj]);\n\n    const loadPrEPDiscontinuationsInterruptions = (row) =>{\n        props.setActiveContent({...props.activeContent, route:'prep-interruptions'})\n    }\n    const loadPrEPRegistrationForm = (row) =>{\n        props.setActiveContent({...props.activeContent, route:'prep-registration'})\n    }\n    const loadPrEPCommencementForm = (row) =>{\n        props.setActiveContent({...props.activeContent, route:'prep-commencement'})\n    }\n    const loadPrEPEligibiltyScreeningForm = (row) =>{\n        props.setActiveContent({...props.activeContent, route:'prep-screening'})\n    }\n\n    const onClickConsultation = (row) =>{        \n        props.setActiveContent({...props.activeContent, route:'consultation'})\n    }\n    const onClickHome = (row) =>{        \n        props.setActiveContent({...props.activeContent, route:'recent-history'})\n    }\n    const loadPatientHistory = ()=>{\n        props.setActiveContent({...props.activeContent, route:'patient-history'})\n    }\n\n    return (\n         <div>\n\n                <Menu size=\"large\" color={\"black\"} inverted >\n                { patientObj.createdBy!==\"ETL\"  ? //The menu will show if the patient is not migrated \n                (<>\n                <Menu.Item onClick={() => onClickHome()} >Home</Menu.Item>\n                                  \n                { patientObj.eligibilityCount<=0 || patientObj.eligibilityCount===null ?\n                (<>\n                    <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} >PrEP Eligibility Screening</Menu.Item>\n                   \n                </>)\n                :\n                (<>\n                {/* check if the patient has done prep commencement */}\n                    {patientObj.prepCount==='0' || patientObj.commencementCount===null ? \n                    (<>\n                        {patientObj.prepCount==='0' && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\n                        {(patientObj.commencementCount===null || patientObj.commencementCount<=0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\n                        \n                    </>) \n                    : (<>\n                       \n                        <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} > PrEP Eligibility Screening </Menu.Item>\n                        {(patientObj.prepCount===null || patientObj.prepCount<0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\n                        {(patientObj.commencementCount===null || patientObj.commencementCount<=0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\n                        {patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => onClickConsultation()} > PrEP Visit</Menu.Item>)}\n                        {patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPDiscontinuationsInterruptions()} >PrEP Discontinuations & Interruptions</Menu.Item>)}\n                    </>)\n                    }\n                    \n                </>)}\n                <Menu.Item onClick={() => loadPatientHistory(patientObj)} >History</Menu.Item>   \n                </>)\n                :\n\n                (<>\n                {/* This menu will show only if the patient is migrated  and check if the patient last HIV test result is not positive*/}\n                <Menu.Item onClick={() => onClickHome()} >Home</Menu.Item>\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && (<Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} >PrEP Eligibility Screening</Menu.Item>)}\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && patientObj.prepCount==='0' && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && (patientObj.commencementCount===null || patientObj.commencementCount<=0) &&(<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) &&(<Menu.Item onClick={() => onClickConsultation()} > PrEP Visit</Menu.Item>)}\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) &&(<Menu.Item onClick={() => loadPrEPDiscontinuationsInterruptions()} >PrEP Discontinuations & Interruptions</Menu.Item>)}\n                <Menu.Item onClick={() => loadPatientHistory(patientObj)} >History</Menu.Item>     \n                </>) }                \n                </Menu>\n                   \n        </div>\n    );\n}\n\n\n\nexport default SubMenu;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\api.js",[],"C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {Modal,ModalHeader, ModalBody,Form,\n    Row,Label,Card,CardBody,Col, FormGroup,CardHeader, Input\n} from \"reactstrap\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"react-select\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport MatButton from \"@material-ui/core/Button\";\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\nimport { Button2, Icon, List } from 'semantic-ui-react'\nimport {ToastContainer, toast} from \"react-toastify\";\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport axios from \"axios\";\nimport {token, url as baseUrl} from \"../../../api\";\n\nimport { green, red } from '@mui/material/colors';\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\n\nimport Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Button from '@mui/material/Button';\nimport Fab from '@mui/material/Fab';\nimport CheckIcon from '@mui/icons-material/Check';\n//import SaveIcon from '@mui/icons-material/Save';\n// import LinearProgress from '@mui/material/LinearProgress';\nimport Typography from '@mui/material/Typography';\n// import CancelIcon from '@mui/icons-material/Cancel';\n// import ModalImage from \"react-modal-image\";\nimport {Link, useHistory} from 'react-router-dom';\nimport moment from \"moment\";\nimport {Dropdown,Badge} from 'react-bootstrap';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport fingerprintimage  from './../../images/fingerprintimage.png';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport UpgradeIcon from '@mui/icons-material/Upgrade';\nimport _ from 'lodash';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        \"& .dropdown-toggle::after, .dropleft .dropdown-toggle::before, .dropright .dropdown-toggle::before, .dropup .dropdown-toggle::after\":{\n            fontFamily:'FontAwesome',\n            border:'0',\n            verticalAlign:'middle',\n            marginLeft:'.25em',\n            lineHeight:'1'\n        },\n        \"& .dropdown-menu .dropdown-item\":{\n            fontSize: '14px',\n            color: '#014d88',\n            padding: '0.3rem 1.5rem',\n            fontWeight:'bold'\n        },\n        \"& .mt-4\":{\n            marginTop:'28px !important'\n        },\n        \"& .form-control\":{\n            color:'#992E62'\n        },\n        \"& .form-control:focus\":{\n            color:'#014d88'\n        },\n        \"& .sharp \":{\n            \"min-width\": \"35px\",\n            padding:\"5px\",\n            height: '35px',\n            \"min-height\": \"35px\"\n}\n    },\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n/*    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 350,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n    input: {\n        display: \"none\",\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"12.8px\",\n    },*/\n}));\n\nlet checkUrl=\"\"\n\nfunction Biometrics(props) {\n    const classes = useStyles();\n    let history = useHistory();\n    const permissions = history.location && history.location.state ? history.location.state.permissions : [];\n    const [biometricDevices,setbiometricDevices] = useState([]);\n    const [objValues, setObjValues]= useState({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"})\n    const [fingerType, setFingerType] = useState([]);\n    const [devices, setDevices] = useState([]);\n    const [loading, setLoading] = React.useState(false);\n    const [pageLoading, setPageLoading] = useState(false);\n    const [showCapture, setshowCapture] = React.useState(false);\n    const [tryAgain, setTryAgain] = React.useState(false);\n    const [success, setSuccess] = React.useState(false);\n    const [errors, setErrors] = useState({});\n    const [storedBiometrics, setStoredBiometrics] = useState([]);\n    // const [responseImage, setResponseImage] = useState(\"\")\n    const [capturedFingered, setCapturedFingered]= useState([]);\n    const [selectedFingers, setSelectedFingers] = useState([]);\n\n    const buttonSx = {\n        ...(success && {\n            bgcolor: green[500],\n            '&:hover': {\n                bgcolor: green[700],\n            },\n        }),\n    };\n\n    const getPersonBiometrics = async() =>{\n        const fingersCodeset = await axios.get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\n\n        axios.get(`${baseUrl}biometrics/person/${props.patientId}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then(async (response)=>{\n            if(response.data.length > 0){\n                setStoredBiometrics(response.data);\n                setPageLoading(true);\n                let personCapturedFingers = _.uniq(_.map(response.data,'templateType'))\n                setSelectedFingers(personCapturedFingers);\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\n                    return _.extend({}, item, {captured: personCapturedFingers.includes(item.display)});\n\n                });\n                setFingerType(biometricItems);\n            }else{\n                let biometricItems =  _.map(fingersCodeset.data, (item)=>{\n                    return _.extend({}, item, {captured: false});\n                    //return item.captured = personCapturedFingers.includes(item.display)\n                });\n                setFingerType(biometricItems);\n\n            }\n\n        }).catch(async (error)=>{\n            console.log(\"getPersonBiometrics error\")\n            console.log(error)\n\n            let biometricItems =  _.map(fingersCodeset.data, (item)=>{\n                return _.extend({}, item, {captured: false});\n            });\n            setFingerType(biometricItems);\n            setPageLoading(true);\n        })\n    }\n\n    const clear_storelist = () =>{\n        axios.post(`${baseUrl}biometrics/store-list/${props.patientId}`,props.patientId,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\n            console.log('cleared store')\n        }).catch((error)=>{\n            console.log(\"cleared store error\")\n            console.log(error)\n\n        })\n    }\n\n\n    useEffect(() => {\n        clear_storelist();\n        getPersonBiometrics();\n        TemplateType();\n        //biometricFingers();\n    }, []);\n    //Get list of KP\n    const TemplateType =()=>{\n        axios\n            .get(`${baseUrl}modules/check?moduleName=biometric`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                if(response.data===true){\n                    axios\n                        .get(`${baseUrl}biometrics/devices`,\n                            { headers: {\"Authorization\" : `Bearer ${token}`} }\n                        )\n                        .then((response) => {\n                            setDevices(response.data);\n                            setbiometricDevices(response.data);\n\n                        })\n                        .catch((error) => {\n                            console.log(error)\n                        });\n\n                }\n            })\n            .catch((error) => {\n                //console.log(error);\n            });\n\n    }\n\n    //Get list of Finger index\n    const biometricFingers =()=>{\n        axios\n            .get(`${baseUrl}application-codesets/v2/BIOMETRIC_CAPTURE_FINGERS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setFingerType(response.data);\n            })\n            .catch((error) => {\n            });\n\n    }\n    //check if device is plugged or not\n    const checkDevice = e =>{\n        const deviceName =e.target.value;\n        const selectedDevice=biometricDevices.find((x)=> x.name ===deviceName )\n        checkUrl= selectedDevice.url===null? baseUrl : selectedDevice.url\n        setObjValues({...objValues, device:deviceName})\n        axios\n            .get(`${checkUrl}biometrics/secugen/boot?reader=${deviceName}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                if(response.data.errorType ===\"ERROR\"){\n                    toast.error(response.data.errorName + \" is not plug\");\n                    //setshowCapture(true)\n                }else{\n                    setshowCapture(true)\n                }\n            })\n            .catch((error) => {\n            });\n    }\n    // handle the input changes\n\n    const handleInputChange = e => {\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\n    }\n    //form validation\n    const validate = () => {\n        let temp = { ...errors }\n        temp.templateType = objValues.templateType ? \"\" : \"This field is required\"\n        temp.device = objValues.device ? \"\" : \"This field is required\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x === \"\")\n    }\n    //to capture  selected index finger\n    const captureFinger = (e) => {\n        e.preventDefault();\n        if(validate()){\n            axios.post(`${checkUrl}biometrics/secugen/enrollment?reader=SG_DEV_AUTO`,objValues,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n            )\n                .then(response => {\n                    setLoading(true);\n                    if(response.data.type ===\"ERROR\"){\n                        setLoading(false);\n                        setTryAgain(true);\n                        window.setTimeout(() => {\n                            setTryAgain(false);\n                        }, 5000);\n                        toast.error(response.data.message.ERROR);\n                    }else{\n                        const templateType= response.data.templateType\n                        setTryAgain(false);\n                        setSuccess(true)\n                        window.setTimeout(() => {\n                            setSuccess(false)\n                            setLoading(false);\n                        }, 5000);\n                        let biometricsEnrollments = response.data\n                        biometricsEnrollments.capturedBiometricsList = _.uniqBy(biometricsEnrollments.capturedBiometricsList,\"templateType\");\n\n                        setCapturedFingered([...capturedFingered, biometricsEnrollments])\n                        //fingerType.splice(templateType, 1);\n                        _.find(fingerType,{'display':templateType}).captured = true;\n                        setFingerType([...fingerType]);\n                        //setObjValues({biometricType: \"FINGERPRINT\", patientId:props.patientId, templateType:\"\", device:\"\"});\n                        setObjValues({...objValues, templateType:\"\"});\n                    }\n                    //toast.success(\"Record save successful\");\n                })\n                .catch(error => {\n                });\n        }\n    }\n\n    const deleteBiometric =(id,finger)=>{\n        axios.delete(`${baseUrl}biometrics/${id}`,{ headers: {\"Authorization\" : `Bearer ${token}`}}).then((response)=>{\n            toast.success(`${finger} deleted successfully`);\n            _.find(fingerType,{'display':finger}).captured = false;\n            setFingerType([...fingerType]);\n            let newStoredBiometrics = _.reject(storedBiometrics, {\"templateType\":finger});\n            setStoredBiometrics(newStoredBiometrics);\n            clear_storelist();\n            if(newStoredBiometrics.length === 0){\n                props.updatePatientBiometricStatus(false);\n            }\n        }).catch((error)=>{\n            toast.error(\"Something went wrong\");\n            console.log(error)\n\n        })\n    }\n\n    //Save Biometric capture\n    const saveBiometrics = (e) => {\n        e.preventDefault();\n        if(capturedFingered.length >= 1){\n            const capturedObj= capturedFingered[capturedFingered.length - 1];\n            capturedObj.capturedBiometricsList =_.uniqBy(capturedObj.capturedBiometricsList,\"templateType\")\n            axios.post(`${baseUrl}biometrics/templates`,capturedObj,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n            )\n                .then(response => {\n                    toast.success(\"Biometric save successful\");\n                    setCapturedFingered([])\n                    getPersonBiometrics();\n                    props.patientObj.biometricStatus=true\n                    props.setActiveContent({...props.activeContent, route:'recent-history'})\n                    //props.updatePatientBiometricStatus(true);\n                })\n                .catch(error => {\n                    toast.error(\"Something went wrong saving biometrics\");\n                    console.log(error);\n                });\n        }else{\n\n            toast.error(\"You can't save less than 2 finger\");\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n\n\n            <div style={{display:\"flex\",width:'100%'}}>\n                <div className=\"\" style={{padding:'5px', flex:\"7\",boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px',minHeight:'400px'}}>\n                    {pageLoading && storedBiometrics.length > 0 ? (\n                            <div style={{display:\"flex\",width:'100%',flexWrap:'wrap'}}>\n                                {storedBiometrics.map((biometric, index)=>(\n                                    <div   key={index} style={{minHeight:'120px',padding:'5px', width:'20%'}}>\n                                        <div  className=\"card \" style={{borderRadius:\"6px\"}}>\n\n                                            <div className=\"card-header align-items-start\" style={{backgroundColor:'#fff'}}>\n                                                <div>\n                                                    <h6 className=\"fs-18 font-w500 mb-3 user-name\"><Link to={\"#\"} style={{color:'#014d88',fontSize:'14px',fontFamily:`\"poppins\",sans-serif`}}>{biometric.templateType}</Link></h6>\n                                                    <div className=\"fs-9 text-nowrap\" style={{fontSize:'10px',color:'#992E62', fontWeight:'bold',fontFamily:`\"poppins\",sans-serif`}}><i className=\"fa fa-calendar-o me-3\" aria-hidden=\"true\"></i>{moment(biometric.lastModifiedDate).format(\"YYYY-MM-DD HH:mm\")}</div>\n                                                </div>\n\n                                                {/*Action button -- Dropdown menu*/}\n                                                <Dropdown className=\"dropdown ms-auto\"  >\n                                                    <Dropdown.Toggle\n                                                        as=\"button\"\n                                                        variant=\"\"\n                                                        drop=\"up\"\n                                                        className=\"btn sharp btn-primary \"\n                                                        id=\"tp-btn\"\n                                                        style={{ backgroundColor: '#014d88', borderColor:'#014d88', borderRadius:'5px',marginRight:'-18px',marginTop:'-10px'}}\n                                                    >\n                                                        <svg\n                                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                                                            width=\"18px\"\n                                                            height=\"18px\"\n                                                            viewBox=\"0 0 24 24\"\n                                                            version=\"1.1\"\n                                                        >\n                                                            <g\n                                                                stroke=\"none\"\n                                                                strokeWidth=\"1\"\n                                                                fill=\"none\"\n                                                                fillRule=\"evenodd\"\n                                                            >\n                                                                <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"5\" r=\"2\" />\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"12\" r=\"2\" />\n                                                                <circle fill=\"#ffffff\" cx=\"12\" cy=\"19\" r=\"2\" />\n                                                            </g>\n                                                        </svg>\n                                                    </Dropdown.Toggle>\n                                                    <Dropdown.Menu alignRight={true} className=\"dropdown-menu-right\">\n                                                        <Dropdown.Item style={{color:'red'}} onClick={()=>deleteBiometric(biometric.id,biometric.templateType)}>\n                                                            <DeleteIcon /> Delete\n                                                        </Dropdown.Item>\n\n                                                    </Dropdown.Menu>\n                                                </Dropdown>\n\n                                            </div>\n                                            <div className=\"card-body p-0 pb-2\">\n                                                <ul className=\"list-group list-group-flush\">\n                                                    <li className=\"list-group-item\" style={{height:'100px', display:'flex',justifyContent:'center'}}>\n                                                        <img src={fingerprintimage}  alt=\"\" style={{height:'80px'}} />\n                                                    </li>\n\n                                                    <li className=\"list-group-item\">\n\n                                                        <Badge variant=\"info badge-xs light\" className=\"card-link float-end\">Version {/*{contact.version}*/}</Badge>\n                                                        <span className=\"mb-0 title\">Status {biometric.iso}</span> :\n                                                        <span className=\"text-black desc-text ms-2\">\n                                                        <Badge variant={biometric.iso===true? \"primary badge-xs\": \"danger badge-xs\"}><i className=\"fa fa-check-square me-2 scale4\" aria-hidden=\"true\"></i> </Badge>\n                                                    </span>\n                                                    </li>\n\n                                                </ul>\n                                            </div>\n\n                                        </div>\n                                    </div>\n\n                                ))}\n                            </div>\n                        )\n                        :\n                        <>\n                            <div className=\"flex-grow-8\">\n                                <div  className=\"flex-grow-8\"  >\n                                    <Alert severity=\"info\">\n                                        <AlertTitle style={{height:'400px'}}>\n                                            <strong>No biometrics captured</strong>\n                                        </AlertTitle>\n                                    </Alert>\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n\n                    <div style={{flex:\"3\",padding:'5px',marginLeft:'5px',border:'1px solid rgba(99, 99, 99, 0.2)',boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'}}>\n                        <div className=\"col-12\">\n                            <ToastContainer />\n                            <Col md={12}>\n                                <FormGroup>\n                                    <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Device </Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"device\"\n                                        id=\"device\"\n                                        onChange={checkDevice}\n                                        value={objValues.device}\n                                        required\n                                    >\n                                        <option value=\"\">Select Device </option>\n                                        {biometricDevices.map(({ id, name }) => (\n                                            <option key={id} value={name}>\n                                                {name}\n                                            </option>\n                                        ))}\n\n                                    </Input>\n                                    {errors.device !==\"\" ? (\n                                        <span className={classes.error}>{errors.device}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </Col>\n                            {showCapture ? (\n                                    <div className=\"row col-12\">\n                                        <Col md={6}>\n                                            <FormGroup>\n                                                <Label for='device' style={{color:'#014d88',fontWeight:'bold',fontSize:'14px' }}>Select Finger</Label>\n                                                <Input\n                                                    type=\"select\"\n                                                    name=\"templateType\"\n                                                    id=\"templateType\"\n                                                    onChange={handleInputChange}\n                                                    value={objValues.templateType}\n                                                    required\n                                                >\n                                                    <option value=\"\">Select Finger </option>\n\n                                                    {_.filter(fingerType, ['captured', false]).map((value) => (\n                                                        <option key={value.id} value={value.display}>\n                                                            {value.display}\n                                                        </option>\n                                                    ))}\n                                                </Input>\n                                                {errors.templateType !==\"\" ? (\n                                                    <span className={classes.error}>{errors.templateType}</span>\n                                                ) : \"\" }\n                                            </FormGroup>\n                                        </Col>\n\n\n                                        <Col md={6}>\n\n                                            <MatButton\n                                                type='button'\n                                                variant='contained'\n                                                color='primary'\n                                                onClick={captureFinger}\n                                                className={'mt-4'}\n                                                style={{backgroundColor:'#992E62'}}\n                                                startIcon={<FingerprintIcon />}\n                                            >\n                                                Capture Finger\n                                            </MatButton>\n\n                                        </Col>\n                                        <br/>\n\n                                    </div>\n                                )\n                                :\n                                \"\"\n                            }\n\n                            <Row>\n                                {capturedFingered.length >=1 ? (\n                                        <>\n                                            <Col md={12} style={{marginTop:\"10px\", paddingBottom:'20px'}}>\n                                                <List celled horizontal>\n                                                    {capturedFingered.map((x) => (\n                                                        <List.Item style={{width:'200px',height:'200px',border:'1px dotted #014d88',margin:'5px'}}>\n                                                            <List.Header style={{ paddingLeft:\"0px\", height:'0.5rem',display:'flex', justifyContent:'right',alignItems: 'right'}}><Icon name='cancel'  color='red' /> </List.Header>\n                                                            <List.Content style={{width:'200px',height:'160px',display:'flex', justifyContent:'center',alignItems: 'center'}}> <FingerprintIcon style={{color:\"#992E62\", fontSize: 150}}/></List.Content>\n                                                            <List.Content style={{width:'200px',height:'30px',display:'flex', justifyContent:'center',alignItems: 'center', fontSize: '18px',color:'#014d88',fontWeight:'bold', fontFamily:'\"poppins\", sans-serif'}}>{x.templateType}</List.Content>\n                                                        </List.Item>\n                                                    ))}\n\n                                                </List>\n\n                                            </Col>\n                                            <br/><br/><br/><br/><br/><br/>\n                                            <Col md={12} >\n                                                <MatButton\n                                                    type='button'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    onClick={saveBiometrics}\n                                                    // className={classes.button}\n                                                    startIcon={<SaveIcon/>}\n                                                >\n                                                    Save Capture\n                                                </MatButton>\n                                            </Col>\n                                        </>\n                                    )\n                                    :\n                                    \"\"\n                                }\n                            </Row>\n                        </div>\n                    </div>\n\n                   \n            </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{/*\n            <Form >\n\n                    <Card>\n                         <CardHeader>\n                                    Capture Biometrics\n                                </CardHeader>\n                        <CardBody>\n                            <Row form>\n                                <ToastContainer />\n                                <Col md={4}>\n                                    <FormGroup>\n                                        <Label for='device'>Select Device </Label>\n                                        <Input\n                                            type=\"select\"\n                                            name=\"device\"\n                                            id=\"device\"\n                                            onChange={checkDevice}\n                                            value={objValues.device}\n                                            required\n                                        >\n                                            <option value=\"\">Select Device </option>\n                                            {biometricDevices.map(({ id, name }) => (\n                                                <option key={id} value={name}>\n                                                    {name}\n                                                </option>\n                                            ))}\n\n                                        </Input>\n                                        {errors.device !==\"\" ? (\n                                            <span className={classes.error}>{errors.device}</span>\n                                        ) : \"\" }\n                                    </FormGroup>\n                                </Col>\n                                {showCapture ? (\n                                        <>\n                                            <Col md={4}>\n                                                <FormGroup>\n                                                    <Label for='device'>Select Finger</Label>\n                                                    <Input\n                                                        type=\"select\"\n                                                        name=\"templateType\"\n                                                        id=\"templateType\"\n                                                        onChange={handleInputChange}\n                                                        value={objValues.templateType}\n                                                        required\n                                                    >\n                                                        <option value=\"\">Select Finger </option>\n\n                                                        {fingerType.map((value) => (\n                                                            <option key={value.id} value={value.display}>\n                                                                {value.display}\n                                                            </option>\n                                                        ))}\n                                                    </Input>\n                                                    {errors.templateType !==\"\" ? (\n                                                        <span className={classes.error}>{errors.templateType}</span>\n                                                    ) : \"\" }\n                                                </FormGroup>\n                                            </Col>\n\n\n                                            <Col md={4}>\n\n                                                <MatButton\n                                                    type='button'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    onClick={captureFinger}\n                                                    className={'mt-4'}\n                                                    startIcon={<FingerprintIcon />}\n                                                >\n                                                    Capture Finger\n                                                </MatButton>\n\n                                            </Col>\n                                            <br/>\n\n                                        </>\n                                    )\n                                    :\n                                    \"\"\n                                }\n                                 <img width='500' height='200' src={responseImage}/>\n                                <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n\n                                    {loading && (\n                                        <>\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                <Box sx={{ m: 1, position: 'relative' }}>\n                                                    <Fab\n                                                        aria-label=\"save\"\n                                                        color=\"secondary\"\n                                                        sx={buttonSx}\n\n                                                    >\n                                                        {success ? <CheckIcon /> : <FingerprintIcon />}\n                                                    </Fab>\n                                                    {loading && (\n                                                        <CircularProgress\n                                                            size={68}\n                                                            sx={{\n                                                                color: green[500],\n                                                                position: 'absolute',\n                                                                top: -6,\n                                                                left: -6,\n                                                                zIndex: 1,\n                                                            }}\n                                                        />\n                                                    )}\n                                                </Box>\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                    {success ?` your  ${objValues.templateType} Finger captured.` : `Please place your  ${objValues.templateType} Finger on scanner.`}\n                                                </Typography>\n                                            </Box>\n                                        </>\n                                    )\n                                    }\n                                    {tryAgain && (\n                                        <>\n\n\n                                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                                <Box sx={{ m: 1, position: 'relative' }}>\n                                                    <Fab\n                                                        aria-label=\"save\"\n                                                        color=\"secondary\"\n                                                        sx={buttonSx}\n\n                                                    >\n                                                        <FingerprintIcon />\n                                                    </Fab>\n                                                    {tryAgain && (\n                                                        <CircularProgress\n                                                            size={68}\n                                                            sx={{\n                                                                color: red[500],\n                                                                position: 'absolute',\n                                                                top: -6,\n                                                                left: -6,\n                                                                zIndex: 1,\n                                                            }}\n                                                        />\n                                                    )}\n                                                </Box>\n                                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                                    Click to Recapture Again\n                                                </Typography>\n                                            </Box>\n                                        </>\n                                    )\n                                    }\n\n                                </Col>\n\n\n                            </Row>\n\n                            <Row>\n                                {capturedFingered.length >=1 ? (\n                                        <>\n                                            <Col md={12} >\n                                                <h3>Captured Fingerprints</h3>\n                                            </Col>\n                                            <Col md={12} style={{marginTop:\"20px\"}}>\n                                                <List celled horizontal>\n                                                    {capturedFingered.map((x) => (\n                                                        <List.Item style={{width:'200px',height:'200px',display:'flex', justifyContent:'center',alignItems: 'center'}}>\n                                                             <List.Header><Icon name='cancel'  color='red' /> </List.Header>\n                                                            <List.Content> <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}}/>{x.templateType}</List.Content>\n                                                        </List.Item>\n                                                    ))}\n\n                                                </List>\n\n                                            </Col>\n                                             <Col md={6} style={{marginTop:\"20px\"}}>\n                                        <List celled horizontal>\n                                            {[1,2,3].map((x) => (\n                                                <List.Item>\n                                                    <List.Header><Icon name='checkmark' color='green'/> </List.Header>\n                                                    <List.Content > <FingerprintIcon style={{color:\"#2E7D32\", fontSize: 40}} /> Finger Type</List.Content>\n                                                </List.Item>\n                                            ))}\n\n                                        </List>\n\n                                    </Col>\n                                            <br/><br/><br/><br/><br/><br/>\n                                            <Col md={12} >\n                                                <MatButton\n                                                    type='button'\n                                                    variant='contained'\n                                                    color='primary'\n                                                    onClick={saveBiometrics}\n                                                    // className={classes.button}\n                                                    startIcon={<SaveIcon/>}\n                                                >\n                                                    Save Capture\n                                                </MatButton>\n                                            </Col>\n                                        </>\n                                    )\n                                    :\n                                    \"\"\n                                }\n                            </Row>\n                        </CardBody>\n                    </Card>\n            </Form>\n*/}\n\n        </div>\n    );\n}\n\nexport default Biometrics;","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["191","192","193","194"],"import React, { Fragment, useState, useEffect } from \"react\";\r\n// BS\r\nimport { Dropdown, } from \"react-bootstrap\";\r\n/// Scroll\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n//import { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { Alert } from \"react-bootstrap\";\r\nimport { Card, Accordion } from \"react-bootstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nconst RecentHistory = (props) => {\r\n  //console.log(props.patientObj)\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [summary, setSummary] = useState(null)\r\n  const [saving, setSaving] = useState(false)\r\n  const [open, setOpen] = React.useState(false)\r\n  const [record, setRecord] = useState(null)\r\n  const toggle = () => setOpen(!open);\r\n  const [\r\n    activeAccordionHeaderShadow,\r\n    setActiveAccordionHeaderShadow,\r\n  ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    Summary()\r\n    RecentActivities();\r\n  }, [props.patientObj.personId]);\r\n\r\n  const RecentActivities = () => {\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setRecentActivities(response.data)\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n  const Summary = () => {\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/person/${props.patientObj.personId}?full=true`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        console.log('sumry: ', response.data[0])\r\n        setSummary(response.data[0])\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  function countPrepEligibility(data) {\r\n    let count = 0;\r\n    let relevantActivities = ['Prep Commencement', 'Prep Clinic']\r\n    data.forEach(entry => {\r\n      entry?.activities?.forEach(activity => {\r\n        if (relevantActivities.includes(activity?.name)) {\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  const ActivityName = (name) => {\r\n    if (name === 'HIV Enrollment') {\r\n      return \"HE\"\r\n    } else if (name === 'Prep Clinic') {\r\n      return \"PC\"\r\n    } else if (name === 'Prep Enrollment') {\r\n      return \"PE\"\r\n    } else if (name === 'Prep Eligibility') {\r\n      return \"PE\"\r\n    } else if (name === 'ART Commencement') {\r\n      return \"AC\"\r\n    } else {\r\n      return \"RA\"\r\n    }\r\n  }\r\n\r\n  const LoadViewPage = (row, action) => {\r\n\r\n    if (row.path === 'prep-eligibility') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-screening', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-enrollment') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-registration', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-clinic') {//prep-commencement \r\n      props.setActiveContent({ ...props.activeContent, route: 'consultation', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-commencement') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-commencement', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-interruption') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-interruptions', id: row.id, actionType: action })\r\n\r\n    } else {\r\n\r\n    }\r\n\r\n  }\r\n  const LoadModal = (row) => {\r\n    toggle()\r\n    setRecord(row)\r\n  }\r\n  const LoadDeletePage = (row) => {\r\n    if (row.path === 'prep-eligibility') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-clinic') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-enrollment') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-commencement') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-interruption') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-interruption/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else {\r\n\r\n    }\r\n\r\n  }\r\n  // const redirectLink=()=>{\r\n  //   props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n  // }\r\n  //const index= 1\r\n\r\n  function joinActivities(data) {\r\n    return data.reduce((acc, item) => {\r\n      return acc.concat(item.activities);\r\n    }, []);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\" >\r\n              <h4 className=\"card-title\"> Recent Activities</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <Accordion\r\n                  className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                  defaultActiveKey=\"0\"\r\n                >\r\n                  <>\r\n                    {recentActivities.map((data, i) =>\r\n                      <div className=\"accordion-item\" key={i}>\r\n                        <Accordion.Toggle\r\n                          as={Card.Text}\r\n                          eventKey={`${i}`}\r\n                          className={`accordion-header ${activeAccordionHeaderShadow === 1 ? \"\" : \"collapsed\"\r\n                            } accordion-header-info`}\r\n                          onClick={() =>\r\n                            setActiveAccordionHeaderShadow(\r\n                              activeAccordionHeaderShadow === 1 ? -1 : i\r\n                            )\r\n                          }\r\n                        >\r\n                          <span className=\"accordion-header-icon\"></span>\r\n                          <span className=\"accordion-header-text\">Encounter Date : <span className=\"\">{data.date}</span> </span>\r\n                          <span className=\"accordion-header-indicator\"></span>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse\r\n                          eventKey={`${i}`}\r\n                          className=\"accordion__body\"\r\n                        >\r\n                          <div className=\"accordion-body-text\">\r\n                            <ul className=\"timeline\">\r\n                              {data.activities && data.activities.map((activity, index) => (\r\n\r\n                                <>\r\n                                  <li>\r\n                                    <div className=\"timeline-panel\">\r\n                                      <div className={i % 2 == 0 ? \"media me-2 media-info\" : \"media me-2 media-success\"}>{ActivityName(data.name)}</div>\r\n                                      <div className=\"media-body\">\r\n                                        <h5 className=\"mb-1\">{activity.name}</h5>\r\n                                        <small className=\"d-block\">\r\n                                          {activity.date}\r\n                                        </small>\r\n                                      </div>\r\n                                      <Dropdown className=\"dropdown\">\r\n                                        <Dropdown.Toggle\r\n                                          variant=\" light\"\r\n                                          className=\"i-false p-0 btn-info sharp\"\r\n                                        >\r\n                                          <svg\r\n                                            width=\"18px\"\r\n                                            height=\"18px\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            version=\"1.1\"\r\n                                          >\r\n                                            <g\r\n                                              stroke=\"none\"\r\n                                              strokeWidth=\"1\"\r\n                                              fill=\"none\"\r\n                                              fillRule=\"evenodd\"\r\n                                            >\r\n                                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                                            </g>\r\n                                          </svg>\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() => LoadViewPage(activity, 'view')}\r\n                                          >\r\n                                            View\r\n                                          </Dropdown.Item>\r\n\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() => LoadViewPage(activity, 'update')}\r\n                                          >\r\n                                            Update\r\n                                          </Dropdown.Item>\r\n\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            to=\"/widget-basic\"\r\n                                            onClick={() => LoadModal(activity)}\r\n                                          >\r\n                                            Delete\r\n                                          </Dropdown.Item>\r\n\r\n                                        </Dropdown.Menu>\r\n                                      </Dropdown>\r\n                                    </div>\r\n                                  </li>\r\n                                </>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        </Accordion.Collapse>\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                </Accordion>\r\n\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-8 col-xxl-8 col-lg-8\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0  pb-2\" style={{ backgroundColor: \"#EEEEEE\" }}>\r\n              <h4 className=\"card-title\">Summary </h4>\r\n            </div>\r\n            <div className=\"row\">\r\n              {(<>\r\n                <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                  <div className=\"card-body\">\r\n\r\n                    <div className=\"col-sm-12 col-md-12 col-lg-12\">\r\n                      <div className=\"card overflow-hidden\">\r\n                        <div className=\"social-graph-wrapper widget-facebook\">\r\n                          <span className=\"s-icon\">\r\n                            <span style={{ fontSize: \"16px\" }}>Total Clinic Visit : {countPrepEligibility(recentActivities)}</span>\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-6 border-right\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              <h4 className=\"m-1\">\r\n                                <span className=\"counter\"><b>{summary?.encounterDate}</b></span>\r\n                              </h4>\r\n                              {summary && <p className=\"m-0\"><b>Last Visit </b></p>}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-6\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              <h4 className=\"m-1\">\r\n                                <span className=\"counter\"><b>{summary?.nextAppointment}</b></span>\r\n                              </h4>\r\n                              {summary &&<p className=\"m-0\"><b>Next Visit</b></p>}\r\n                            </div>\r\n                          </div>\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n                      <div className=\"widget-stat card\">\r\n                        <div className=\"card-body p-4\" style={{ backgroundColor: \"#fff\" }}>\r\n                          <h4 className=\"card-title\" style={{ fontSize: \"15px\" }}><b>Current Regimen Given</b></h4>\r\n                          <h4 class=\"text-info \">{summary?.regimen}</h4>\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"card overflow-hidden\">\r\n                      <div className=\"social-graph-wrapper widget-linkedin\">\r\n                        <span className=\"s-icon\">\r\n                          <span style={{ fontSize: \"16px\", }}>BMI : {(summary?.weight / ((summary?.height / 100) * (summary?.height / 100))).toFixed(2)} kg/m<sup>2</sup></span>\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"row\">\r\n\r\n                        <div className=\"col-6 border-right\">\r\n                          <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                            <h4 className=\"m-1\">\r\n                              <span className=\"counter\">{summary?.weight} Kg</span>\r\n                            </h4>\r\n                            <p className=\"m-0\"><b>Weight </b></p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                            <h4 className=\"m-1\">\r\n                              <span className=\"counter\">{summary?.height} cm</span>\r\n                            </h4>\r\n                            <p className=\"m-0\"><b>Height </b></p>\r\n                          </div>\r\n                        </div>\r\n\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered backdrop=\"static\">\r\n        <Modal.Header >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => LoadDeletePage(record)} style={{ backgroundColor: \"red\", color: \"#fff\" }} disabled={saving}>{saving === false ? \"Yes\" : \"Deleting...\"}</Button>\r\n          <Button onClick={toggle} style={{ backgroundColor: \"#014d88\", color: \"#fff\" }} disabled={saving}>No</Button>\r\n\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentHistory;\r\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["195","196","197"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast} from \"react-toastify\";\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport {  Modal } from \"react-bootstrap\";\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\n\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\n\nconst PatientnHistory = (props) => {\n    const [recentActivities, setRecentActivities] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [saving, setSaving] = useState(false)\n    const [open, setOpen] = React.useState(false)\n    const [record, setRecord] = useState(null)\n     const toggle = () => setOpen(!open);\n    useEffect(() => {\n        PatientHistory()\n      }, [props.patientObj.id]);\n        ///GET LIST OF Patients        \n        const PatientHistory =()=>{\n            setLoading(true)\n            axios\n               .get(`${baseUrl}prep/general-activities/patients/${props.patientObj.personId}`,\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\n               )\n               .then((response) => {\n                setLoading(false)                       \n                    setRecentActivities(response.data)\n                })\n\n               .catch((error) => {\n               //console.log(error);\n               });\n           \n          }\n    \n    const LoadViewPage =(row,action)=>{\n        \n        if(row.path==='prep-eligibility'){        \n            props.setActiveContent({...props.activeContent, route:'prep-screening', id:row.id, actionType:action})\n\n        }else if(row.path==='prep-enrollment'){\n            props.setActiveContent({...props.activeContent, route:'prep-registration', id:row.id, actionType:action})\n\n        }else if(row.path==='prep-clinic'){//prep-commencement \n            props.setActiveContent({...props.activeContent, route:'consultation', id:row.id, actionType:action})\n\n        }else if(row.path==='prep-commencement'){\n            props.setActiveContent({...props.activeContent, route:'prep-commencement', id:row.id, actionType:action})\n\n        }else if(row.path==='prep-interruption'){\n            props.setActiveContent({...props.activeContent, route:'prep-interruptions', id:row.id, actionType:action})\n\n        }else{\n\n        }\n        \n    }\n    const LoadModal =(row)=>{\n        toggle()\n        setRecord(row)\n    }\n    const LoadDeletePage =(row)=>{\n        \n        if(row.path==='prep-eligibility'){ \n            setSaving(true)       \n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n            axios\n            .delete(`${baseUrl}prep-eligibility/${row.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSaving(false)\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n            })\n            .catch((error) => {\n                setSaving(false)\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });  \n        }else if(row.path==='prep-clinic'){\n            setSaving(true)\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n            axios\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSaving(false)\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n            })\n            .catch((error) => {\n                setSaving(false)\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });\n\n        }else if(row.path==='prep-enrollment'){\n            setSaving(true)\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n            axios\n            .delete(`${baseUrl}prep-enrollment/${row.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSaving(false)\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n            })\n            .catch((error) => {\n                setSaving(false)\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });\n\n        }else if(row.path==='prep-commencement'){\n            setSaving(true)\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n            axios\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSaving(false)\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n            })\n            .catch((error) => {\n                setSaving(false)\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });\n\n        }else if(row.path==='prep-interruption'){\n            setSaving(true)\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\n            axios\n            .delete(`${baseUrl}prep-interruption/${row.id}`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSaving(false)\n                toast.success(\"Record Deleted Successfully\");\n                PatientHistory()\n                toggle()\n            })\n            .catch((error) => {\n                setSaving(false)\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                  }\n                  else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                  }\n            });\n\n        }else{\n\n        }\n        \n    }\n\n\n  return (\n    <div>\n        \n    <br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Patient History \"\n              columns={[\n                { title: \"Name\", field: \"name\" },\n                {\n                  title: \"Encounter Date\",\n                  field: \"date\",\n                },               \n                // { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              isLoading={loading}\n              data={recentActivities && recentActivities.map((row) => ({\n                   name: row.name,\n                   date: row.date,\n                   actions:\n            \n                    <div>\n                        <Menu.Menu position='right'  >\n                        <Menu.Item >\n                            <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                            <Dropdown item text='Action'>\n\n                            <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                                {row.viewable && ( <Dropdown.Item onClick={()=>LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>)}\n                                {row.editable && ( <Dropdown.Item  onClick={()=>LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>)}\n                                <Dropdown.Item  onClick={()=>LoadModal(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                            </Button>\n                        </Menu.Item>\n                        </Menu.Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              backgroundColor: \"#014d88\",\n                              color: \"#fff\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n        <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered backdrop=\"static\">\n            <Modal.Header >\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n        </Modal.Title>\n        </Modal.Header>\n            <Modal.Body>\n                <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\n                \n            </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\n            \n        </Modal.Footer>\n        </Modal>    \n    </div>\n  );\n}\n    \nexport default PatientnHistory;\n\n\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js",["198","199","200","201","202","203","204","205","206","207","208","209","210","211","212"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl, token } from \"../../../api\";\n// import { useHistory } from \"react-router-dom\";\n// import {  Modal, Button } from \"react-bootstrap\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import { DateTimePicker } from \"react-widgets\";\n// import Moment from \"moment\";\n// import momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport { Spinner } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        flexGrow: 1,\n        //maxWidth: 752,\n        //flexGrow: 1,\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    },  \n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    },\n    \n}));\n\nconst PrEPEligibiltyScreeningForm = (props) => {\n\n    const patientObj = props.patientObj;\n    //let history = useHistory();\n    const classes = useStyles()\n    const [disabledField, setDisabledField] = useState(false);\n    const [objValues, setObjValues] = useState({\n        dateInterruption: \"\",\n        why: \"\",\n        interruptionType: \"\",\n        dateRestartPlacedBackMedication: \"\",\n        personId: patientObj.personId,\n        causeOfDeath: \"\",\n        dateClientDied: \"\",\n        dateClientReferredOut: \"\",\n        facilityReferredTo: \"\",\n        interruptionDate: \"\",\n        interruptionReason: \"\",\n        sourceOfDeathInfo: \"\",\n        dateSeroconverted:\"\",\n        reasonStopped:\"\",\n        reasonStoppedOthers:\"\"\n      });\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [prepStatus, setPrepStatus] = useState([]);\n    const [reasonStooped, setReasonStooped] = useState([]);\n    const [causeOfDeath, setCauseOfDeath] = useState([]);\n    const [patientDto, setPatientDto] = useState();\n    useEffect(() => {         \n        PREP_STATUS();\n        PREP_STATUS_STOPPED_REASON();\n        GetPatientDTOObj();\n        CAUSE_DEATH();\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\n            GetPatientInterruption(props.activeContent.id)\n            setDisabledField(props.activeContent.actionType==='view'? true : false)\n        }\n    }, []);\n    const GetPatientDTOObj =()=>{\n        axios\n           .get(`${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\n           )\n           .then((response) => {\n               setPatientDto(response.data);\n           })\n           .catch((error) => {\n           //console.log(error);\n           });          \n    }\n    const GetPatientInterruption =(id)=>{\n        axios\n           .get(`${baseUrl}prep-interruption/${props.activeContent.id}`,\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\n           )\n           .then((response) => {\n            //    setObjValues(response.data.find((x)=> x.id===id));\n               setObjValues(response.data);\n           })\n           .catch((error) => {\n           //console.log(error);\n           });          \n    }\n    const PREP_STATUS =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/PREP_STATUS`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setPrepStatus(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    const CAUSE_DEATH =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setCauseOfDeath(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    //\n    const PREP_STATUS_STOPPED_REASON =()=>{\n        axios\n        .get(`${baseUrl}application-codesets/v2/PREP_STATUS_STOPPED_REASON`,\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setReasonStooped(response.data);\n        })\n        .catch((error) => {\n        //console.log(error);\n        });    \n    }\n    const handleInputChange = e => { \n        setErrors({...errors, [e.target.name]: \"\"}) \n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_STOPPED'){\n            objValues.reasonStopped=\"\"\n            objValues.reasonStoppedOthers=\"\"\n            setObjValues ({...objValues,  ['reasonStopped']: \"\"});\n            setObjValues ({...objValues,  ['reasonStoppedOthers']: \"\"});\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        } \n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_DEAD'){\n            objValues.causeOfDeath=\"\"\n            objValues.sourceOfDeathInfo=\"\"\n            objValues.dateClientDied=\"\"\n            //objValues.dateClientDied\n            setObjValues ({...objValues,  ['causeOfDeath']: \"\"});\n            setObjValues ({...objValues,  ['sourceOfDeathInfo']: \"\"});\n            setObjValues ({...objValues,  ['dateClientDied']: \"\"});\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        }\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_RESTART'){\n            objValues.dateRestartPlacedBackMedication=\"\"\n            setObjValues ({...objValues,  ['dateRestartPlacedBackMedication']: \"\"});\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        }\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_TRANSFER_OUT'){\n            objValues.dateClientReferredOut=\"\"\n            objValues.facilityReferredTo=\"\"\n            setObjValues ({...objValues,  ['facilityReferredTo']: \"\"});\n            setObjValues ({...objValues,  ['dateClientReferredOut']: \"\"});\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        }\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_SEROCONVERTED'){\n            objValues.linkToArt=\"\"\n            objValues.dateSeroconverted=\"\"\n            setObjValues ({...objValues,  ['dateSeroconverted']: \"\"});\n            setObjValues ({...objValues,  ['linkToArt']: \"\"});\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        }     \n        //     \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\n\n    }\n    const validate = () => {\n        let temp = { ...errors }\n        //temp.interruptionDate = objValues.interruptionDate ? \"\" : \"This field is required\"\n        temp.interruptionType = objValues.interruptionType ? \"\" : \"This field is required\"\n        setErrors({\n            ...temp\n            })    \n        return Object.values(temp).every(x => x == \"\")\n    }\n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n         //console.log(objValues.interruptionDate)\n         //objValues.interruptionDate =  objValues.interruptionDate!==\"\" ? objValues.interruptionDate : objValues.dateSeroconverted\n         if(objValues.interruptionDate===\"\" && objValues.dateSeroconverted!==\"\"){\n            objValues.interruptionDate =  objValues.dateSeroconverted\n         }else if(objValues.interruptionDate===\"\" && objValues.dateRestartPlacedBackMedication!==\"\"){\n            objValues.interruptionDate =  objValues.dateRestartPlacedBackMedication\n         }else if(objValues.interruptionDate===\"\" && objValues.dateClientReferredOut!==\"\"){\n            objValues.interruptionDate =  objValues.dateClientReferredOut\n         }else if(objValues.interruptionDate===\"\" && objValues.dateClientDied!==\"\"){\n            objValues.interruptionDate =  objValues.dateClientDied\n         }else{\n            //objValues.interruptionDate = objValues.interruptionDate\n         }\n         if(validate()){\n          setSaving(true);\n          if(props.activeContent && props.activeContent.actionType===\"update\"){\n          axios.put(`${baseUrl}prep-interruption/${props.activeContent.id}`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          ).then(response => {\n                  setSaving(false);\n                  toast.success(\"Record save successful\");\n                  props.PatientObject();\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    if(error.response.data.apierror){\n                      toast.error(error.response.data.apierror.message , {position: toast.POSITION.BOTTOM_CENTER});\n                    }else{\n                      toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\n                    }\n                }else{\n                    toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\n                }\n              });\n            }else{\n                axios.post(`${baseUrl}prep/interruption`,objValues,\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\n                \n                ).then(response => {\n                        setSaving(false);\n                        toast.success(\"Record save successful\");\n                        props.PatientObject();\n                        props.setActiveContent({...props.activeContent, route:'recent-history'})\n\n                    })\n                    .catch(error => {\n                        setSaving(false);\n                        if(error.response && error.response.data){\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                            if(error.response.data.apierror){\n                            toast.error(error.response.data.apierror.message , {position: toast.POSITION.BOTTOM_CENTER});\n                            }else{\n                            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\n                            }\n                        }else{\n                            toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\n                        }\n                    });\n\n            }\n        }\n          \n    }\n\n  return (      \n      <div>                   \n        <Card className={classes.root}>\n            <CardBody>\n            <form >\n                <div className=\"row\">\n                    <h2> PrEP Discontinuations & Interruptions</h2>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">PrEP Interruptions <span style={{ color:\"red\"}}> *</span></Label>\n                        <Input\n                            type=\"select\"\n                            name=\"interruptionType\"\n                            id=\"interruptionType\"\n                            onChange={handleInputChange}\n                            value={objValues.interruptionType}\n                            required\n                        >\n                        <option value=\"\">Select</option>\n                        {prepStatus.map((value) => (\n                            <option key={value.id} value={value.code}>\n                                {value.display}\n                            </option>\n                        ))}\n                        </Input>\n                        {errors.interruptionType !==\"\" ? (\n                                <span className={classes.error}>{errors.interruptionType}</span>\n                            ) : \"\" } \n                        </FormGroup>\n                    </div>\n                    {(objValues.interruptionType==='PREP_STATUS_ADVERSE_DRUG_REACTION' || objValues.interruptionType==='PREP_STATUS_STOPPED' || objValues.interruptionType==='PREP_STATUS_LOSS_TO_FOLLOW_UP' ) && (\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label for=\"uniqueId\">Date of Interruption <span style={{ color:\"red\"}}> *</span></Label>\n                            <Input\n                                type=\"date\"\n                                onKeyDown={(e)=>{\n                                    e.preventDefault()\n                                }}\n                                name=\"interruptionDate\"\n                                id=\"interruptionDate\"\n                                min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                onChange={handleInputChange}\n                                value={objValues.interruptionDate}\n                                required\n                            />\n                            {errors.interruptionDate !==\"\" ? (\n                                <span className={classes.error}>{errors.interruptionDate}</span>\n                            ) : \"\" } \n                            </FormGroup>\n                        </div>\n                    )}\n                     {objValues.interruptionType==='PREP_STATUS_STOPPED' && (\n                        <>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label for=\"uniqueId\">Reason Stopped </Label>\n                            <Input\n                                type=\"select\"\n                                name=\"reasonStopped\"\n                                id=\"reasonStopped\"\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                onChange={handleInputChange}\n                                value={objValues.reasonStopped}\n                                \n                            >\n                                <option value=\"\">Select</option>\n                                {reasonStooped.map((value) => (\n                                    <option key={value.id} value={value.display}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                            </Input>\n                            {errors.reasonStopped !==\"\" ? (\n                                <span className={classes.error}>{errors.reasonStopped}</span>\n                            ) : \"\" } \n                            </FormGroup>\n                        </div>\n                        {objValues.reasonStopped ==='Others (Pls specify)' && (\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label for=\"uniqueId\">Other Reason Stopped </Label>\n                            <Input\n                                type=\"text\"\n                                name=\"reasonStoppedOthers\"\n                                id=\"reasonStoppedOthers\"\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                onChange={handleInputChange}\n                                value={objValues.reasonStoppedOthers}\n                                \n                            ></Input>\n                            {errors.reasonStoppedOther !==\"\" ? (\n                                <span className={classes.error}>{errors.reasonStopped}</span>\n                            ) : \"\" } \n                            </FormGroup>\n                        </div>\n                        )}\n                        </>\n                     )}\n                    {objValues.interruptionType==='PREP_STATUS_TRANSFER_OUT' && (\n                    <>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Date of client referred out </Label>\n                        <Input\n                            type=\"date\"\n                            onKeyDown={(e)=>e.preventDefault()}\n                            name=\"dateClientReferredOut\"\n                            id=\"dateClientReferredOut\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.dateClientReferredOut}\n                            required\n                        />\n                        {errors.dateClientReferredOut !==\"\" ? (\n                            <span className={classes.error}>{errors.dateClientReferredOut}</span>\n                        ) : \"\" } \n                        </FormGroup>\n                    </div>\n                    \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Facility referred to </Label>\n                        <Input\n                            type=\"text\"\n                            name=\"facilityReferredTo\"\n                            id=\"facilityReferredTo\"\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.facilityReferredTo}\n                            required\n                        />\n                        {errors.facilityReferredTo !==\"\" ? (\n                            <span className={classes.error}>{errors.facilityReferredTo}</span>\n                        ) : \"\" } \n                        </FormGroup>\n                    </div>\n                    </>\n                    )}\n                    {objValues.interruptionType==='PREP_STATUS_DEAD' && (\n                    <>\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Date of client died </Label>\n                        <Input\n                            type=\"date\"\n                            onKeyDown={(e)=>e.preventDefault()}\n                            name=\"dateClientDied\"\n                            id=\"dateClientDied\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.dateClientDied}\n                            required\n                        />\n                        {errors.dateClientDied !==\"\" ? (\n                            <span className={classes.error}>{errors.dateClientDied}</span>\n                        ) : \"\" } \n                        </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Cause of death</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"causeOfDeath\"\n                            id=\"causeOfDeath\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.causeOfDeath}\n                            required\n                        >\n                            <option value=\"\">Select</option>\n                                {causeOfDeath.map((value) => (\n                                    <option key={value.id} value={value.display}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                        </Input>\n                        {errors.causeOfDeath !==\"\" ? (\n                            <span className={classes.error}>{errors.causeOfDeath}</span>\n                        ) : \"\" } \n                        </FormGroup>\n                    </div>\n                   \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Source of death information  </Label>\n                        <Input\n                            type=\"text\"\n                            name=\"sourceOfDeathInfo\"\n                            id=\"sourceOfDeathInfo\"\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.sourceOfDeathInfo}\n                            required\n                        />\n                        {errors.sourceOfDeathInfo !==\"\" ? (\n                            <span className={classes.error}>{errors.sourceOfDeathInfo}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    </>\n                    )}\n                    {/* <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"eligibilityScreeningOccupation\">Why ? </Label>\n                        <Input\n                            type=\"text\"\n                            name=\"why\"\n                            id=\"why\"\n                            onChange={handleInputChange}\n                            value={objValues.why}\n                            required\n                        />\n                        \n                        </FormGroup>\n                    </div> */}\n                     {objValues.interruptionType==='PREP_STATUS_RESTART' && (\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Date of restart if placed back on medication</Label>\n                        <Input\n                            className=\"form-control\"\n                            type=\"date\"\n                            onKeyDown={(e)=>e.preventDefault()}\n                            name=\"dateRestartPlacedBackMedication\"\n                            id=\"dateRestartPlacedBackMedication\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            value={objValues.dateRestartPlacedBackMedication}\n                            onChange={handleInputChange}\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                        />\n                        {errors.dateRestartPlacedBackMedication !==\"\" ? (\n                            <span className={classes.error}>{errors.dateRestartPlacedBackMedication}</span>\n                        ) : \"\" }    \n                        </FormGroup>\n                    </div>\n                     )}\n                     {objValues.interruptionType==='PREP_STATUS_SEROCONVERTED' && (\n                    <>\n                     <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"uniqueId\">Date Seroconverted </Label>\n                        <Input\n                            type=\"date\"\n                            onKeyDown={(e)=>e.preventDefault()}\n                            name=\"dateSeroconverted\"\n                            id=\"dateSeroconverted\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            onChange={handleInputChange}\n                            value={objValues.dateSeroconverted}\n                            required\n                        />\n                        {errors.dateSeroconverted !==\"\" ? (\n                            <span className={classes.error}>{errors.dateSeroconverted}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div> \n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Link to ART</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"linkToArt\"\n                            id=\"linkToArt\"\n                            onChange={handleInputChange}\n                            value={objValues.linkToArt}  \n                        >\n                        <option value=\"\"> Select</option>\n                        <option value=\"true\">Yes </option>\n                        <option value=\"false\"> No</option>\n                        </Input>\n                        {errors.linkToArt !==\"\" ? (\n                            <span className={classes.error}>{errors.linkToArt}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    {objValues.linkToArt==='true' && (\n                    <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Date link to ART</Label>\n                        <Input\n                            className=\"form-control\"\n                            type=\"date\"\n                            onKeyDown={(e)=>e.preventDefault()}\n                            name=\"dateLinkToArt\"\n                            id=\"dateLinkToArt\"\n                            //min=\"1983-12-31\"\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                            value={objValues.dateLinkToArt}\n                            onChange={handleInputChange}\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                        />\n                        {errors.dateLinkToArt !==\"\" ? (\n                            <span className={classes.error}>{errors.dateLinkToArt}</span>\n                        ) : \"\" }    \n                        </FormGroup>\n                    </div>\n                    )}\n                    </>)}\n                    \n                </div>\n\n                {saving ? <Spinner /> : \"\"}\n                <br />\n            \n                <MatButton\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    startIcon={<SaveIcon />}\n                    onClick={handleSubmit}\n                    style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\n                    >\n                    {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                    ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                    )}\n                </MatButton>\n            \n                <MatButton\n                    variant=\"contained\"\n                    className={classes.button}\n                    startIcon={<CancelIcon />}\n                    onClick={props.toggle}\n                    style={{backgroundColor:'#992E62'}}\n                    \n                >\n                    <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\n                </MatButton>\n            \n                </form>\n            </CardBody>\n        </Card>                    \n    </div>\n  );\n}\n\nexport default PrEPEligibiltyScreeningForm;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js",["213","214","215"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Card, CardBody, FormGroup, Label, Input, InputGroup,\r\n    InputGroupText, Label as FormLabelName,\r\n} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import Moment from \"moment\";\r\n// import momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\": {\r\n            color: '#fff',\r\n            fontWeight: 'bold'\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: '0.25rem',\r\n            height: '41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\": {\r\n            color: 'red'\r\n        },\r\n        \"& label\": {\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            fontWeight: 'bold'\r\n        },\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst PrEPCommencementForm = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    const [prepRegimen, setprepRegimen] = useState([]);\r\n    const [historyOfDrugToDrugInteraction, setHistoryOfDrugToDrugInteraction] = useState([])\r\n    const [objValues, setObjValues] = useState({\r\n        dateInitialAdherenceCounseling: \"\",\r\n        datePrepStart: \"\",\r\n        height: \"\",\r\n        personId: patientObj.personId,\r\n        prepClientId: props.prepId,\r\n        regimenId: null,\r\n        urinalysisResult: \"\",\r\n        prepEligibilityUuid: \"\",\r\n        weight: \"\",\r\n        drugAllergies: \"\",\r\n        referred: \"\",\r\n        datereferred: \"\",\r\n        extra: {},\r\n        nextAppointment: \"\",\r\n        pregnant: true,\r\n        prepEnrollmentUuid: \"\",\r\n        duration: \"\",\r\n        prepDistributionSetting: \"\",\r\n        prepType: \"\",\r\n        monthsOfRefill: \"\",\r\n        liverFunctionTestResults: \"\",\r\n        dateLiverFunctionTestResults: \"\",\r\n        historyOfDrugToDrugInteraction: \"\"\r\n    });\r\n\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [pregnant, setpregnant] = useState([]);\r\n    const [patientDto, setPatientDto] = useState();\r\n    const [prepEntryPoint, setPrepEntryPoints] = useState([]);\r\n    const [urinalysisTestResult, setUrinalysisTestResult] = useState([]);\r\n    const [prepType, setPrepType] = useState([]);\r\n    const [liverFunctionTestResult, setLiverFunctionTestResult] = useState([]);\r\n\r\n    useEffect(() => {\r\n        PREGANACY_STATUS();\r\n        GetPatientDTOObj();\r\n        PrepRegimen();\r\n        PREP_ENTRY_POINT();\r\n        PREP_TYPE();\r\n        LiverFunctionTestResult();\r\n        HistoryOfDrugToDrugInteraction();\r\n        PREP_URINALYSIS_RESULT();\r\n        if (props.activeContent.id && props.activeContent.id !== \"\" && props.activeContent.id !== null) {\r\n            GetPatientCommercement(props.activeContent.id)\r\n            setSisabledField(props.activeContent.actionType === 'view' ? true : false)\r\n        }\r\n    }, []);\r\n    const PrepRegimen = async () => {\r\n        axios\r\n            .get(`${baseUrl}prep-regimen`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setprepRegimen(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const PREP_ENTRY_POINT = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_ENTRY_POINT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPrepEntryPoints(response.data);\r\n                // console.log(\"prep\", prepEntryPoint)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const PREP_URINALYSIS_RESULT = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_URINALYSIS_RESULT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n\r\n                setUrinalysisTestResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n\r\n            });\r\n\r\n    }\r\n\r\n\r\n    const PREP_TYPE = async () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPrepType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    const LiverFunctionTestResult = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/LIVER_FUNCTION_TEST_RESULT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setLiverFunctionTestResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const HistoryOfDrugToDrugInteraction = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_HISTORY_OF_DRUG_INTERACTIONS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setHistoryOfDrugToDrugInteraction(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const GetPatientCommercement = (id) => {\r\n        axios\r\n            .get(`${baseUrl}prep/commencement/person/${props.patientObj.personId}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data.find((x)=> x.id===id));\r\n                setObjValues(response.data.find((x) => x.id === id));\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PREGANACY_STATUS = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setpregnant(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const GetPatientDTOObj = () => {\r\n        axios\r\n            .get(`${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPatientDto(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    //Vital signs clinical decision support\r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n        weight: \"\",\r\n        height: \"\",\r\n    })\r\n\r\n\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n\r\n        if (e.target.name === 'referred' && e.target.value === 'false') {\r\n            objValues.datereferred = ''\r\n            setObjValues({ ...objValues, ['datereferred']: '' });\r\n        } else if (e.target.name === 'monthsOfRefill') {\r\n            const durationInDays = (Number(e.target.value) * 30)\r\n            setObjValues({ ...objValues, monthsOfRefill: e.target.value, duration: durationInDays })\r\n\r\n        }\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.dateInitialAdherenceCounseling = objValues.dateInitialAdherenceCounseling ? \"\" : \"This field is required\"\r\n        temp.datePrepStart = objValues.datePrepStart ? \"\" : \"This field is required\"\r\n        temp.prepType = objValues.prepType ? \"\" : \"This field is required\"\r\n        temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\"\r\n        temp.height = objValues.height ? \"\" : \"This field is required\"\r\n        temp.weight = objValues.weight ? \"\" : \"This field is required\"\r\n        temp.referred = objValues.referred ? \"\" : \"This field is required\"\r\n        temp.prepDistributionSetting = objValues.prepDistributionSetting ? \"\" : \"This field is required\"\r\n        //temp.datereferred = objValues.datereferred ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight = (e) => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        if (e.target.name === \"height\" && (e.target.value < 48.26 || e.target.value > 216.408)) {\r\n            const message = \"Height cannot be greater than 216.408 and less than 48.26\"\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, height: message })\r\n        } else {\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, height: \"\" })\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight = (e) => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        if (e.target.name === \"weight\" && (e.target.value < 3 || e.target.value > 150)) {\r\n            const message = \"Body weight must not be greater than 150 and less than 3\"\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, weight: message })\r\n        } else {\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, weight: \"\" })\r\n        }\r\n    }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            setSaving(true);\r\n            objValues.prepEnrollmentUuid = patientDto.uuid\r\n            if (props.activeContent && props.activeContent.actionType === \"update\") {//Perform operation for updation action\r\n                axios.put(`${baseUrl}prep-clinic/${props.activeContent.id}`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },\r\n                ).then(response => {\r\n                    setSaving(false);\r\n                    patientObj.commencementCount = 1\r\n                    toast.success(\"Record save successful\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                    props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            } else {\r\n                axios.post(`${baseUrl}prep/commencement`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },\r\n                ).then(response => {\r\n                    setSaving(false);\r\n                    patientObj.commencementCount = 1\r\n                    props.PatientObject();\r\n                    toast.success(\"Record save successful\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                    props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // console.log(props.patientObj.gender)\r\n\r\n    const handlePrepTypeChange = (e) => {\r\n        // check the prep type. if it is ed prep or others, fetch all prep types instead\r\n\r\n        setObjValues({ ...objValues, regimenId: \"\", prepType: e.target.value })\r\n        if (e.target.value === 'PREP_TYPE_OTHERS' || e.target.value === 'PREP_TYPE_ED_PREP') {\r\n            PrepRegimen();\r\n        } else {\r\n            axios\r\n                .get(`${baseUrl}prep-regimen/prepType?prepType=${e.target.value}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setprepRegimen(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    //console.log(error);\r\n                });\r\n        }\r\n\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <h2> PrEP Commencement </h2>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"uniqueId\">Date of Initial Adherence Counseling <span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"dateInitialAdherenceCounseling\"\r\n                                        id=\"dateInitialAdherenceCounseling\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.dateInitialAdherenceCounseling}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateInitialAdherenceCounseling !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateInitialAdherenceCounseling}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>Date PrEP started <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"datePrepStart\"\r\n                                        id=\"datePrepStart\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.datePrepStart}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.datePrepStart !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.datePrepStart}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\" mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Body Weight <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <InputGroup>\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            name=\"weight\"\r\n                                            id=\"weight\"\r\n                                            onChange={handleInputChange}\r\n                                            min=\"3\"\r\n                                            max=\"150\"\r\n                                            value={objValues.weight}\r\n                                            onKeyUp={handleInputValueCheckBodyWeight}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0rem\" }}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        <InputGroupText addonType=\"append\" style={{\r\n                                            backgroundColor: \"#014D88\",\r\n                                            color: \"#fff\",\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0rem\"\r\n                                        }}>\r\n                                            kg\r\n                                        </InputGroupText>\r\n                                    </InputGroup>\r\n                                    {vitalClinicalSupport.bodyWeight !== \"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                                    ) : \"\"}\r\n                                    {errors.weight !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.weight}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Height <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <InputGroup>\r\n                                        <InputGroupText\r\n                                            addonType=\"append\"\r\n                                            style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}\r\n                                        >\r\n                                            cm\r\n                                        </InputGroupText>\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            name=\"height\"\r\n                                            id=\"height\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.height}\r\n                                            min=\"48.26\"\r\n                                            max=\"216.408\"\r\n                                            disabled={disabledField}\r\n                                            onKeyUp={handleInputValueCheckHeight}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0rem\" }}\r\n                                        />\r\n                                        <InputGroupText\r\n                                            addonType=\"append\"\r\n\r\n                                            style={{\r\n                                                backgroundColor: \"#992E62\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #992E62\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}\r\n                                        >\r\n                                            {objValues.height !== '' ? (objValues.height / 100).toFixed(2) + \"m\" : \"m\"}\r\n                                        </InputGroupText>\r\n                                    </InputGroup>\r\n                                    {vitalClinicalSupport.height !== \"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                                    ) : \"\"}\r\n                                    {errors.height !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.height}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 mt-2 col-md-4\">\r\n                                {objValues.weight !== \"\" && objValues.height !== '' && (\r\n                                    <FormGroup>\r\n                                        <Label> {\" \"}</Label>\r\n                                        <InputGroup>\r\n                                            <InputGroupText addonType=\"append\" style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}>\r\n                                                BMI\r\n                                                : {(objValues.weight / ((objValues.height / 100) * (objValues.height / 100))).toFixed(2)}\r\n                                            </InputGroupText>\r\n\r\n                                        </InputGroup>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </div>\r\n                            {(props.patientObj.gender === 'Female' || props.patientObj.gender === 'female' || props.patientObj.gender === 'FEMALE') && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"\">Pregnancy Status</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"pregnant\"\r\n                                            id=\"pregnant\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.pregnant}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value=\"\"></option>\r\n                                            {pregnant.map((value) => (\r\n                                                <option key={value.id} value={value.code}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n                            {objValues.pregnant === 'PREGANACY_STATUS_BREASTFEEDING' && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"\">Breast Feeding</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"breastFeeding\"\r\n                                            id=\"breastFeeding\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.breastFeeding}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Yes\"> Yes</option>\r\n                                            <option value=\"No\"> No</option>\r\n                                        </Input>\r\n\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">History of drug Allergies</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"drugAllergies\"\r\n                                        id=\"drugAllergies\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.drugAllergies}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </Input>\r\n\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"urinalysisResult\">Urinalysis Result</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"urinalysisResult\"\r\n                                        id=\"urinalysisResult\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.urinalysisResult}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {urinalysisTestResult.map((value) => (\r\n                                            <option key={value.id} value={value.display}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"historyOfDrugToDrugInteraction\">History of PrEP drug interactions\r\n                                        {/* <span style={{color: \"red\"}}> *</span> */}\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"select\"\r\n                                        name=\"historyOfDrugToDrugInteraction\"\r\n                                        id=\"historyOfDrugToDrugInteraction\"\r\n                                        // min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        // max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.historyOfDrugToDrugInteraction}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select </option>\r\n                                        {historyOfDrugToDrugInteraction.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                    {errors.historyOfDrugToDrugInteraction !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.historyOfDrugToDrugInteraction}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"liverFunctionTestResults\">Liver Function Tests Result<span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"select\"\r\n                                        name=\"liverFunctionTestResults\"\r\n                                        id=\"liverFunctionTestResults\"\r\n                                        // min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        // max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.liverFunctionTestResults}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select Result</option>\r\n                                        {liverFunctionTestResult.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                    {errors.liverFunctionTestResults !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.liverFunctionTestResults}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"dateLiverFunctionTestResults\">Date of Liver Function Tests Result  <span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"dateLiverFunctionTestResults\"\r\n                                        id=\"dateLiverFunctionTestResults\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.dateLiverFunctionTestResults}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateLiverFunctionTestResults !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateLiverFunctionTestResults}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">Referred <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"referred\"\r\n                                        id=\"referred\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.referred}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"true\"> Yes</option>\r\n                                        <option value=\"false\"> No</option>\r\n                                    </Input>\r\n                                    {errors.referred !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.referred}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            {objValues.referred === 'true' && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"datereferred\">Date referred</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            onKeyDown={(e) => e.preventDefault()}\r\n                                            name=\"datereferred\"\r\n                                            id=\"datereferred\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.datereferred}\r\n                                            min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        {errors.datereferred !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.datereferred}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <FormLabelName for=\"prepType\">Prep Type At Start <span\r\n                                        style={{ color: \"red\" }}> *</span></FormLabelName>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"prepType\"\r\n                                        id=\"prepType\"\r\n                                        // disabled\r\n                                        onChange={handlePrepTypeChange}\r\n                                        value={objValues.prepType}\r\n                                    // disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select Prep Type</option>\r\n                                        {prepType.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.prepType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.prepType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"regimenId\">PrEP Regimen <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"regimenId\"\r\n                                        id=\"regimenId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.regimenId}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select</option>\r\n                                        {prepRegimen.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.regimen}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.regimenId !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.regimenId}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <FormLabelName for=\"\">Prep Distribution Setting <span\r\n                                        style={{ color: \"red\" }}> *</span></FormLabelName>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"prepDistributionSetting\"\r\n                                        id=\"prepDistributionSetting\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.prepDistributionSetting}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"></option>\r\n                                        {prepEntryPoint.map((value) => (\r\n                                            <option key={value.code} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.prepDistributionSetting !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.prepDistributionSetting}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {/* <div className=\" mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Date PrEP Given</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                onKeyDown={(e)=>e.preventDefault()}\r\n                                name=\"datePrepGiven\"\r\n                                id=\"datePrepGiven\"\r\n                                value={objValues.datePrepGiven}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                disabled={disabledField}\r\n                            />\r\n                                \r\n                            </FormGroup>\r\n                        </div>  */}\r\n                            {/* <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>Duration</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={objValues.duration}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius: \"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                </FormGroup>\r\n                            </div> */}\r\n                            <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>{`Duration of Refill (Day[s])`}</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"monthsOfRefill\"\r\n                                        id=\"monthsOfRefill\"\r\n                                        value={objValues.monthsOfRefill}\r\n                                        min={0}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.25rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                </FormGroup>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {saving ? <Spinner /> : \"\"}\r\n                        <br />\r\n\r\n                        {props.activeContent && props.activeContent.actionType ? (<>\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                hidden={disabledField}\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{ backgroundColor: \"#014d88\" }}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                )}\r\n                            </MatButton>\r\n                        </>) : (<>\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{ backgroundColor: \"#014d88\" }}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                )}\r\n                            </MatButton>\r\n                        </>)}\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrEPCommencementForm;\r\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["216"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs, } from \"react-bootstrap\";\r\nimport ConsultationPage from './Home';\r\nimport ClinicHistoryPage from \"./ClinicHistory\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst ClinicVisitPage = (props) => {\r\n  const [key, setKey] = useState('home');\r\n  const patientObj = props.patientObj\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const getPatientHistory = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/person/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setRecentActivities(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  const [encounters, setEncounters] = useState([])\r\n\r\n  const fetchListOfEncounters = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setEncounters(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setKey(props.activeContent.activeTab)\r\n  }, [props.activeContent]);\r\n\r\n  useEffect(() => { fetchListOfEncounters() }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n\r\n                  <Tab eventKey=\"home\" title=\"CLINIC VISIT \">\r\n                    <ConsultationPage encounters={encounters}  recentActivities={recentActivities} patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} />\r\n                  </Tab>\r\n                  <Tab eventKey=\"history\" title=\"HISTORY\">\r\n                    <ClinicHistoryPage encounters={encounters} getPatientHistory={getPatientHistory} loading={loading} recentActivities={recentActivities} patientObj={patientObj} activeContent={props.activeContent} setActiveContent={props.setActiveContent} />\r\n                  </Tab>\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ClinicVisitPage;\r\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl, token } from \"../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { DateTimePicker } from \"react-widgets\";\n// import Moment from \"moment\";\n// import momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport { Spinner } from \"reactstrap\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst PrEPVisit = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [objValues, setObjValues] = useState({id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",dateConfirmedHiv:\"\",sourceOfReferrer:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\"});\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [carePoints, setCarePoints] = useState([]);\n    const [hivStatus, setHivStatus] = useState([]);\n    //set ro show the facility name field if is transfer in \n    const [transferIn, setTransferIn] = useState(false);\n    // display the OVC number if patient is enrolled into OVC \n    const [ovcEnrolled, setOvcEnrolled] = useState(false);\n\n    useEffect(() => {         \n\n      }, []);\n\n    const handleInputChange = e => {\n        \n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        if(e.target.name ===\"entryPointId\" ){\n            if(e.target.value===\"21\"){\n                setTransferIn(true)\n            }else{\n                setTransferIn(false)\n            }\n        }\n\n    }\n          \n    //Handle CheckBox \n    const handleCheckBox =e =>{\n        if(e.target.checked){\n            setOvcEnrolled(true)\n        }else{\n            setOvcEnrolled(false)\n        }\n    }  \n    \n    const validate = () => {\n        let temp = { ...errors }\n        //temp.name = details.name ? \"\" : \"This field is required\"\n        //temp.description = details.description ? \"\" : \"This field is required\"\n        setErrors({\n            ...temp\n            })    \n        return Object.values(temp).every(x => x == \"\")\n    }\n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        \n          objValues.personId= patientObj.id\n          patientObj.enrolled=true\n          delete objValues['tableData'];\n          setSaving(true);\n          axios.post(`${baseUrl}hiv/enrollment`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Record save successful\");\n                  props.toggle()\n                  props.patientObj.enrolled=true\n                  props.PatientCurrentStatus()\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n        <div>                  \n            <Card >\n                <CardBody>\n                <form >\n                    <div className=\"row\">\n                        <h2>PrEP Visit</h2>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label for=\"uniqueId\">Duration on PErp  </Label>\n                            <Input\n                                type=\"text\"\n                                name=\"uniqueId\"\n                                id=\"uniqueId\"\n                                onChange={handleInputChange}\n                                value={objValues.uniqueId}\n                                required\n                            />\n                            \n                            </FormGroup>\n                        </div>\n                        </div>\n                        <hr/>\n                        <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Noted Side Effects</Label>\n                            <Input\n                                type=\"select\"\n                                name=\"entryPointId\"\n                                id=\"entryPointId\"\n                                onChange={handleInputChange}\n                                value={objValues.entryPointId}\n                                required\n                            >\n                                <option value=\"\">Select </option>\n                \n                                {carePoints.map((value) => (\n                                    <option key={value.id} value={value.id}>\n                                        {value.display}\n                                    </option>\n                                ))}\n                                {errors.entryPointId !==\"\" ? (\n                                        <span className={classes.error}>{errors.entryPointId}</span>\n                                    ) : \"\" }\n                            </Input>\n                                \n                            </FormGroup>\n                        </div>\n                        </div>\n                        <hr/>\n                        \n                        <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"entryPointId\">HTS Result</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"entryPointId\"\n                            id=\"entryPointId\"\n                            onChange={handleInputChange}\n                            value={objValues.entryPointId}\n                            required\n                        >\n                        <option value=\"\"> </option>\n            \n                        {carePoints.map((value) => (\n                            <option key={value.id} value={value.id}>\n                                {value.display}\n                            </option>\n                        ))}\n                        {errors.entryPointId !==\"\" ? (\n                                <span className={classes.error}>{errors.entryPointId}</span>\n                            ) : \"\" }\n                        </Input>\n                        </FormGroup>\n                        \n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"entryPointId\">Risk Reduction Plan</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"entryPointId\"\n                            id=\"entryPointId\"\n                            onChange={handleInputChange}\n                            value={objValues.entryPointId}\n                            required\n                        >\n                        <option value=\"\"> </option>\n            \n                        {carePoints.map((value) => (\n                            <option key={value.id} value={value.id}>\n                                {value.display}\n                            </option>\n                        ))}\n                        {errors.entryPointId !==\"\" ? (\n                                <span className={classes.error}>{errors.entryPointId}</span>\n                            ) : \"\" }\n                        </Input>\n                        </FormGroup>\n                        \n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label for=\"entryPointId\">Syndromic STI Screening</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"entryPointId\"\n                            id=\"entryPointId\"\n                            onChange={handleInputChange}\n                            value={objValues.entryPointId}\n                            required\n                        >\n                        <option value=\"\"> </option>\n            \n                        {carePoints.map((value) => (\n                            <option key={value.id} value={value.id}>\n                                {value.display}\n                            </option>\n                        ))}\n                        {errors.entryPointId !==\"\" ? (\n                                <span className={classes.error}>{errors.entryPointId}</span>\n                            ) : \"\" }\n                        </Input>\n                        </FormGroup>\n                        \n                        </div>\n                        </div>\n                        <hr/>\n                        <div className=\"row\">\n                        <h3>PrEP Drugs</h3>\n                        <div className=\"form-group mb-3 col-md-6\">\n                        <FormGroup>\n                        <Label >Regimen</Label>\n                        <Input\n                            type=\"select\"\n                            name=\"statusAtRegistrationId\"\n                            id=\"statusAtRegistrationId\"\n                            onChange={handleInputChange}\n                            value={objValues.statusAtRegistrationId}\n                            required\n                        >\n                            <option value=\"\">Select </option>\n            \n                            {hivStatus.map((value) => (\n                                <option key={value.id} value={value.id}>\n                                    {value.display}\n                                </option>\n                            ))}\n                            {errors.statusAtRegistrationId !==\"\" ? (\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\n                                ) : \"\" }\n                        </Input>\n                        </FormGroup>\n                        </div>\n                    \n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Level of Adherence</Label>\n                            <Input\n                            type=\"select\"\n                            name=\"statusAtRegistrationId\"\n                            id=\"statusAtRegistrationId\"\n                            onChange={handleInputChange}\n                            value={objValues.statusAtRegistrationId}\n                            required\n                        >\n                            <option value=\"\">Select </option>\n            \n                            {hivStatus.map((value) => (\n                                <option key={value.id} value={value.id}>\n                                    {value.display}\n                                </option>\n                            ))}\n                            {errors.statusAtRegistrationId !==\"\" ? (\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\n                                ) : \"\" }\n                        </Input>\n                            </FormGroup>\n                        </div>\n                        <div className=\"form-group mb-3 col-md-6\">\n                            <FormGroup>\n                            <Label >Why Poor/Fair Adherence?</Label>\n                            <Input\n                            type=\"select\"\n                            name=\"statusAtRegistrationId\"\n                            id=\"statusAtRegistrationId\"\n                            onChange={handleInputChange}\n                            value={objValues.statusAtRegistrationId}\n                            required\n                        >\n                            <option value=\"\">Select </option>\n            \n                            {hivStatus.map((value) => (\n                                <option key={value.id} value={value.id}>\n                                    {value.display}\n                                </option>\n                            ))}\n                            {errors.statusAtRegistrationId !==\"\" ? (\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\n                                ) : \"\" }\n                        </Input>\n                            </FormGroup>\n                        </div>\n                    </div>\n                    \n                    {saving ? <Spinner /> : \"\"}\n                    <br />\n                \n                    <MatButton\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        startIcon={<SaveIcon />}\n                        onClick={handleSubmit}\n                        >\n                        {!saving ? (\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                        ) : (\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                        )}\n                    </MatButton>\n                \n                <MatButton\n                    variant=\"contained\"\n                    className={classes.button}\n                    startIcon={<CancelIcon />}\n                    onClick={props.toggle}\n                    \n                >\n                    <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n                </MatButton>\n                \n                    </form>\n                </CardBody>\n            </Card>                    \n        </div>\n  );\n}\n\nexport default PrEPVisit;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, Checkbox, FormControl, FormControlLabel, FormLabel, } from \"@material-ui/core\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Label as LabelRibbon, Button, Message, Select, Dropdown } from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport * as moment from 'moment';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ReactReadMoreReadLess from \"react-read-more-read-less\";\r\nimport \"../../index.css\"\r\nimport { color } from \"highcharts\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\": {\r\n            color: '#fff',\r\n            fontWeight: 'bold'\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: '0.25rem',\r\n            height: '41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\": {\r\n            color: 'red'\r\n        },\r\n        \"& label\": {\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            fontWeight: 'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error: {\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\nexport const DateInputWrapper = ({ children }) => {\r\n\r\n    const handleKeyDown = (event) => {\r\n        event.preventDefault()\r\n    };\r\n\r\n    const clonedChildren = React.cloneElement(children, {\r\n        onKeydown: handleKeyDown,\r\n    });\r\n\r\n    return clonedChildren;\r\n};\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    const patientID = props.patientDetail && props.patientDetail.personResponseDto ? props.patientDetail.personResponseDto.id : \"\";\r\n    //const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [counselingType, setCounselingType] = useState([]);\r\n    const [visitType, setVisitType] = useState([]);\r\n    const [reasonForDecline, setReasonForDecline] = useState([]);\r\n    const [populationType, setPopulationType] = useState([]);\r\n    const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n    let temp = { ...errors }\r\n\r\n    const [objValues, setObjValues] = useState(\r\n        {\r\n            counselingType: \"\",\r\n            drugUseHistory: {},\r\n            extra: {},\r\n            firstTimeVisit: true,\r\n            hivRisk: {},\r\n            numChildrenLessThanFive: \"\",\r\n            numWives: \"\",\r\n            personId: \"\",\r\n            personalHivRiskAssessment: {},\r\n            sexPartner: \"TARGET_GROUP_GEN_POP\",\r\n            sexPartnerRisk: {},\r\n            stiScreening: {},\r\n            targetGroup: \"TARGET_GROUP_GEN_POP\",\r\n            uniqueId: \"\",\r\n            visitDate: \"\",\r\n            visitType: \"\",\r\n            populationType: \"\",\r\n            pregnancyStatus: \"\",\r\n            score: 0\r\n        }\r\n    )\r\n    useEffect(async () => {\r\n\r\n        CounselingType();\r\n        VisitType();\r\n        await ReasonForDecline();\r\n        PopulationType();\r\n        PregnancyStatus();\r\n        if (props.activeContent.id && props.activeContent.id !== \"\" && props.activeContent.id !== null) {\r\n            GetPatientPrepEligibility(props.activeContent.id)\r\n            setSisabledField(props.activeContent.actionType === 'view' ? true : false)\r\n        }\r\n    }, [props.patientObj]);\r\n    const GetPatientPrepEligibility = (id) => {\r\n        axios\r\n            .get(`${baseUrl}prep/eligibility/${id}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                // console.log(response.data);\r\n                setObjValues(response.data);\r\n                setRiskAssessment(response.data.personalHivRiskAssessment)\r\n                setRiskAssessmentPartner(response.data.sexPartnerRisk)\r\n                setStiScreening(response.data.stiScreening)\r\n                setDrugHistory(response.data.drugUseHistory)\r\n                setAssessmentForPepIndication(response.data.assessmentForPepIndication)\r\n                setAssessmentForAcuteHivInfection(response.data.assessmentForAcuteHivInfection)\r\n                setServicesReceivedByClient(response.data.servicesReceivedByClient)\r\n                setAssessmentForPrepEligibility(response.data.assessmentForPrepEligibility)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const CounselingType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setCounselingType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const VisitType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_VISIT_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setVisitType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const ReasonForDecline = async () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_PREP_DECLINED`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setReasonForDecline(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PopulationType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/POPULATION_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPopulationType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PregnancyStatus = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPregnancyStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    const [riskAssessment, setRiskAssessment] = useState(\r\n        {\r\n            unprotectedVaginalSexCasual: \"\",\r\n            unprotectedVaginalSexRegular: \"\",\r\n            uprotectedAnalSexWithCasual: \"\",\r\n            uprotectedAnalSexWithRegular: \"\",\r\n            stiHistory: \"\",\r\n            sharedNeedles: \"\",\r\n            moreThan1SexPartner: \"\",\r\n            analSexWithPartner: \"\",\r\n            unprotectedAnalSexWithPartner: \"\",\r\n            haveYouPaidForSex: \"\",\r\n            haveSexWithoutCondom: \"\",\r\n            experienceCondomBreakage: \"\",\r\n            takenPartInSexualOrgy: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeRiskAssessment = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"}) \r\n        setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n    }\r\n    // Getting the number count of riskAssessment True\r\n    const actualRiskCountTrue = Object.values(riskAssessment)\r\n    const riskCount = actualRiskCountTrue.filter((x) => x === 'true')\r\n    const [riskAssessmentPartner, setRiskAssessmentPartner] = useState(\r\n        {\r\n            haveSexWithHIVPositive: \"\",\r\n            haveSexWithPartnerInjectDrug: \"\",\r\n            haveSexWithPartnerWhoHasSexWithMen: \"\",\r\n            haveSexWithPartnerTransgender: \"\",\r\n            sexWithPartnersWithoutCondoms: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeRiskAssessmentPartner = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setRiskAssessmentPartner({ ...riskAssessmentPartner, [e.target.name]: e.target.value });\r\n\r\n    }\r\n    // Getting the number count of sexPartRiskCount True\r\n    const actualSexPartRiskCountTrue = Object.values(riskAssessmentPartner)\r\n    const sexPartRiskCount = actualSexPartRiskCountTrue.filter((x) => x === 'true')\r\n    const [stiScreening, setStiScreening] = useState(\r\n        {\r\n            vaginalDischarge: \"\",\r\n            lowerAbdominalPains: \"\",\r\n            urethralDischarge: \"\",\r\n            complaintsOfScrotal: \"\",\r\n            complaintsGenitalSore: \"\",\r\n            analDischarge: \"\",\r\n            analItching: \"\",\r\n            analpain: \"\",\r\n            swollenIguinal: \"\",\r\n            genitalScore: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeStiScreening = e => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        setStiScreening({ ...stiScreening, [e.target.name]: e.target.value });\r\n\r\n    }\r\n    // Getting the number count of STI True\r\n    const actualStiTrue = Object.values(stiScreening)\r\n    const stiCount = actualStiTrue.filter((x) => x === 'true')\r\n    const [drugHistory, setDrugHistory] = useState(\r\n        {\r\n            useAnyOfTheseDrugs: \"\",\r\n            inject: \"\",\r\n            sniff: \"\",\r\n            smoke: \"\",\r\n            Snort: \"\",\r\n            useDrugSexualPerformance: \"\",\r\n            hivTestedBefore: \"\",\r\n            recommendHivRetest: \"\",\r\n            clinicalSetting: \"\",\r\n            reportHivRisk: \"\",\r\n            hivExposure: \"\",\r\n            hivTestResultAtvisit: \"\", //\r\n            lastTest: \"\"\r\n        }\r\n    )\r\n    const handleInputChangeDrugHistory = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        if (drugHistory.hivTestedBefore === \"true\") {\r\n            setDrugHistory({ ...drugHistory, lastTest: '' });\r\n        }\r\n        setDrugHistory({ ...drugHistory, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForPepIndication, setAssessmentForPepIndication] = useState(\r\n        {\r\n            unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours: \"\",\r\n            sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForPepIndication = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForPepIndication({ ...assessmentForPepIndication, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForAcuteHivInfection, setAssessmentForAcuteHivInfection] = useState(\r\n        {\r\n            acuteHivSymptomsLasttwoWeeks: \"\",\r\n            unprotectedAnalOrVaginalOrSharedNeedlesLast28Days: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForAcuteHivInfection = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForAcuteHivInfection({ ...assessmentForAcuteHivInfection, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForPrepEligibility, setAssessmentForPrepEligibility] = useState(\r\n        {\r\n            hivNegative: \"\",\r\n            hivRiskScore: \"\",\r\n            noIndicationForPep: \"\",\r\n            hasNoProteinuria: \"\",\r\n            noHistoryOrSignsOfLiverAbnormalitiesCabLa: \"\",\r\n            noHistoryOfDrugToDrugInteractionCabLa: \"\",\r\n            noHistoryOfDrugHypersensitivityCabLa: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForPrepEligibility = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForPrepEligibility({ ...assessmentForPrepEligibility, [e.target.name]: e.target.value });\r\n    }\r\n    const [servicesReceivedByClient, setServicesReceivedByClient] = useState(\r\n        {\r\n            willingToCommencePrep: \"\",\r\n            reasonsForDecline: [],\r\n            otherReasonsForDecline: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeServicesReceivedByClient = (e, data) => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n\r\n\r\n        if(e.target.name === \"willingToCommencePrep\"){\r\n\r\n            setServicesReceivedByClient({ ...servicesReceivedByClient, [e.target.name]: e.target.value,  reasonsForDecline: [],\r\n            });\r\n\r\n        }else{\r\n            setServicesReceivedByClient({ ...servicesReceivedByClient, [e.target.name]: e.target.value });\r\n\r\n        }\r\n    }\r\n\r\n    const handleInputReasonsForDecline = (e, data) => {\r\n        setServicesReceivedByClient({ ...servicesReceivedByClient, reasonsForDecline: data.value })\r\n    }\r\n\r\n    const [assessmentScore, setAssessmentScore] = useState(0);\r\n\r\n\r\n    /*****  Validation  */\r\n    const validate = () => {\r\n        //PREP FORM VALIDATION\r\n        temp.visitDate = objValues.visitDate ? \"\" : \"This field is required.\"\r\n        temp.sexPartner = objValues.sexPartner ? \"\" : \"This field is required.\"\r\n        temp.hivTestResultAtvisit = drugHistory.hivTestResultAtvisit ? \"\" : \"This field is required.\"\r\n\r\n        setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (validate()) {\r\n            setSaving(true);\r\n            //objValues.htsClientId= clientId\r\n            objValues.drugUseHistory = drugHistory\r\n            objValues.personalHivRiskAssessment = riskAssessment\r\n            objValues.sexPartnerRisk = riskAssessmentPartner\r\n            objValues.stiScreening = stiScreening\r\n            objValues.personId = patientID\r\n            objValues.uniqueId = patientID\r\n            objValues.assessmentForAcuteHivInfection = assessmentForAcuteHivInfection\r\n            objValues.assessmentForPepIndication = assessmentForPepIndication\r\n            objValues.assessmentForPrepEligibility = assessmentForPrepEligibility\r\n            objValues.servicesReceivedByClient = servicesReceivedByClient\r\n            objValues.score = getPrepEligibilityScore();\r\n            if (props.activeContent && props.activeContent.actionType === \"update\") {//Perform operation for updation action\r\n                axios.put(`${baseUrl}prep-eligibility/${props.activeContent.id}`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },)\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        props.patientObj.eligibilityCount = 1\r\n                        props.patientObj.hivresultAtVisit = drugHistory.hivTestResultAtvisit\r\n                        props.PatientObject();\r\n                        toast.success(\"Prep Eligilibility save successful!\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            } else {\r\n                axios.post(`${baseUrl}prep/eligibility`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },)\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        props.patientObj.eligibilityCount = 1\r\n                        //props.setPatientObj(response.data)\r\n                        props.patientObj.hivresultAtVisit = drugHistory.hivTestResultAtvisit\r\n                        toast.success(\"Prep Eligilibility save successful!\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            }\r\n\r\n        } else {\r\n            setSaving(false);\r\n            toast.error(\"All field are required \", { position: toast.POSITION.BOTTOM_CENTER });\r\n        }\r\n    }\r\n\r\n    const isFemale = () => {\r\n        return props.patientObj.gender.toLowerCase() === \"female\";\r\n    }\r\n\r\n    const is30AndAbove = () => {\r\n        return Number(props.patientObj.age) >= 30;\r\n    }\r\n\r\n    const getIndicationForPepResult = () => {\r\n        if (assessmentForPepIndication !== null && assessmentForPepIndication !== undefined) {\r\n            return Object.values(assessmentForPepIndication).filter((each) => (each === \"true\")).length > 0 ? 0 : 1\r\n        }\r\n    }\r\n\r\n    const getAcuteHivResult = () => {\r\n        if (assessmentForAcuteHivInfection !== null && assessmentForAcuteHivInfection !== undefined) {\r\n            return Object.values(assessmentForAcuteHivInfection).filter((each) => (each === \"true\")).length > 0 ? 0 : 1\r\n        }\r\n    }\r\n\r\n    const getPrepEligibilityScore = () => {\r\n        var score = 0;\r\n        score += drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0\r\n        score += riskCount.length > 0 ? 1 : 0\r\n        score += getAcuteHivResult()\r\n        score += getIndicationForPepResult()\r\n        if (is30AndAbove() && isFemale() === false) {\r\n            score += assessmentForPrepEligibility?.hasNoProteinuria === \"true\" ? 1 : 0;\r\n        }\r\n        score += assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa === \"true\" ? 1 : 0;\r\n        score += assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa === \"true\" ? 1 : 0;\r\n        score += assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa === \"true\" ? 1 : 0;\r\n\r\n        if (is30AndAbove() && isFemale() === false) {\r\n            return score >= 8 ? 1 : 0;\r\n        } else {\r\n            return score >= 7 ? 1 : 0;\r\n        }\r\n    }\r\n    const [recentActivities, setRecentActivities] = useState([])\r\n    function countPrepEligibility(data) {\r\n        let count = 0;\r\n        let relevantActivities = ['Prep Commencement', 'Prep Clinic']\r\n        data.forEach(entry => {\r\n          entry?.activities?.forEach(activity => {\r\n            if (relevantActivities.includes(activity?.name)) {\r\n              count++;\r\n            }\r\n          });\r\n        });\r\n    \r\n        return count;\r\n      }\r\n    const getRecentActivities = () => {\r\n        axios\r\n            .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setRecentActivities(response.data)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    useEffect(() => getRecentActivities(), [])\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <h2>PrEP Eligibilty Screening Form</h2>\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Visit Date <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        className=\"form-control\"\r\n                                        name=\"visitDate\"\r\n                                        id=\"visitDate\"\r\n                                        value={objValues.visitDate}\r\n                                        onChange={handleInputChange}\r\n                                        min={props.patientDetail && props.patientDetail.dateHivPositive !== null ? props.patientDetail.dateHivPositive : props.patientObj.dateOfRegistration}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.visitDate !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.visitDate}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Visit type <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"visitType\"\r\n                                        id=\"visitType\"\r\n                                        value={objValues.visitType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {visitType.map((value) => (\r\n                                            <option value={value.code}> {value.display} </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors.visitType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.visitType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Population type <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"populationType\"\r\n                                        id=\"populationType\"\r\n                                        value={objValues.populationType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {populationType.map((value) => (\r\n                                            <option value={value.code}> {value.display} </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors.populationType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.populationType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {isFemale() && (\r\n                                <div className=\"form-group col-md-4 p-2\">\r\n                                    <FormGroup className=\"p-2\">\r\n                                        <Label>Pregnancy Status <span style={{ color: \"red\" }}> *</span></Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"pregnancyStatus\"\r\n                                            id=\"pregnancyStatus\"\r\n                                            value={objValues.pregnancyStatus}\r\n                                            onChange={handleInputChange}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            {pregnancyStatus.map((value) => (\r\n                                                <option value={value.code}> {value.display} </option>\r\n                                            ))}\r\n                                        </select>\r\n                                        {errors.pregnancyStatus !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.pregnancyStatus}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Sex partners <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexPartner\"\r\n                                        id=\"sexPartner\"\r\n                                        value={objValues.sexPartner}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"Male\">Male</option>\r\n                                        <option value=\"Female\">Female</option>\r\n                                        <option value=\"Both\">Both</option>\r\n                                    </select>\r\n                                    {errors.sexPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sexPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {props.patientObj.gender === 'Male' || props.patientObj.gender === 'male' && (\r\n                                <div className=\"form-group col-md-4 p-2\">\r\n                                    <FormGroup className=\"p-2\">\r\n                                        <Label>Number of wives </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            name=\"numWives\"\r\n                                            id=\"numWives\"\r\n                                            value={objValues.numWives}\r\n                                            onChange={handleInputChange}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        {errors.numWives !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.numWives}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Type of counseling <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"counselingType\"\r\n                                        id=\"counselingType\"\r\n                                        value={objValues.counselingType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {counselingType.map((value) => (\r\n                                            <option value={value.id}> {value.display} </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors.counselingType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.counselingType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group my-4 col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }}>\r\n                                HIV Risk Assessment (Last 3 months)\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Unprotected Vaginal sex with casual partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedVaginalSexCasual\"\r\n                                        id=\"unprotectedVaginalSexCasual\"\r\n                                        value={riskAssessment.unprotectedVaginalSexCasual}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedVaginalSexCasual !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedVaginalSexCasual}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Unprotected Vaginal sex with regular partner </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedVaginalSexRegular\"\r\n                                        id=\"unprotectedVaginalSexRegular\"\r\n                                        value={riskAssessment.unprotectedVaginalSexRegular}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedVaginalSexRegular !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedVaginalSexRegular}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup >\r\n                                    <Label>Unprotected Anal sex with regular partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedAnalSexWithRegular\"\r\n                                        id=\"uprotectedAnalSexWithRegular\"\r\n                                        value={riskAssessment.uprotectedAnalSexWithRegular}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.uprotectedAnalSexWithRegular !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.uprotectedAnalSexWithRegular}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>History of STI</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"stiHistory\"\r\n                                        id=\"stiHistory\"\r\n                                        value={riskAssessment.stiHistory}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.stiHistory !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.stiHistory}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Shared needles/injecting materials</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sharedNeedles\"\r\n                                        id=\"sharedNeedles\"\r\n                                        value={riskAssessment.sharedNeedles}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.sharedNeedles !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sharedNeedles}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>More than 1 sex partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"moreThan1SexPartner\"\r\n                                        id=\"moreThan1SexPartner\"\r\n                                        value={riskAssessment.moreThan1SexPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.moreThan1SexPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.moreThan1SexPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal sex with Male/Female partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analSexWithPartner\"\r\n                                        id=\"analSexWithPartner\"\r\n                                        value={riskAssessment.analSexWithPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.analSexWithPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analSexWithPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected Anal sex with male/female partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedAnalSexWithPartner\"\r\n                                        id=\"unprotectedAnalSexWithPartner\"\r\n                                        value={riskAssessment.unprotectedAnalSexWithPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedAnalSexWithPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedAnalSexWithPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you paid for sex in the last 6 months?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveYouPaidForSex\"\r\n                                        id=\"haveYouPaidForSex\"\r\n                                        value={riskAssessment.haveYouPaidForSex}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveYouPaidForSex !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveYouPaidForSex}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you been paid for sex in the last 6 months?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                        id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                        value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.moreThanOneSexPartnerLastThreeMonths !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you experienced condom breakage?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"experienceCondomBreakage\"\r\n                                        id=\"experienceCondomBreakage\"\r\n                                        value={riskAssessment.experienceCondomBreakage}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.experienceCondomBreakage !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.experienceCondomBreakage}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you taken part in sexual orgy?\r\n\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"takenPartInSexualOrgy\"\r\n                                        id=\"takenPartInSexualOrgy\"\r\n                                        value={riskAssessment.takenPartInSexualOrgy}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.takenPartInSexualOrgy !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.takenPartInSexualOrgy}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Personal HIV Risk assessment score (sum of all 7 answers)</h4>\r\n                                <b>Score : {riskCount.length}</b>\r\n                            </Message>\r\n                            <hr />\r\n                            <br />\r\n\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Sex Partner Risk Assessment (Last 3 months)</div>\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who is HIV positive?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithHIVPositive\"\r\n                                        id=\"haveSexWithHIVPositive\"\r\n                                        value={riskAssessmentPartner.haveSexWithHIVPositive}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithHIVPositive !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithHIVPositive}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who injects drugs?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerInjectDrug\"\r\n                                        id=\"haveSexWithPartnerInjectDrug\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerInjectDrug}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerInjectDrug !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerInjectDrug}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who has sex with men?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerWhoHasSexWithMen\"\r\n                                        id=\"haveSexWithPartnerWhoHasSexWithMen\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerWhoHasSexWithMen}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerWhoHasSexWithMen !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerWhoHasSexWithMen}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who is a transgender person?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerTransgender\"\r\n                                        id=\"haveSexWithPartnerTransgender\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerTransgender}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerTransgender !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerTransgender}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who has sex with multiple partners without condoms?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexWithPartnersWithoutCondoms\"\r\n                                        id=\"sexWithPartnersWithoutCondoms\"\r\n                                        value={riskAssessmentPartner.sexWithPartnersWithoutCondoms}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.sexWithPartnersWithoutCondoms !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sexWithPartnersWithoutCondoms}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <Message warning>\r\n                                <h4>Sex Partner Risk Assessment score (sum of all 6 answers)</h4>\r\n                                <b>Score: {sexPartRiskCount.length}</b>\r\n                            </Message>\r\n\r\n                            <hr />\r\n                            <br />\r\n\r\n                            <div\r\n                                className=\"form-group col-md-12 text-center p-2 mb-4\"\r\n                                style={{ backgroundColor: '#014D88', width: '125%', color: '#fff', fontWeight: 'bold' }}\r\n                            >\r\n                                Assessment for PEP Indication\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            In the past 72 hours, have you had sex without a condom with someone whose HIV status is positive or not known to you?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        id=\"unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        value={assessmentForPepIndication?.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours}\r\n                                        onChange={handleInputChangeAssessmentForPepIndication}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you shared injection equipment like needles with someone whose HIV status is positive or unknown to you?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        id=\"sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        value={assessmentForPepIndication?.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours}\r\n                                        onChange={handleInputChangeAssessmentForPepIndication}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }}  >Assessment for Acute HIV Infection</div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            In the past 2 weeks: Have you had a cold or flu such as fever, sore throat, abnormal sweats, swollen lymph nodes, mouth sores, headache or rash?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"acuteHivSymptomsLasttwoWeeks\"\r\n                                        id=\"acuteHivSymptomsLasttwoWeeks\"\r\n                                        value={assessmentForAcuteHivInfection?.acuteHivSymptomsLasttwoWeeks}\r\n                                        onChange={handleInputChangeAssessmentForAcuteHivInfection}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.acuteHivSymptomsLasttwoWeeks !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.acuteHivSymptomsLasttwoWeeks}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had condomless anal or vaginal sex or shared injection materials and/or equipment in the past 28 days?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedAnalOrVaginalOrSharedNeedlesLast28Days\"\r\n                                        id=\"unprotectedAnalOrVaginalOrSharedNeedlesLast28Days\"\r\n                                        value={assessmentForAcuteHivInfection?.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days}\r\n                                        onChange={handleInputChangeAssessmentForAcuteHivInfection}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#000', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Drug Use History</div>\r\n                            <hr />\r\n                            <h3>Route of Administration</h3>\r\n                            <h4>\r\n                                    Do you use any of these drugs/substances ?\r\n                            </h4>\r\n                            <br />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Inject</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"inject\"\r\n                                            id=\"inject\"\r\n                                            value={drugHistory.inject}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.inject !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.inject}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Sniff</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"sniff\"\r\n                                            id=\"sniff\"\r\n                                            value={drugHistory.sniff}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.sniff !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.sniff}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Snort</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"Snort\"\r\n                                            id=\"Snort\"\r\n                                            value={drugHistory.fever}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.Snort !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.Snort}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Smoke</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"smoke\"\r\n                                            id=\"smoke\"\r\n                                            value={drugHistory.smoke}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.smoke !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.smoke}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Have you used drugs to enhance sexual performance ?\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"useDrugSexualPerformance\"\r\n                                            id=\"useDrugSexualPerformance\"\r\n                                            value={drugHistory.useDrugSexualPerformance}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.useDrugSexualPerformance !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.useDrugSexualPerformance}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Have you had HIV testing before ?\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivTestedBefore\"\r\n                                            id=\"hivTestedBefore\"\r\n                                            value={drugHistory.hivTestedBefore}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.hivTestedBefore !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivTestedBefore}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                {drugHistory.hivTestedBefore === \"true\" && (\r\n                                    <div className=\"form-group col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    When was your last test?\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"lastTest\"\r\n                                                id=\"lastTest\"\r\n                                                value={drugHistory.lastTest}\r\n                                                onChange={handleInputChangeDrugHistory}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"1 Month\">{\"<\"}1 Month</option>\r\n                                                <option value=\"1-3 Months\">1-3 Months</option>\r\n                                                <option value=\"4-6Months\">4-6 Months</option>\r\n                                                <option value=\"6Months\">{\">\"}6 months</option>\r\n                                            </select>\r\n                                            {errors.lastTest !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.lastTest}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                )}\r\n\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>HIV test result at visit <span style={{ color: \"red\" }}> *</span></Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivTestResultAtvisit\"\r\n                                            id=\"hivTestResultAtvisit\"\r\n                                            value={drugHistory.hivTestResultAtvisit}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"Positive\">Positive</option>\r\n                                            <option value=\"Negative\">Negative</option>\r\n                                        </select>\r\n                                        {errors.hivTestResultAtvisit !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivTestResultAtvisit}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Recommended for HIV Retest ?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"recommendHivRetest\"\r\n                                            id=\"recommendHivRetest\"\r\n                                            value={drugHistory.recommendHivRetest}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.recommendHivRetest !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.recommendHivRetest}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Tested in certain Clinical settings, such as STI clinics?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"clinicalSetting\"\r\n                                            id=\"clinicalSetting\"\r\n                                            value={drugHistory.clinicalSetting}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.clinicalSetting !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.clinicalSetting}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Report ongoing HIV risk behaviors?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"reportHivRisk\"\r\n                                            id=\"reportHivRisk\"\r\n                                            value={drugHistory.reportHivRisk}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.reportHivRisk !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.reportHivRisk}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Report a specific HIV exposure within the last 3 months\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivExposure\"\r\n                                            id=\"hivExposure\"\r\n                                            value={drugHistory.hivExposure}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.hivExposure !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivExposure}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#014D88', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Syndromic STI Screening</div>\r\n                            {props.patientDetail && props.patientDetail.personResponseDto.sex === 'Female' && (\r\n                                <>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of vaginal discharge or burning when urinating?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"vaginalDischarge\"\r\n                                                id=\"vaginalDischarge\"\r\n                                                value={stiScreening.vaginalDischarge}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.vaginalDischarge !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.vaginalDischarge}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\nComplaints of lower abdominal pains with or without vaginal discharge?\r\n\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"lowerAbdominalPains\"\r\n                                                id=\"lowerAbdominalPains\"\r\n                                                value={stiScreening.lowerAbdominalPains}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.lowerAbdominalPains !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.lowerAbdominalPains}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)}\r\n                            {props.patientObj.personResponseDto && props.patientDetail.personResponseDto.sex === 'Male' && (\r\n                                <>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of urethral discharge or burning when urinating?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"urethralDischarge\"\r\n                                                id=\"urethralDischarge\"\r\n                                                value={stiScreening.urethralDischarge}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.urethralDischarge !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.urethralDischarge}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of scrotal swelling and pain\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"complaintsOfScrotal\"\r\n                                                id=\"complaintsOfScrotal\"\r\n                                                value={stiScreening.complaintsOfScrotal}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.complaintsOfScrotal !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.complaintsOfScrotal}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of genital sore(s) or swollen inguinal lymph nodes with or without pains?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"complaintsGenitalSore\"\r\n                                                id=\"complaintsGenitalSore\"\r\n                                                value={stiScreening.complaintsGenitalSore}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.complaintsGenitalSore !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.complaintsGenitalSore}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)}\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Genital sore +/-pains?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"genitalScore\"\r\n                                        id=\"genitalScore\"\r\n                                        value={stiScreening.genitalScore}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.genitalScore !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.genitalScore}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Swollen iguinal lymph node +/-pains?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"swollenIguinal\"\r\n                                        id=\"swollenIguinal\"\r\n                                        value={stiScreening.swollenIguinal}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.swollenIguinal !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.swollenIguinal}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal pain on stooling?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analpain\"\r\n                                        id=\"analpain\"\r\n                                        value={stiScreening.analpain}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analpain !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analpain}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal itching?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analItching\"\r\n                                        id=\"analItching\"\r\n                                        value={stiScreening.analItching}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analItching !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analItching}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal discharge?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analDischarge\"\r\n                                        id=\"analDischarge\"\r\n                                        value={stiScreening.analDischarge}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analDischarge !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analDischarge}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of the STI screening. If {\">= \"}1, should be referred for STI test </h4>\r\n                                <b>Score :{stiCount.length}</b>\r\n                            </Message>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4 p-3\" style={{ backgroundColor: '#014D88', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Assessment for PrEP Eligibilty</div>\r\n\r\n                            <div className=\"col-md-6 p-3\">\r\n                                <div className=\"d-flex\">\r\n                                    <div style={{ flex: 1 }}>\r\n                                        <FormGroup>\r\n                                            <Label>HIV Negative: <span className=\"badge badge-info\">{`${drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0}`}</span> </Label>\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div style={{ flex: 1 }}>\r\n                                        <Label>HIV Risk Score &gt; 1: <span className=\"badge badge-info\">{`${riskCount.length > 0 ? 1 : 0}`}</span></Label>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {(is30AndAbove() && isFemale() === false) && <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>{`Has no proteinuria (>30 Years)`}</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hasNoProteinuria\"\r\n                                            id=\"hasNoProteinuria\"\r\n                                            value={assessmentForPrepEligibility?.hasNoProteinuria}\r\n                                            onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.hasNoProteinuria !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hasNoProteinuria}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>}\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            {`No history/signs & symptoms of Liver abnormalities (CAB-LA)`}\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOrSignsOfLiverAbnormalitiesCabLa\"\r\n                                        id=\"noHistoryOrSignsOfLiverAbnormalitiesCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOrSignsOfLiverAbnormalitiesCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOrSignsOfLiverAbnormalitiesCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`No history of PrEP drug interaction (CAB-LA)`}</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOfDrugToDrugInteractionCabLa\"\r\n                                        id=\"noHistoryOfDrugToDrugInteractionCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOfDrugToDrugInteractionCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOfDrugToDrugInteractionCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`No history of drug hypersensitivity (CAB-LA)`}</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOfDrugHypersensitivityCabLa\"\r\n                                        id=\"noHistoryOfDrugHypersensitivityCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOfDrugHypersensitivityCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOfDrugHypersensitivityCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of PrEP Eligibility. If {\">= \"}1 client is Eligible for PrEP.  (Score: Count Yes=1, No=0).</h4>\r\n                                {/* <b>Score :{stiCount.length}</b> */}\r\n                                <h5>{`HIV Negative: ${drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0}`}</h5>\r\n                                <h5>{`HIV risk score >=1 : ${riskCount.length > 0 ? 1 : 0}`}</h5>\r\n                                <h5>{`No signs & symptoms of acute HIV infection: ${getAcuteHivResult()}`}</h5>\r\n                                <h5>{`No Indication for PEP: ${getIndicationForPepResult()}`}</h5>\r\n                                {(is30AndAbove() && isFemale() === false) && <h5>{`Has no proteinuria: ${assessmentForPrepEligibility?.hasNoProteinuria === \"true\" ? 1 : 0}`}</h5>}\r\n\r\n                            </Message>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of PrEP Eligibility for CAB-LA regimen. If the following below =1 client is Eligible for CAB-LA. {`(Score: Count Yes=1, No=0)`}</h4>\r\n                                {/* <b>Score :{stiCount.length}</b> */}\r\n                                <h5>{`No history / signs & symptoms of Liver abnormalities (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa === \"true\" ? 1 : 0}`}</h5>\r\n                                <h5>{`No history of PrEP drug interaction (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa === \"true\" ? 1 : 0}`}</h5>\r\n                                <h5>{`No history of drug hypersensitivity (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa === \"true\" ? 1 : 0}`}</h5>\r\n\r\n                            </Message>\r\n                            {/* <Message warning>\r\n                                <h3>{`Final Prep Eligibility Score: ${getPrepEligibilityScore()}`}</h3>\r\n                            </Message> */}\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center mb-4 p-2\" style={{ backgroundColor: '#014D88', width: '125%', color: '#fff', fontWeight: 'bold' }} >Services Received by Client</div>\r\n                            <div className=\"form-group  col-md-4 \">\r\n                                <FormGroup>\r\n                                    <Label>Willing to commence PrEP</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"willingToCommencePrep\"\r\n                                        id=\"willingToCommencePrep\"\r\n                                        value={servicesReceivedByClient?.willingToCommencePrep}\r\n                                        onChange={handleInputChangeServicesReceivedByClient}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.willingToCommencePrep !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.willingToCommencePrep}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n\r\n                            {/* <Dropdown placeholder='Skills' fluid multiple selection options={reasonForDecline} /> */}\r\n                            {servicesReceivedByClient?.willingToCommencePrep === 'false' && <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Reasons for Declining PrEP</Label>\r\n                                    <Dropdown value={servicesReceivedByClient?.reasonsForDecline} placeholder='select reasons for decline' onChange={handleInputReasonsForDecline} fluid multiple selection options={reasonForDecline.map((each) => {\r\n                                        return { key: each.code, text: each.display, value: each.code }\r\n                                    })} />\r\n                                    {errors.reasonsForDecline !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.reasonsForDecline}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>}\r\n                            {(servicesReceivedByClient?.reasonsForDecline?.find((one) => one === \"REASON_PREP_DECLINED_OTHERS_(SPECIFY)\") !== (null || undefined)) && <div className=\"form-group  col-md-12 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`Other Reasons for Declining PrEP (Specify)`}</Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        name=\"otherReasonsForDecline\"\r\n                                        id=\"otherReasonsForDecline\"\r\n                                        value={servicesReceivedByClient?.otherReasonsForDecline}\r\n                                        onChange={handleInputChangeServicesReceivedByClient}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                    {errors.reasonsForDecline !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.reasonsForDecline}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>}\r\n\r\n\r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-12 p-3\">\r\n                                    {props.activeContent && props.activeContent.actionType === \"update\" ? (<>\r\n                                        <MatButton\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            hidden={disabledField}\r\n                                            className={classes.button}\r\n                                            startIcon={<SaveIcon />}\r\n                                            style={{ backgroundColor: \"#014d88\" }}\r\n                                            onClick={handleSubmit}\r\n                                            disabled={saving}\r\n                                        >\r\n                                            {!saving ? (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                            ) : (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                            )}\r\n                                        </MatButton>\r\n                                    </>) : (<>\r\n                                        <MatButton\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<SaveIcon />}\r\n                                            style={{ backgroundColor: \"#014d88\" }}\r\n                                            onClick={handleSubmit}\r\n                                            disabled={saving}\r\n                                        >\r\n                                            {!saving ? (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                            ) : (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                            )}\r\n                                        </MatButton>\r\n                                    </>)}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js",["251","252","253","254","255","256"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Card, CardBody, FormGroup, Label, Input } from \"reactstrap\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { url as baseUrl, token } from \"../../../api\";\nimport { useHistory } from \"react-router-dom\";\n//import {  Modal, Button } from \"react-bootstrap\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n//import { DateTimePicker } from \"react-widgets\";\nimport PhoneInput from \"react-phone-input-2\";\n// import momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport { Spinner } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    flexGrow: 1,\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PrEPRegistrationForm = (props) => {\n  ///const patientObj = props.patientObj;\n  const [entryPoint, setEntryPoint] = useState([]);\n  //let history = useHistory();\n  const classes = useStyles();\n  const [objValues, setObjValues] = useState({\n    dateEnrolled: \"\",\n    dateReferred: \"\",\n    extra: {},\n    personId: 0,\n    prepEligibilityUuid: \"\",\n    riskType: \"\",\n    supporterName: \"\",\n    supporterPhone: \"\",\n    supporterRelationshipType: \"\",\n    uniqueId: \"\",\n    hivTestingPoint: \"\",\n    dateOfLastHivNegativeTest: \"\",\n    targetGroup: \"\",\n  });\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [prepRisk, setPrepRisk] = useState([]);\n  const [relatives, setRelatives] = useState([]);\n  const [patientDto, setPatientDto] = useState();\n  const [disabledField, setSisabledField] = useState(false);\n  const [targetGroupValue, setTargetGroupValue] = useState(\"\");\n  useEffect(() => {\n    GetPatientDTOObj();\n    RELATIONSHIP();\n    PREP_RISK_TYPE();\n    EntryPoint();\n    if (\n      props.activeContent.id &&\n      props.activeContent.id !== \"\" &&\n      props.activeContent.id !== null\n    ) {\n      GetPatientPrepEnrollment(props.activeContent.id);\n      setSisabledField(\n        props.activeContent.actionType === \"view\" ? true : false\n      );\n    }\n    //GetPatientPrepEnrollment\n  }, []);\n  const getTargetGroupvalue = () => {\n    axios\n      .get(`${baseUrl}hts/persons/${props.patientObj.personId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data?.htsClientDtoList[0]?.targetGroup);\n        setTargetGroupValue(response.data?.htsClientDtoList[0]?.targetGroup);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const EntryPoint = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/HTS_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setEntryPoint(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const RELATIONSHIP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setRelatives(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const PREP_RISK_TYPE = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREP_RISK_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPrepRisk(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const GetPatientDTOObj = () => {\n    axios\n      .get(\n        `${baseUrl}prep/eligibility/open/patients/${props.patientObj.personId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        //console.log(response.data)\n        setPatientDto(response.data);\n        getTargetGroupvalue();\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const GetPatientPrepEnrollment = (id) => {\n    axios\n      .get(`${baseUrl}prep/enrollment/person/${props.patientObj.personId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data.find((x)=> x.id===id));\n        setObjValues(response.data.find((x) => x.id === id));\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n\n  const validate = () => {\n    let temp = { ...errors };\n    temp.dateEnrolled = objValues.dateEnrolled ? \"\" : \"This field is required\";\n    temp.dateReferred = objValues.dateReferred ? \"\" : \"This field is required\";\n    temp.riskType = objValues.riskType ? \"\" : \"This field is required\";\n    //temp.supporterName = objValues.supporterName ? \"\" : \"This field is required\"\n    //temp.supporterPhone = objValues.supporterPhone ? \"\" : \"This field is required\"\n    //temp.supporterRelationshipType = objValues.supporterRelationshipType ? \"\" : \"This field is required\"\n    temp.uniqueId = objValues.uniqueId ? \"\" : \"This field is required\";\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  /**** Submit Button Processing  */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      objValues.personId = props.patientObj.personId;\n      objValues.prepEligibilityUuid = patientDto.uuid;\n      objValues.targetGroup = targetGroupValue;\n      //console.log(\"prep\", objValues);\n      setSaving(true);\n      if (props.activeContent && props.activeContent.actionType) {\n        axios\n          .put(\n            `${baseUrl}prep-enrollment/${props.activeContent.id}`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n            props.patientObj.prepCount = \"1\";\n            props.PatientObject();\n            toast.success(\"Prep Enrollment save successful!\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\");\n          });\n      } else {\n        axios\n          .post(`${baseUrl}prep/enrollment`, objValues, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            props.patientObj.prepCount = \"1\";\n            toast.success(\"Prep Enrollment save successful!\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n            props.setActiveContent({\n              ...props.activeContent,\n              route: \"recent-history\",\n            });\n          })\n          .catch((error) => {\n            setSaving(false);\n            toast.error(\"Something went wrong\");\n          });\n      }\n    } else {\n      toast.error(\"All fields are required \", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Card>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h2>PrEP Enrollment </h2>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label for=\"uniqueId\">\n                    Unique Client's ID <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"uniqueId\"\n                    id=\"uniqueId\"\n                    onChange={handleInputChange}\n                    value={objValues.uniqueId}\n                    disabled={disabledField}\n                  />\n                  {errors.uniqueId !== \"\" ? (\n                    <span className={classes.error}>{errors.uniqueId}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label for=\"\">Partner ANC/Unique ART No </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"ancUniqueArtNo\"\n                    id=\"ancUniqueArtNo\"\n                    onChange={handleInputChange}\n                    value={objValues.ancUniqueArtNo}\n                    disabled={disabledField}\n                  />\n                  {errors.ancUniqueArtNo !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.ancUniqueArtNo}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date enrolled in PrEP{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyDown={(e)=>e.preventDefault()}\n                    name=\"dateEnrolled\"\n                    id=\"dateEnrolled\"\n                    value={objValues.dateEnrolled}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    min={\n                      patientDto && patientDto.visitDate\n                        ? patientDto.visitDate\n                        : \"\"\n                    }\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateEnrolled !== \"\" ? (\n                    <span className={classes.error}>{errors.dateEnrolled}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label for=\"entryPointId\">\n                    PrEP Risk Type <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"riskType\"\n                    id=\"riskType\"\n                    onChange={handleInputChange}\n                    value={objValues.riskType}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\"> Select</option>\n                    {prepRisk.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.riskType !== \"\" ? (\n                    <span className={classes.error}>{errors.riskType}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>HIV Testing Point </Label>\n                  <Input\n                    type=\"select\"\n                    name=\"hivTestingPoint\"\n                    id=\"hivTestingPoint\"\n                    onChange={handleInputChange}\n                    value={objValues.hivTestingPoint}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\"> Select</option>\n                    {entryPoint.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Date of last HIV Negative test</Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyDown={(e)=>e.preventDefault()}\n                    name=\"dateOfLastHivNegativeTest\"\n                    id=\"dateOfLastHivNegativeTest\"\n                    value={objValues.dateOfLastHivNegativeTest}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateOfLastHivNegativeTest !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateOfLastHivNegativeTest}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Date Referred for PrEP{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyDown={(e)=>e.preventDefault()}\n                    name=\"dateReferred\"\n                    id=\"dateReferred\"\n                    value={objValues.dateReferred}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    min={\n                      patientDto && patientDto.visitDate\n                        ? patientDto.visitDate\n                        : \"\"\n                    }\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    disabled={disabledField}\n                  />\n                  {errors.dateReferred !== \"\" ? (\n                    <span className={classes.error}>{errors.dateReferred}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>PrEP Supporter </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"supporterName\"\n                    id=\"supporterName\"\n                    value={objValues.supporterName}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={disabledField}\n                  />\n                  {errors.supporterName !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.supporterName}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>Relationship </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"select\"\n                    name=\"supporterRelationshipType\"\n                    id=\"supporterRelationshipType\"\n                    value={objValues.supporterRelationshipType}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={disabledField}\n                  >\n                    <option value=\"\"> Select</option>\n\n                    {relatives.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </Input>\n                  {errors.supporterRelationshipType !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.supporterRelationshipType}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-6\">\n                <FormGroup>\n                  <Label>PrEP Supporter Phone Number</Label>\n                  {/* <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"supporterPhone\"\n                                        id=\"supporterPhone\"\n                                        value={objValues.supporterPhone}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        //disabled={locationState.actionType==='update'? false : true}\n                                    /> */}\n                  <PhoneInput\n                    containerStyle={{\n                      width: \"100%\",\n                      border: \"1px solid #014D88\",\n                    }}\n                    inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                    country={\"ng\"}\n                    placeholder=\"(234)7099999999\"\n                    maxLength={5}\n                    name=\"supporterPhone\"\n                    id=\"supporterPhone\"\n                    masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                    value={objValues.supporterPhone}\n                    onChange={(e) => {\n                      checkPhoneNumberBasic(e, \"supporterPhone\");\n                    }}\n                    disabled={disabledField}\n                  />\n                  {errors.supporterPhone !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.supporterPhone}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n            </div>\n\n            {saving ? <Spinner /> : \"\"}\n            <br />\n            {props.activeContent &&\n            props.activeContent.actionType === \"update\" ? (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  hidden={disabledField}\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Updating...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            ) : (\n              <>\n                <MatButton\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  startIcon={<SaveIcon />}\n                  style={{ backgroundColor: \"#014d88\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                >\n                  {!saving ? (\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                  ) : (\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      Saving...\n                    </span>\n                  )}\n                </MatButton>\n              </>\n            )}\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default PrEPRegistrationForm;\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js",["257","258","259"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Dropdown, Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\n\r\n\r\nconst PatientnHistory = (props) => {\r\n\r\n    const [saving, setSaving] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n    const [record, setRecord] = useState(null)\r\n    \r\n    const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n        props.getPatientHistory()\r\n        if (props.activeContent.actionType === \"view\") {\r\n            props.getPatientHistory()\r\n        }\r\n    }, [props.patientObj.id, props.activeContent.actionType]);\r\n\r\n    const LoadViewPage = (row, action) => {\r\n        props.setActiveContent({ ...props.activeContent, route: 'consultation', id: row.id, actionType: action, activeTab: 'home' })\r\n    }\r\n    const LoadModal = (row) => {\r\n        toggle()\r\n        setRecord(row)\r\n    }\r\n    const LoadDeletePage = (row) => {\r\n        if (row.path === 'prep-eligibility') {\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n            axios\r\n                .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                   props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n        } else if (row.path === 'prep-clinic') {\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n                .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                   props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else if (row.path === 'prep-enrollment') {\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n                .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                   props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else if (row.path === 'prep-enrollment2') {\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n                .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setSaving(false)\r\n                    toast.success(\"Record Deleted Successfully\");\r\n                   props.getPatientHistory()\r\n                    toggle()\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    if (error.response && error.response.data) {\r\n                        let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                        toast.error(errorMessage);\r\n                    }\r\n                    else {\r\n                        toast.error(\"Something went wrong. Please try again...\");\r\n                    }\r\n                });\r\n\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <br />\r\n\r\n            <MaterialTable\r\n                icons={tableIcons}\r\n                title=\"Patient Clinic Visit History \"\r\n                columns={[\r\n                    { title: \"Visit Date\", field: \"date\" },\r\n                    {\r\n                        title: \"Regimen Given\",\r\n                        field: \"regimen\",\r\n                    },\r\n                    { title: \"Next Appointment\", field: \"nextAppointment\", filtering: false },\r\n                    { title: \"Actions\", field: \"actions\", filtering: false },\r\n                ]}\r\n                isLoading={props.loading}\r\n                data={props.recentActivities && props.recentActivities.map((row) => ({\r\n                    date: row.encounterDate,\r\n                    regimen: row.regimen,\r\n                    nextAppointment: row.nextAppointment,\r\n                    actions:\r\n\r\n                        <div>\r\n                            <Menu.Menu position='right'  >\r\n                                <Menu.Item >\r\n                                    <Button style={{ backgroundColor: 'rgb(153,46,98)' }} primary>\r\n                                        <Dropdown item text='Action'>\r\n\r\n                                            <Dropdown.Menu style={{ marginTop: \"10px\", }}>\r\n                                                <Dropdown.Item onClick={() => LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>\r\n                                                <Dropdown.Item onClick={() => LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>\r\n                                                <Dropdown.Item onClick={() => LoadModal(row)}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </Button>\r\n                                </Menu.Item>\r\n                            </Menu.Menu>\r\n                        </div>\r\n\r\n                }))}\r\n\r\n                options={{\r\n                    headerStyle: {\r\n                        backgroundColor: \"#014d88\",\r\n                        color: \"#fff\",\r\n                    },\r\n                    searchFieldStyle: {\r\n                        width: '200%',\r\n                        margingLeft: '250px',\r\n                    },\r\n                    filtering: false,\r\n                    exportButton: false,\r\n                    searchFieldAlignment: 'left',\r\n                    pageSizeOptions: [10, 20, 100],\r\n                    pageSize: 10,\r\n                    debounceInterval: 400\r\n                }}\r\n            />\r\n            <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered backdrop=\"static\">\r\n                <Modal.Header >\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Notification!\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => LoadDeletePage(record)} style={{ backgroundColor: \"red\", color: \"#fff\" }} disabled={saving}>{saving === false ? \"Yes\" : \"Deleting...\"}</Button>\r\n                    <Button onClick={toggle} style={{ backgroundColor: \"#014d88\", color: \"#fff\" }} disabled={saving}>No</Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatientnHistory;\r\n\r\n\r\n","C:\\Users\\ganiyat.yakub\\Lamisplus\\modules\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293"],{"ruleId":"294","severity":1,"message":"295","line":4,"column":41,"nodeType":"296","messageId":"297","endLine":4,"endColumn":47},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","severity":1,"message":"303","line":73,"column":9,"nodeType":"304","endLine":73,"endColumn":11,"suggestions":"305"},{"ruleId":"294","severity":1,"message":"306","line":3,"column":9,"nodeType":"296","messageId":"297","endLine":3,"endColumn":15},{"ruleId":"294","severity":1,"message":"307","line":10,"column":9,"nodeType":"296","messageId":"297","endLine":10,"endColumn":20},{"ruleId":"294","severity":1,"message":"308","line":11,"column":13,"nodeType":"296","messageId":"297","endLine":11,"endColumn":16},{"ruleId":"294","severity":1,"message":"309","line":23,"column":9,"nodeType":"296","messageId":"297","endLine":23,"endColumn":16},{"ruleId":"294","severity":1,"message":"310","line":27,"column":10,"nodeType":"296","messageId":"297","endLine":27,"endColumn":18},{"ruleId":"294","severity":1,"message":"311","line":121,"column":19,"nodeType":"296","messageId":"297","endLine":121,"endColumn":27},{"ruleId":"294","severity":1,"message":"312","line":123,"column":20,"nodeType":"296","messageId":"297","endLine":123,"endColumn":29},{"ruleId":"294","severity":1,"message":"313","line":126,"column":12,"nodeType":"296","messageId":"297","endLine":126,"endColumn":24},{"ruleId":"294","severity":1,"message":"314","line":126,"column":26,"nodeType":"296","messageId":"297","endLine":126,"endColumn":41},{"ruleId":"294","severity":1,"message":"315","line":136,"column":12,"nodeType":"296","messageId":"297","endLine":136,"endColumn":38},{"ruleId":"294","severity":1,"message":"316","line":137,"column":24,"nodeType":"296","messageId":"297","endLine":137,"endColumn":37},{"ruleId":"294","severity":1,"message":"317","line":138,"column":11,"nodeType":"296","messageId":"297","endLine":138,"endColumn":21},{"ruleId":"294","severity":1,"message":"318","line":161,"column":30,"nodeType":"296","messageId":"297","endLine":161,"endColumn":48},{"ruleId":"294","severity":1,"message":"319","line":192,"column":19,"nodeType":"296","messageId":"297","endLine":192,"endColumn":33},{"ruleId":"320","severity":1,"message":"321","line":192,"column":107,"nodeType":"322","messageId":"323","endLine":192,"endColumn":109},{"ruleId":"324","severity":1,"message":"325","line":209,"column":80,"nodeType":"326","messageId":"327","endLine":209,"endColumn":82},{"ruleId":"324","severity":1,"message":"325","line":210,"column":74,"nodeType":"326","messageId":"327","endLine":210,"endColumn":76},{"ruleId":"324","severity":1,"message":"325","line":211,"column":74,"nodeType":"326","messageId":"327","endLine":211,"endColumn":76},{"ruleId":"324","severity":1,"message":"325","line":212,"column":77,"nodeType":"326","messageId":"327","endLine":212,"endColumn":79},{"ruleId":"302","severity":1,"message":"328","line":247,"column":8,"nodeType":"304","endLine":247,"endColumn":61,"suggestions":"329"},{"ruleId":"294","severity":1,"message":"330","line":291,"column":11,"nodeType":"296","messageId":"297","endLine":291,"endColumn":42},{"ruleId":"324","severity":1,"message":"325","line":392,"column":28,"nodeType":"326","messageId":"327","endLine":392,"endColumn":30},{"ruleId":"324","severity":1,"message":"325","line":394,"column":35,"nodeType":"326","messageId":"327","endLine":394,"endColumn":37},{"ruleId":"324","severity":1,"message":"325","line":469,"column":49,"nodeType":"326","messageId":"327","endLine":469,"endColumn":51},{"ruleId":"324","severity":1,"message":"325","line":488,"column":69,"nodeType":"326","messageId":"327","endLine":488,"endColumn":71},{"ruleId":"324","severity":1,"message":"325","line":522,"column":49,"nodeType":"326","messageId":"327","endLine":522,"endColumn":51},{"ruleId":"294","severity":1,"message":"319","line":532,"column":19,"nodeType":"296","messageId":"297","endLine":532,"endColumn":33},{"ruleId":"320","severity":1,"message":"321","line":532,"column":83,"nodeType":"322","messageId":"323","endLine":532,"endColumn":85},{"ruleId":"324","severity":1,"message":"325","line":590,"column":67,"nodeType":"326","messageId":"327","endLine":590,"endColumn":69},{"ruleId":"294","severity":1,"message":"331","line":615,"column":23,"nodeType":"296","messageId":"297","endLine":615,"endColumn":31},{"ruleId":"294","severity":1,"message":"332","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":25},{"ruleId":"294","severity":1,"message":"333","line":1,"column":27,"nodeType":"296","messageId":"297","endLine":1,"endColumn":36},{"ruleId":"294","severity":1,"message":"334","line":4,"column":8,"nodeType":"296","messageId":"297","endLine":4,"endColumn":18},{"ruleId":"294","severity":1,"message":"335","line":23,"column":17,"nodeType":"296","messageId":"297","endLine":23,"endColumn":24},{"ruleId":"294","severity":1,"message":"336","line":23,"column":26,"nodeType":"296","messageId":"297","endLine":23,"endColumn":31},{"ruleId":"294","severity":1,"message":"337","line":92,"column":9,"nodeType":"296","messageId":"297","endLine":92,"endColumn":26},{"ruleId":"294","severity":1,"message":"338","line":97,"column":9,"nodeType":"296","messageId":"297","endLine":97,"endColumn":23},{"ruleId":"294","severity":1,"message":"339","line":102,"column":9,"nodeType":"296","messageId":"297","endLine":102,"endColumn":19},{"ruleId":"340","severity":1,"message":"341","line":4,"column":10,"nodeType":"342","messageId":"343","endLine":4,"endColumn":24,"fix":"344"},{"ruleId":"294","severity":1,"message":"345","line":25,"column":10,"nodeType":"296","messageId":"297","endLine":25,"endColumn":20},{"ruleId":"294","severity":1,"message":"346","line":33,"column":8,"nodeType":"296","messageId":"297","endLine":33,"endColumn":14},{"ruleId":"294","severity":1,"message":"347","line":64,"column":10,"nodeType":"296","messageId":"297","endLine":64,"endColumn":21},{"ruleId":"294","severity":1,"message":"348","line":65,"column":10,"nodeType":"296","messageId":"297","endLine":65,"endColumn":17},{"ruleId":"294","severity":1,"message":"332","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":25},{"ruleId":"294","severity":1,"message":"349","line":2,"column":16,"nodeType":"296","messageId":"297","endLine":2,"endColumn":21},{"ruleId":"294","severity":1,"message":"350","line":1,"column":38,"nodeType":"296","messageId":"297","endLine":1,"endColumn":44},{"ruleId":"294","severity":1,"message":"351","line":2,"column":9,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"352","line":2,"column":15,"nodeType":"296","messageId":"297","endLine":2,"endColumn":26},{"ruleId":"294","severity":1,"message":"353","line":2,"column":28,"nodeType":"296","messageId":"297","endLine":2,"endColumn":37},{"ruleId":"294","severity":1,"message":"354","line":2,"column":38,"nodeType":"296","messageId":"297","endLine":2,"endColumn":42},{"ruleId":"294","severity":1,"message":"355","line":3,"column":15,"nodeType":"296","messageId":"297","endLine":3,"endColumn":19},{"ruleId":"294","severity":1,"message":"356","line":3,"column":20,"nodeType":"296","messageId":"297","endLine":3,"endColumn":28},{"ruleId":"294","severity":1,"message":"357","line":3,"column":44,"nodeType":"296","messageId":"297","endLine":3,"endColumn":54},{"ruleId":"294","severity":1,"message":"358","line":7,"column":8,"nodeType":"296","messageId":"297","endLine":7,"endColumn":14},{"ruleId":"294","severity":1,"message":"359","line":13,"column":10,"nodeType":"296","messageId":"297","endLine":13,"endColumn":17},{"ruleId":"294","severity":1,"message":"360","line":15,"column":8,"nodeType":"296","messageId":"297","endLine":15,"endColumn":19},{"ruleId":"294","severity":1,"message":"361","line":19,"column":17,"nodeType":"296","messageId":"297","endLine":19,"endColumn":20},{"ruleId":"294","severity":1,"message":"362","line":20,"column":10,"nodeType":"296","messageId":"297","endLine":20,"endColumn":16},{"ruleId":"294","severity":1,"message":"363","line":20,"column":18,"nodeType":"296","messageId":"297","endLine":20,"endColumn":24},{"ruleId":"294","severity":1,"message":"364","line":20,"column":26,"nodeType":"296","messageId":"297","endLine":20,"endColumn":31},{"ruleId":"294","severity":1,"message":"365","line":20,"column":33,"nodeType":"296","messageId":"297","endLine":20,"endColumn":40},{"ruleId":"294","severity":1,"message":"366","line":22,"column":8,"nodeType":"296","messageId":"297","endLine":22,"endColumn":11},{"ruleId":"294","severity":1,"message":"367","line":23,"column":8,"nodeType":"296","messageId":"297","endLine":23,"endColumn":24},{"ruleId":"294","severity":1,"message":"368","line":24,"column":8,"nodeType":"296","messageId":"297","endLine":24,"endColumn":14},{"ruleId":"294","severity":1,"message":"369","line":25,"column":8,"nodeType":"296","messageId":"297","endLine":25,"endColumn":11},{"ruleId":"294","severity":1,"message":"370","line":26,"column":8,"nodeType":"296","messageId":"297","endLine":26,"endColumn":17},{"ruleId":"294","severity":1,"message":"371","line":29,"column":8,"nodeType":"296","messageId":"297","endLine":29,"endColumn":18},{"ruleId":"294","severity":1,"message":"372","line":38,"column":8,"nodeType":"296","messageId":"297","endLine":38,"endColumn":19},{"ruleId":"294","severity":1,"message":"373","line":115,"column":11,"nodeType":"296","messageId":"297","endLine":115,"endColumn":22},{"ruleId":"294","severity":1,"message":"374","line":119,"column":12,"nodeType":"296","messageId":"297","endLine":119,"endColumn":19},{"ruleId":"294","severity":1,"message":"348","line":120,"column":12,"nodeType":"296","messageId":"297","endLine":120,"endColumn":19},{"ruleId":"294","severity":1,"message":"375","line":123,"column":12,"nodeType":"296","messageId":"297","endLine":123,"endColumn":20},{"ruleId":"294","severity":1,"message":"376","line":129,"column":12,"nodeType":"296","messageId":"297","endLine":129,"endColumn":27},{"ruleId":"294","severity":1,"message":"377","line":131,"column":11,"nodeType":"296","messageId":"297","endLine":131,"endColumn":19},{"ruleId":"302","severity":1,"message":"378","line":191,"column":8,"nodeType":"304","endLine":191,"endColumn":10,"suggestions":"379"},{"ruleId":"294","severity":1,"message":"380","line":222,"column":11,"nodeType":"296","messageId":"297","endLine":222,"endColumn":27},{"ruleId":"294","severity":1,"message":"345","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":20},{"ruleId":"302","severity":1,"message":"381","line":34,"column":6,"nodeType":"304","endLine":34,"endColumn":33,"suggestions":"382"},{"ruleId":"294","severity":1,"message":"383","line":250,"column":12,"nodeType":"296","messageId":"297","endLine":250,"endColumn":26},{"ruleId":"324","severity":1,"message":"325","line":304,"column":61,"nodeType":"326","messageId":"327","endLine":304,"endColumn":63},{"ruleId":"340","severity":1,"message":"341","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":24,"fix":"384"},{"ruleId":"294","severity":1,"message":"345","line":28,"column":10,"nodeType":"296","messageId":"297","endLine":28,"endColumn":20},{"ruleId":"302","severity":1,"message":"385","line":66,"column":10,"nodeType":"304","endLine":66,"endColumn":31,"suggestions":"386"},{"ruleId":"294","severity":1,"message":"354","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"387","line":2,"column":15,"nodeType":"296","messageId":"297","endLine":2,"endColumn":18},{"ruleId":"294","severity":1,"message":"388","line":98,"column":12,"nodeType":"296","messageId":"297","endLine":98,"endColumn":25},{"ruleId":"302","severity":1,"message":"389","line":131,"column":8,"nodeType":"304","endLine":131,"endColumn":10,"suggestions":"390"},{"ruleId":"391","severity":1,"message":"392","line":199,"column":43,"nodeType":"393","messageId":"394","endLine":199,"endColumn":64,"fix":"395"},{"ruleId":"391","severity":1,"message":"396","line":200,"column":43,"nodeType":"393","messageId":"394","endLine":200,"endColumn":70,"fix":"397"},{"ruleId":"391","severity":1,"message":"398","line":208,"column":43,"nodeType":"393","messageId":"394","endLine":208,"endColumn":63,"fix":"399"},{"ruleId":"391","severity":1,"message":"400","line":209,"column":43,"nodeType":"393","messageId":"394","endLine":209,"endColumn":68,"fix":"401"},{"ruleId":"391","severity":1,"message":"402","line":210,"column":43,"nodeType":"393","messageId":"394","endLine":210,"endColumn":65,"fix":"403"},{"ruleId":"391","severity":1,"message":"404","line":215,"column":43,"nodeType":"393","messageId":"394","endLine":215,"endColumn":82,"fix":"405"},{"ruleId":"391","severity":1,"message":"406","line":221,"column":43,"nodeType":"393","messageId":"394","endLine":221,"endColumn":69,"fix":"407"},{"ruleId":"391","severity":1,"message":"408","line":222,"column":43,"nodeType":"393","messageId":"394","endLine":222,"endColumn":72,"fix":"409"},{"ruleId":"391","severity":1,"message":"410","line":228,"column":43,"nodeType":"393","messageId":"394","endLine":228,"endColumn":68,"fix":"411"},{"ruleId":"391","severity":1,"message":"412","line":229,"column":43,"nodeType":"393","messageId":"394","endLine":229,"endColumn":60,"fix":"413"},{"ruleId":"324","severity":1,"message":"325","line":243,"column":49,"nodeType":"326","messageId":"327","endLine":243,"endColumn":51},{"ruleId":"302","severity":1,"message":"414","line":138,"column":8,"nodeType":"304","endLine":138,"endColumn":10,"suggestions":"415"},{"ruleId":"391","severity":1,"message":"416","line":272,"column":42,"nodeType":"393","messageId":"394","endLine":272,"endColumn":62,"fix":"417"},{"ruleId":"324","severity":1,"message":"325","line":295,"column":49,"nodeType":"326","messageId":"327","endLine":295,"endColumn":51},{"ruleId":"302","severity":1,"message":"418","line":58,"column":48,"nodeType":"304","endLine":58,"endColumn":50,"suggestions":"419"},{"ruleId":"294","severity":1,"message":"354","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"387","line":2,"column":15,"nodeType":"296","messageId":"297","endLine":2,"endColumn":18},{"ruleId":"294","severity":1,"message":"351","line":13,"column":11,"nodeType":"296","messageId":"297","endLine":13,"endColumn":16},{"ruleId":"294","severity":1,"message":"368","line":13,"column":18,"nodeType":"296","messageId":"297","endLine":13,"endColumn":24},{"ruleId":"294","severity":1,"message":"420","line":15,"column":10,"nodeType":"296","messageId":"297","endLine":15,"endColumn":24},{"ruleId":"294","severity":1,"message":"346","line":18,"column":8,"nodeType":"296","messageId":"297","endLine":18,"endColumn":14},{"ruleId":"294","severity":1,"message":"421","line":59,"column":9,"nodeType":"296","messageId":"297","endLine":59,"endColumn":16},{"ruleId":"294","severity":1,"message":"422","line":64,"column":24,"nodeType":"296","messageId":"297","endLine":64,"endColumn":37},{"ruleId":"294","severity":1,"message":"423","line":65,"column":23,"nodeType":"296","messageId":"297","endLine":65,"endColumn":35},{"ruleId":"294","severity":1,"message":"424","line":67,"column":12,"nodeType":"296","messageId":"297","endLine":67,"endColumn":22},{"ruleId":"294","severity":1,"message":"425","line":69,"column":12,"nodeType":"296","messageId":"297","endLine":69,"endColumn":23},{"ruleId":"294","severity":1,"message":"426","line":89,"column":11,"nodeType":"296","messageId":"297","endLine":89,"endColumn":25},{"ruleId":"294","severity":1,"message":"427","line":97,"column":11,"nodeType":"296","messageId":"297","endLine":97,"endColumn":19},{"ruleId":"324","severity":1,"message":"325","line":104,"column":49,"nodeType":"326","messageId":"327","endLine":104,"endColumn":51},{"ruleId":"294","severity":1,"message":"428","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":28},{"ruleId":"294","severity":1,"message":"354","line":3,"column":54,"nodeType":"296","messageId":"297","endLine":3,"endColumn":58},{"ruleId":"294","severity":1,"message":"429","line":5,"column":16,"nodeType":"296","messageId":"297","endLine":5,"endColumn":24},{"ruleId":"294","severity":1,"message":"430","line":5,"column":26,"nodeType":"296","messageId":"297","endLine":5,"endColumn":37},{"ruleId":"294","severity":1,"message":"431","line":5,"column":39,"nodeType":"296","messageId":"297","endLine":5,"endColumn":55},{"ruleId":"294","severity":1,"message":"432","line":5,"column":57,"nodeType":"296","messageId":"297","endLine":5,"endColumn":66},{"ruleId":"294","severity":1,"message":"433","line":14,"column":19,"nodeType":"296","messageId":"297","endLine":14,"endColumn":30},{"ruleId":"294","severity":1,"message":"368","line":14,"column":32,"nodeType":"296","messageId":"297","endLine":14,"endColumn":38},{"ruleId":"294","severity":1,"message":"358","line":14,"column":49,"nodeType":"296","messageId":"297","endLine":14,"endColumn":55},{"ruleId":"294","severity":1,"message":"434","line":20,"column":8,"nodeType":"296","messageId":"297","endLine":20,"endColumn":29},{"ruleId":"294","severity":1,"message":"435","line":22,"column":10,"nodeType":"296","messageId":"297","endLine":22,"endColumn":15},{"ruleId":"302","severity":1,"message":"436","line":141,"column":15,"nodeType":"322","endLine":152,"endColumn":6},{"ruleId":"302","severity":1,"message":"437","line":152,"column":8,"nodeType":"304","endLine":152,"endColumn":26,"suggestions":"438"},{"ruleId":"294","severity":1,"message":"439","line":391,"column":12,"nodeType":"296","messageId":"297","endLine":391,"endColumn":27},{"ruleId":"294","severity":1,"message":"440","line":391,"column":29,"nodeType":"296","messageId":"297","endLine":391,"endColumn":47},{"ruleId":"294","severity":1,"message":"441","line":518,"column":12,"nodeType":"296","messageId":"297","endLine":518,"endColumn":28},{"ruleId":"294","severity":1,"message":"442","line":519,"column":14,"nodeType":"296","messageId":"297","endLine":519,"endColumn":34},{"ruleId":"302","severity":1,"message":"443","line":545,"column":44,"nodeType":"304","endLine":545,"endColumn":46,"suggestions":"444"},{"ruleId":"445","severity":1,"message":"446","line":669,"column":65,"nodeType":"447","messageId":"448","endLine":669,"endColumn":67},{"ruleId":"445","severity":1,"message":"446","line":669,"column":103,"nodeType":"447","messageId":"448","endLine":669,"endColumn":105},{"ruleId":"294","severity":1,"message":"354","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"387","line":2,"column":16,"nodeType":"296","messageId":"297","endLine":2,"endColumn":19},{"ruleId":"294","severity":1,"message":"449","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":18},{"ruleId":"294","severity":1,"message":"450","line":12,"column":10,"nodeType":"296","messageId":"297","endLine":12,"endColumn":20},{"ruleId":"302","severity":1,"message":"451","line":129,"column":6,"nodeType":"304","endLine":129,"endColumn":8,"suggestions":"452"},{"ruleId":"324","severity":1,"message":"325","line":228,"column":47,"nodeType":"326","messageId":"327","endLine":228,"endColumn":49},{"ruleId":"340","severity":1,"message":"341","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":24,"fix":"453"},{"ruleId":"294","severity":1,"message":"454","line":56,"column":7,"nodeType":"296","messageId":"297","endLine":56,"endColumn":16},{"ruleId":"302","severity":1,"message":"455","line":113,"column":8,"nodeType":"304","endLine":113,"endColumn":61,"suggestions":"456"},{"ruleId":"294","severity":1,"message":"457","line":2,"column":32,"nodeType":"296","messageId":"297","endLine":2,"endColumn":36},{"ruleId":"294","severity":1,"message":"355","line":2,"column":38,"nodeType":"296","messageId":"297","endLine":2,"endColumn":42},{"ruleId":"294","severity":1,"message":"358","line":19,"column":8,"nodeType":"296","messageId":"297","endLine":19,"endColumn":14},{"ruleId":"294","severity":1,"message":"458","line":97,"column":10,"nodeType":"296","messageId":"297","endLine":97,"endColumn":20},{"ruleId":"294","severity":1,"message":"459","line":99,"column":10,"nodeType":"296","messageId":"297","endLine":99,"endColumn":19},{"ruleId":"294","severity":1,"message":"460","line":102,"column":10,"nodeType":"296","messageId":"297","endLine":102,"endColumn":24},{"ruleId":"294","severity":1,"message":"461","line":114,"column":10,"nodeType":"296","messageId":"297","endLine":114,"endColumn":32},{"ruleId":"302","severity":1,"message":"436","line":211,"column":13,"nodeType":"322","endLine":250,"endColumn":4},{"ruleId":"302","severity":1,"message":"462","line":250,"column":6,"nodeType":"304","endLine":250,"endColumn":17,"suggestions":"463"},{"ruleId":"302","severity":1,"message":"464","line":287,"column":6,"nodeType":"304","endLine":287,"endColumn":27,"suggestions":"465"},{"ruleId":"320","severity":1,"message":"321","line":329,"column":31,"nodeType":"322","messageId":"323","endLine":329,"endColumn":33},{"ruleId":"320","severity":1,"message":"321","line":330,"column":31,"nodeType":"322","messageId":"323","endLine":330,"endColumn":33},{"ruleId":"294","severity":1,"message":"466","line":466,"column":12,"nodeType":"296","messageId":"297","endLine":466,"endColumn":30},{"ruleId":"294","severity":1,"message":"467","line":517,"column":9,"nodeType":"296","messageId":"297","endLine":517,"endColumn":29},{"ruleId":"294","severity":1,"message":"468","line":556,"column":13,"nodeType":"296","messageId":"297","endLine":556,"endColumn":34},{"ruleId":"294","severity":1,"message":"469","line":559,"column":13,"nodeType":"296","messageId":"297","endLine":559,"endColumn":33},{"ruleId":"302","severity":1,"message":"470","line":566,"column":6,"nodeType":"304","endLine":566,"endColumn":29,"suggestions":"471"},{"ruleId":"302","severity":1,"message":"472","line":596,"column":6,"nodeType":"304","endLine":596,"endColumn":32,"suggestions":"473"},{"ruleId":"391","severity":1,"message":"474","line":762,"column":42,"nodeType":"393","messageId":"394","endLine":762,"endColumn":56,"fix":"475"},{"ruleId":"391","severity":1,"message":"476","line":771,"column":42,"nodeType":"393","messageId":"394","endLine":771,"endColumn":65,"fix":"477"},{"ruleId":"391","severity":1,"message":"476","line":773,"column":42,"nodeType":"393","messageId":"394","endLine":773,"endColumn":64,"fix":"478"},{"ruleId":"391","severity":1,"message":"479","line":779,"column":44,"nodeType":"393","messageId":"394","endLine":779,"endColumn":68,"fix":"480"},{"ruleId":"391","severity":1,"message":"476","line":781,"column":43,"nodeType":"393","messageId":"394","endLine":781,"endColumn":65,"fix":"481"},{"ruleId":"391","severity":1,"message":"482","line":808,"column":46,"nodeType":"393","messageId":"394","endLine":808,"endColumn":71,"fix":"483"},{"ruleId":"391","severity":1,"message":"482","line":810,"column":41,"nodeType":"393","messageId":"394","endLine":810,"endColumn":65,"fix":"484"},{"ruleId":"302","severity":1,"message":"485","line":911,"column":6,"nodeType":"304","endLine":911,"endColumn":38,"suggestions":"486"},{"ruleId":"294","severity":1,"message":"466","line":1140,"column":15,"nodeType":"296","messageId":"297","endLine":1140,"endColumn":33},{"ruleId":"294","severity":1,"message":"383","line":1152,"column":12,"nodeType":"296","messageId":"297","endLine":1152,"endColumn":26},{"ruleId":"294","severity":1,"message":"487","line":1170,"column":12,"nodeType":"296","messageId":"297","endLine":1170,"endColumn":23},{"ruleId":"302","severity":1,"message":"488","line":1215,"column":8,"nodeType":"304","endLine":1215,"endColumn":10,"suggestions":"489"},{"ruleId":"490","severity":1,"message":"491","line":1669,"column":15,"nodeType":"492","endLine":1669,"endColumn":45},{"ruleId":"324","severity":1,"message":"325","line":1701,"column":40,"nodeType":"326","messageId":"327","endLine":1701,"endColumn":42},{"ruleId":"324","severity":1,"message":"325","line":1705,"column":36,"nodeType":"326","messageId":"327","endLine":1705,"endColumn":38},{"ruleId":"324","severity":1,"message":"325","line":2234,"column":53,"nodeType":"326","messageId":"327","endLine":2234,"endColumn":55},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["493"],"no-negated-in-lhs",["494"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'PatientObject'. Either include it or remove the dependency array.","ArrayExpression",["495"],"'format' is defined but never used.","'yupResolver' is defined but never used.","'yup' is defined but never used.","'useForm' is defined but never used.","'getValue' is defined but never used.","'setToday' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'editRelative' is assigned a value but never used.","'setEditRelative' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setHideTargetGroup' is assigned a value but never used.","'actualcontacts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'basicInfo', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.",["496"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'response' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'classNames' is defined but never used.","'baseUrl' is defined but never used.","'token' is defined but never used.","'getHospitalNumber' is assigned a value but never used.","'getPhoneNumber' is assigned a value but never used.","'getAddress' is assigned a value but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"497","text":"498"},"'makeStyles' is defined but never used.","'moment' is defined but never used.","'patientList' is assigned a value but never used.","'loading' is assigned a value but never used.","'Popup' is defined but never used.","'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'Segment' is defined but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'Typography' is defined but never used.","'UpgradeIcon' is defined but never used.","'permissions' is assigned a value but never used.","'devices' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["499"],"'biometricFingers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'RecentActivities' and 'Summary'. Either include them or remove the dependency array.",["500"],"'joinActivities' is defined but never used.",{"range":"501","text":"498"},"React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["502"],"'Row' is defined but never used.","'disabledField' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientInterruption', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["503"],"no-useless-computed-key","Unnecessarily computed property ['reasonStopped'] found.","Property","unnecessarilyComputedProperty",{"range":"504","text":"505"},"Unnecessarily computed property ['reasonStoppedOthers'] found.",{"range":"506","text":"507"},"Unnecessarily computed property ['causeOfDeath'] found.",{"range":"508","text":"509"},"Unnecessarily computed property ['sourceOfDeathInfo'] found.",{"range":"510","text":"511"},"Unnecessarily computed property ['dateClientDied'] found.",{"range":"512","text":"513"},"Unnecessarily computed property ['dateRestartPlacedBackMedication'] found.",{"range":"514","text":"515"},"Unnecessarily computed property ['facilityReferredTo'] found.",{"range":"516","text":"517"},"Unnecessarily computed property ['dateClientReferredOut'] found.",{"range":"518","text":"519"},"Unnecessarily computed property ['dateSeroconverted'] found.",{"range":"520","text":"521"},"Unnecessarily computed property ['linkToArt'] found.",{"range":"522","text":"523"},"React Hook useEffect has missing dependencies: 'GetPatientCommercement', 'GetPatientDTOObj', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["524"],"Unnecessarily computed property ['datereferred'] found.",{"range":"525","text":"526"},"React Hook useEffect has a missing dependency: 'fetchListOfEncounters'. Either include it or remove the dependency array.",["527"],"'DateTimePicker' is defined but never used.","'history' is assigned a value but never used.","'setCarePoints' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'transferIn' is assigned a value but never used.","'ovcEnrolled' is assigned a value but never used.","'handleCheckBox' is assigned a value but never used.","'validate' is assigned a value but never used.","'useCallback' is defined but never used.","'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'LabelRibbon' is defined but never used.","'ReactReadMoreReadLess' is defined but never used.","'color' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'props.activeContent.actionType' and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["528"],"'assessmentScore' is assigned a value but never used.","'setAssessmentScore' is assigned a value but never used.","'recentActivities' is assigned a value but never used.","'countPrepEligibility' is defined but never used.","React Hook useEffect has a missing dependency: 'getRecentActivities'. Either include it or remove the dependency array.",["529"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'CancelIcon' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientPrepEnrollment', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["530"],{"range":"531","text":"498"},"'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["532"],"'List' is defined but never used.","'prepStatus' is assigned a value but never used.","'htsResult' is assigned a value but never used.","'labTestOptions' is assigned a value but never used.","'selectedPopulationType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hepatitisTest', 'syphilisTest', and 'urinalysisTest'. Either include them or remove the dependency array. You can also do a functional update 'setUrinalysisTest(u => ...)' if you only need 'urinalysisTest' in the 'setUrinalysisTest' call.",["533"],"React Hook useEffect has missing dependencies: 'GetLatestFromEligibility', 'GetPatientDTOObj', 'GetPatientVisit', 'PrepEligibilityObj', and 'TestGroup'. Either include them or remove the dependency array.",["534"],"'isEligibleForCABLA' is assigned a value but never used.","'LAST_HIV_TEST_RESULT' is assigned a value but never used.","'autoPopulateVisitType' is assigned a value but never used.","'autoPopulatePregnant' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'objValues', 'populationType', 'pregnant', and 'visitType'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["535"],"React Hook useEffect has a missing dependency: 'populationType'. Either include it or remove the dependency array.",["536"],"Unnecessarily computed property [\"others\"] found.",{"range":"537","text":"538"},"Unnecessarily computed property [\"syphilisTest\"] found.",{"range":"539","text":"540"},{"range":"541","text":"540"},"Unnecessarily computed property [\"hepatitisTest\"] found.",{"range":"542","text":"543"},{"range":"544","text":"540"},"Unnecessarily computed property [\"urinalysisTest\"] found.",{"range":"545","text":"546"},{"range":"547","text":"546"},"React Hook useEffect has a missing dependency: 'emptyObjValues'. Either include it or remove the dependency array.",["548"],"'isValidDate' is defined but never used.","React Hook useEffect has missing dependencies: 'getHIVresult' and 'getRecentActivities'. Either include them or remove the dependency array.",["549"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},[151,165],"token",{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},[180,194],{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},[6144,6161],"'reasonStopped'",[6211,6234],"'reasonStoppedOthers'",[6619,6635],"'causeOfDeath'",[6685,6706],"'sourceOfDeathInfo'",[6756,6774],"'dateClientDied'",[7058,7093],"'dateRestartPlacedBackMedication'",[7416,7438],"'facilityReferredTo'",[7488,7513],"'dateClientReferredOut'",[7824,7845],"'dateSeroconverted'",[7895,7908],"'linkToArt'",{"desc":"562","fix":"563"},[8580,8596],"'datereferred'",{"desc":"564","fix":"565"},{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},[184,198],{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},[22612,22622],"\"others\"",[22989,23005],"\"syphilisTest\"",[23073,23089],[23286,23303],"\"hepatitisTest\"",[23372,23388],[24131,24149],"\"urinalysisTest\"",[24216,24234],{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},"Update the dependencies array to be: [PatientObject]",{"range":"586","text":"587"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",{"range":"588","text":"589"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"590","text":"591"},"Update the dependencies array to be: [RecentActivities, Summary, props.patientObj.personId]",{"range":"592","text":"593"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"594","text":"595"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",{"range":"596","text":"597"},"Update the dependencies array to be: [GetPatientCommercement, GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",{"range":"598","text":"599"},"Update the dependencies array to be: [fetchListOfEncounters]",{"range":"600","text":"601"},"Update the dependencies array to be: [props.activeContent.actionType, props.activeContent.id, props.patientObj]",{"range":"602","text":"603"},"Update the dependencies array to be: [getRecentActivities]",{"range":"604","text":"605"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",{"range":"606","text":"607"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.actionType, props]",{"range":"608","text":"609"},"Update the dependencies array to be: [hepatitisTest, objValues, syphilisTest, urinalysisTest]",{"range":"610","text":"611"},"Update the dependencies array to be: [GetLatestFromEligibility, GetPatientDTOObj, GetPatientVisit, PrepEligibilityObj, TestGroup, props.activeContent]",{"range":"612","text":"613"},"Update the dependencies array to be: [latestFromEligibility, objValues, populationType, pregnant, visitType]",{"range":"614","text":"615"},"Update the dependencies array to be: [objValues.populationType, populationType]",{"range":"616","text":"617"},"Update the dependencies array to be: [emptyObjValues, props.activeContent.actionType]",{"range":"618","text":"619"},"Update the dependencies array to be: [getHIVresult, getRecentActivities]",{"range":"620","text":"621"},[2482,2484],"[PatientObject]",[10331,10384],"[patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",[6775,6777],"[clear_storelist, getPersonBiometrics]",[1182,1209],"[RecentActivities, Summary, props.patientObj.personId]",[3261,3282],"[PatientHistory, props.patientObj.id]",[3902,3904],"[GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",[4281,4283],"[GetPatientCommercement, GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",[1665,1667],"[fetchListOfEncounters]",[4949,4967],"[props.activeContent.actionType, props.activeContent.id, props.patientObj]",[21776,21778],"[getRecentActivities]",[3459,3461],"[GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",[4232,4285],"[props.patientObj.id, props.activeContent.actionType, props]",[7105,7116],"[hepatitisTest, objValues, syphilisTest, urinalysisTest]",[8053,8074],"[GetLatestFromEligibility, GetPatientDTOObj, GetPatientVisit, PrepEligibilityObj, TestGroup, props.activeContent]",[16251,16274],"[latestFromEligibility, objValues, populationType, pregnant, visitType]",[17220,17246],"[objValues.populationType, populationType]",[27621,27653],"[emptyObjValues, props.activeContent.actionType]",[37383,37385],"[getHIVresult, getRecentActivities]"]