[{"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js":"1","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js":"2","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js":"3","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js":"4","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js":"5","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"6","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js":"7","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"8","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js":"9","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"10","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js":"11","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"12","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js":"13","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js":"14","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js":"15","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js":"16","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js":"17","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js":"18","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js":"19","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js":"20","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js":"21","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js":"22","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js":"23"},{"size":753,"mtime":1727952123286,"results":"24","hashOfConfig":"25"},{"size":1373,"mtime":1725959623826,"results":"26","hashOfConfig":"25"},{"size":9235,"mtime":1723964180850,"results":"27","hashOfConfig":"25"},{"size":1951,"mtime":1725987415163,"results":"28","hashOfConfig":"25"},{"size":121505,"mtime":1725987415191,"results":"29","hashOfConfig":"25"},{"size":5998,"mtime":1726780008749,"results":"30","hashOfConfig":"25"},{"size":3056,"mtime":1723964180851,"results":"31","hashOfConfig":"25"},{"size":9282,"mtime":1725987415177,"results":"32","hashOfConfig":"25"},{"size":5335,"mtime":1723964185980,"results":"33","hashOfConfig":"25"},{"size":7690,"mtime":1726801076917,"results":"34","hashOfConfig":"25"},{"size":40515,"mtime":1727952122589,"results":"35","hashOfConfig":"25"},{"size":14068,"mtime":1726313074477,"results":"36","hashOfConfig":"25"},{"size":20376,"mtime":1727952123298,"results":"37","hashOfConfig":"25"},{"size":119177,"mtime":1727952123316,"results":"38","hashOfConfig":"25"},{"size":47648,"mtime":1727952123304,"results":"39","hashOfConfig":"25"},{"size":2919,"mtime":1726154201729,"results":"40","hashOfConfig":"25"},{"size":22402,"mtime":1727952122599,"results":"41","hashOfConfig":"25"},{"size":15235,"mtime":1727952123321,"results":"42","hashOfConfig":"25"},{"size":30760,"mtime":1727952123310,"results":"43","hashOfConfig":"25"},{"size":105949,"mtime":1727952123293,"results":"44","hashOfConfig":"25"},{"size":13086,"mtime":1727952177134,"results":"45","hashOfConfig":"25"},{"size":483,"mtime":1727952123289,"results":"46","hashOfConfig":"25"},{"size":375,"mtime":1727952123323,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1omqb29",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":10,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":7,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\index.js",[],["108","109"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\App.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Home.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\UpdatePatientEnrollment.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {format} from 'date-fns';\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label, Spinner,Input,Form} from \"reactstrap\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faCheckSquare, faCoffee, faEdit, faTrash} from '@fortawesome/free-solid-svg-icons'\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\nimport {TiArrowBack} from 'react-icons/ti'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {token, url as baseUrl } from \"../../../api\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { getValue } from \"@syncfusion/ej2-base\";\r\nimport  './patient.css'\r\n// import Form from 'react-bootstrap/Form';\r\n\r\n\r\n\r\nlibrary.add(faCheckSquare, faCoffee, faEdit, faTrash);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        maxWidth: 752,\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst UserRegistration = (props) => {\r\n    console.log(props)\r\n    const [basicInfo, setBasicInfo]= useState(\r\n            {\r\n                active: true,\r\n                address: [],\r\n                contact: [],\r\n                contactPoint: [],\r\n                dateOfBirth: \"\",\r\n                deceased: false,\r\n                deceasedDateTime: null,\r\n                firstName: \"\",\r\n                genderId: \"\",\r\n                identifier: \"\",\r\n                otherName: \"\",\r\n                maritalStatusId: \"\",\r\n                educationId: \"\",\r\n                employmentStatusId:\"\",\r\n                dateOfRegistration: \"\",\r\n                isDateOfBirthEstimated: null,\r\n                age:\"\",\r\n                phoneNumber:\"\",\r\n                altPhonenumber:\"\",\r\n                dob:\"\",\r\n                countryId:\"\",\r\n                stateId:\"\",\r\n                district:\"\",\r\n                landmark:\"\",\r\n                sexId:\"\",\r\n                ninNumber:\"\"\r\n\r\n            }\r\n    )\r\n    const [relatives, setRelatives]= useState(\r\n                { \r\n                    address:\"\",\r\n                    phone:\"\",\r\n                    firstName: \"\",\r\n                    email: \"\",\r\n                    relationshipId: \"\",\r\n                    lastName: \"\",\r\n                    middleName: \"\"\r\n                }\r\n        )\r\n\r\n    const [today, setToday] = useState(new Date().toISOString().substr(0, 10).replace('T', ' '));\r\n    const [contacts, setContacts] = useState([]);\r\n    const [saving, setSaving] = useState(false);\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [showRelative, setShowRelative] = useState(false);\r\n    const [editRelative, setEditRelative] = useState(null);\r\n    const [genders, setGenders]= useState([]);\r\n    const [maritalStatusOptions, setMaritalStatusOptions]= useState([]);\r\n    const [educationOptions, setEducationOptions]= useState([]);\r\n    const [occupationOptions, setOccupationOptions]= useState([]);\r\n    const [relationshipOptions, setRelationshipOptions]= useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [errors, setErrors] = useState({})\r\n    const [topLevelUnitCountryOptions, settopLevelUnitCountryOptions]= useState([]);\r\n    const [patientDTO, setPatientDTO]= useState({\"person\":\"\", \"hivEnrollment\":\"\"})\r\n    const userDetail = props.location && props.location.state ? props.location.state.user : null;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n     //HIV INFORMATION\r\n     const [femaleStatus, setfemaleStatus]= useState(false)\r\n     //const [values, setValues] = useState([]);\r\n     const [objValues, setObjValues] = useState({id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",dateConfirmedHiv:\"\",sourceOfReferrerId:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\",\r\n     householdNumber:\"\", referredToOVCPartner:\"\", dateReferredToOVCPartner:\"\",\r\n     referredFromOVCPartner:\"\", dateReferredFromOVCPartner:\"\",\r\n     careEntryPointOther:\"\"});\r\n     const [carePoints, setCarePoints] = useState([]);\r\n     const [sourceReferral, setSourceReferral] = useState([]);\r\n     const [hivStatus, setHivStatus] = useState([]);\r\n     const [enrollSetting, setEnrollSetting] = useState([]);\r\n     const [tbStatus, setTbStatus] = useState([]);\r\n     const [kP, setKP] = useState([]);\r\n     const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n     //set ro show the facility name field if is transfer in \r\n     const [transferIn, setTransferIn] = useState(false);\r\n     // display the OVC number if patient is enrolled into OVC \r\n     const [ovcEnrolled, setOvcEnrolled] = useState(false);\r\n     //Input fields to hidden base on some conditions\r\n     const [hideTargetGroup, setHideTargetGroup]= useState(\"false\");\r\n    \r\n    const locationState = location.state;\r\n    let patientId = null;\r\n    let patientObj = {};\r\n    patientId = locationState ? locationState.patientId : null;\r\n    patientObj = locationState ? locationState.patientObj : {}; \r\n    //status for hospital Number \r\n    const [hospitalNumStatus, setHospitalNumStatus]= useState(false);\r\n    const [hospitalNumStatus2, setHospitalNumStatus2]= useState(false);\r\n    \r\n    useEffect(() => { \r\n        loadGenders();\r\n        loadMaritalStatus();\r\n        loadEducation();\r\n        loadOccupation();\r\n        loadRelationships();\r\n        loadTopLevelCountry();        \r\n        CareEntryPoint();\r\n        SourceReferral();\r\n        HivStatus();\r\n        EnrollmentSetting();\r\n        TBStatus();\r\n        KP();\r\n        PregnancyStatus();\r\n        GetCountry();\r\n        if(patientObj){\r\n            const contacts = patientObj.contact ? patientObj.contact : [];\r\n            //setContacts(contacts.contact);\r\n            let newConatctsInfo=[]\r\n            //Manipulate relatives contact  address:\"\",\r\n            const actualcontacts=contacts.contact && contacts.contact.length>0 && contacts.contact.map((x)=>{ \r\n                const contactInfo = \r\n                    { \r\n                        address:x.address.line[0],\r\n                        phone:x.contactPoint.value,\r\n                        firstName:x.firstName,\r\n                        email: \"\",\r\n                        relationshipId: x.relationshipId,\r\n                        lastName: x.surname,\r\n                        middleName: x.otherName\r\n                    }\r\n                newConatctsInfo.push(contactInfo)\r\n            })\r\n            setContacts(newConatctsInfo);\r\n            const identifiers = patientObj.identifier;\r\n            const address = patientObj.address;\r\n            const contactPoint = patientObj.contactPoint;\r\n            const hospitalNumber = identifiers.identifier.find(obj => obj.type == 'HospitalNumber');\r\n            const phone = contactPoint.contactPoint.find(obj => obj.type == 'phone');\r\n            const email = contactPoint.contactPoint.find(obj => obj.type == 'email');\r\n            const altphone = contactPoint.contactPoint.find(obj => obj.type == 'altphone');\r\n            const country = address && address.address && address.address.length > 0 ? address.address[0] : null;\r\n            //setValue('dob', format(new Date(patientObj.dateOfBirth), 'yyyy-MM-dd'));\r\n            basicInfo.dob=patientObj.dateOfBirth\r\n            basicInfo.firstName=patientObj.firstName\r\n            basicInfo.dateOfRegistration=patientObj.dateOfRegistration\r\n            basicInfo.middleName=patientObj.otherName\r\n            basicInfo.lastName=patientObj.surname\r\n            basicInfo.hospitalNumber=hospitalNumber ? hospitalNumber.value : ''\r\n            basicInfo.maritalStatusId=patientObj.maritalStatus.id\r\n            basicInfo.employmentStatusId=patientObj.employmentStatus.id\r\n            basicInfo.genderId=patientObj.gender ? patientObj.gender.id : null\r\n            basicInfo.sexId=patientObj.sex \r\n            basicInfo.educationId=patientObj.education.id\r\n            basicInfo.phoneNumber=phone && phone.value ? phone.value : \"\"\r\n            basicInfo.altPhonenumber= altphone && altphone.value ? altphone.value : \"\"\r\n            basicInfo.email=email && email.value ? email.value : \"\"\r\n            basicInfo.address=country && country.city ? country.city : \"\"\r\n            basicInfo.landmark=country.line[0]\r\n            basicInfo.countryId=country.countryId\r\n            setStateByCountryId(country.countryId); \r\n            getProvincesId(country.stateId)\r\n            basicInfo.stateId=country.stateId\r\n            basicInfo.district=country.district\r\n            setObjValues(patientObj.enrollment)\r\n            const patientAge=calculate_age(moment(patientObj.dateOfBirth).format(\"DD-MM-YYYY\"))\r\n            basicInfo.age=patientAge\r\n            setfemaleStatus(patientObj.sex==='Female'? true : false)\r\n            basicInfo.ninNumber=patientObj.ninNumber\r\n\r\n        }\r\n        if(basicInfo.dateOfRegistration < basicInfo.dob){\r\n            alert('Date of registration can not be earlier than date of birth')\r\n        }\r\n        \r\n    }, [patientObj, patientId, basicInfo.dateOfRegistration]);\r\n\r\n    const loadGenders = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setGenders(response.data);\r\n        } catch (e) {\r\n            \r\n        }\r\n    }, []);\r\n    const loadMaritalStatus = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setMaritalStatusOptions(response.data);\r\n        } catch (e) {\r\n        }\r\n    }, []);\r\n    const loadEducation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/EDUCATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setEducationOptions(response.data);\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const loadOccupation = useCallback(async () => {\r\n        try {\r\n            const response = await axios.get(`${baseUrl}application-codesets/v2/OCCUPATION`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n            setOccupationOptions(response.data);\r\n        } catch (e) {\r\n\r\n        }\r\n    }, []);\r\n    const loadRelationships = useCallback(async () => {\r\n      try {\r\n          const response = await axios.get(`${baseUrl}application-codesets/v2/RELATIONSHIP`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n          setRelationshipOptions(response.data);\r\n      } catch (e) {\r\n      }\r\n    }, []);\r\n    const loadTopLevelCountry = useCallback(async () => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/0`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        settopLevelUnitCountryOptions(response.data);\r\n    }, []);\r\n    const loadOrganisationUnitsByParentId = async (parentId) => {\r\n        const response = await axios.get(`${baseUrl}organisation-units/parent-organisation-units/${parentId}`, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n        return response.data;\r\n    };\r\n\r\n    //Country List\r\n      const GetCountry =()=>{\r\n        axios\r\n        .get(`${baseUrl}organisation-units/parent-organisation-units/0`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setCountries(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });        \r\n    }\r\n    //Calculate Date of birth \r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now ;\r\n      };\r\n     //Get States from selected country\r\n     const getStates = e => {\r\n        const getCountryId =e.target.value;\r\n\r\n            setStateByCountryId(getCountryId); \r\n            setBasicInfo({ ...basicInfo, countryId: getCountryId });\r\n    };\r\n    //Get list of State\r\n    function setStateByCountryId(getCountryId) {\r\n        axios\r\n        .get(`${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setStates(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });  \r\n    }\r\n    \r\n     //fetch province\r\n     const getProvinces = e => {\r\n            const stateId = e.target.value;\r\n            setBasicInfo({ ...basicInfo, stateId: e.target.value });\r\n            axios\r\n            .get(`${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setProvinces(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });  \r\n    };\r\n    function getProvincesId(getStateId) {\r\n        axios\r\n        .get(`${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setProvinces(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });  \r\n    }\r\n    //Date of Birth and Age handle \r\n    const handleDobChange = (e) => {\r\n        if (e.target.value) {\r\n            const today = new Date();\r\n            const birthDate = new Date(e.target.value);\r\n            let age_now = today.getFullYear() - birthDate.getFullYear();\r\n            const m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n            basicInfo.age=age_now\r\n            //setBasicInfo({...basicInfo, age: age_now});        \r\n        } else {\r\n            setBasicInfo({...basicInfo, age:  \"\"});\r\n        }\r\n        setBasicInfo({...basicInfo, dob: e.target.value});\r\n        \r\n    }\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value == \"Actual\") {\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value == \"Estimated\") {\r\n            setAgeDisabled(false);\r\n        }\r\n    }\r\n    const handleAgeChange = (e) => {\r\n        if (!ageDisabled && e.target.value) {\r\n            \r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add((e.target.value * -1), 'years');\r\n            //setBasicInfo({...basicInfo, dob: moment(dobNew).format(\"YYYY-MM-DD\")});\r\n            basicInfo.dob =moment(dobNew).format(\"YYYY-MM-DD\")\r\n\r\n        }\r\n        setBasicInfo({...basicInfo, age: e.target.value});\r\n    }\r\n    //End of Date of Birth and Age handling \r\n    //Handle Input Change for Basic Infor\r\n    const handleInputChangeBasic = e => {        \r\n        setBasicInfo ({...basicInfo,  [e.target.name]: e.target.value}); \r\n        //manupulate inpute fields base on gender/sex \r\n        if(e.target.name==='sexId' && e.target.value==='Female') {\r\n            setfemaleStatus(true)\r\n        }\r\n        if(e.target.name==='firstName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='lastName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='middleName' && e.target.value!==''){\r\n            const name = alphabetOnly(e.target.value)\r\n            setBasicInfo ({...basicInfo,  [e.target.name]: name});\r\n        }\r\n        if(e.target.name==='hospitalNumber' && e.target.value!==''){\r\n            async function getCharacters() {\r\n                const hosiptalNumber=e.target.value\r\n                const response = await axios.post(`${baseUrl}patient/exist/hospital-number`, hosiptalNumber,\r\n                        { headers: {\"Authorization\" : `Bearer ${token}`, 'Content-Type': 'text/plain'} }\r\n                    );\r\n                if(response.data!==true){\r\n                    setHospitalNumStatus(false)\r\n                    setObjValues ({...objValues,  uniqueId: e.target.value});\r\n                    setHospitalNumStatus2(true)\r\n                }else{\r\n                    setHospitalNumStatus(false)\r\n                    setHospitalNumStatus2(true)\r\n                }\r\n            }\r\n            getCharacters();\r\n            }  \r\n             \r\n    } \r\n    //Function to show relatives \r\n    const handleAddRelative = () => {\r\n        setShowRelative(true);\r\n    };\r\n    //Function to cancel the relatives form\r\n    const handleCancelSaveRelationship = () => {\r\n        setShowRelative(false);\r\n    }\r\n    const handleCancel =()=>{\r\n        history.push({ pathname: '/' });\r\n    }\r\n    /*****  Validation  Relationship Input*/\r\n    const validateRelatives = () => {\r\n        let temp = { ...errors }\r\n            temp.firstName = relatives.firstName ? \"\" : \"First Name is required\"\r\n            temp.lastName = relatives.lastName ? \"\" : \"Last Name  is required.\"\r\n            temp.relationshipId = relatives.relationshipId ? \"\" : \"Relationship Type is required.\"  \r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //Function to add relatives \r\n    const handleSaveRelationship = (e) => {\r\n        if(validateRelatives()){\r\n            setContacts([...contacts, relatives])\r\n        }\r\n\r\n    }\r\n    const handleDeleteRelative = (index) => {\r\n        contacts.splice(index, 1);\r\n        setContacts([...contacts]);\r\n    };\r\n    const handleEditRelative = (relative, index) => {\r\n        setRelatives(relative)\r\n        setShowRelative(true);\r\n        contacts.splice(index, 1); \r\n    };     \r\n    const getRelationship = (relationshipId) => {\r\n        const relationship = relationshipOptions.find(obj => obj.id == relationshipId);\r\n        return relationship ? relationship.display : '';\r\n    };\r\n    const handleInputChangeRelatives = e => {        \r\n        setRelatives ({...relatives,  [e.target.name]: e.target.value});               \r\n    }\r\n    /*****  Validation  */\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n            temp.firstName = basicInfo.firstName ? \"\" : \"First Name is required\"\r\n            temp.hospitalNumber = basicInfo.hospitalNumber ? \"\" : \"Hospital Number  is required.\"\r\n            //temp.middleName = basicInfo.middleName ? \"\" : \"Middle is required.\"\r\n            //temp.landmark = basicInfo.landmark ? \"\" : \"This field is required.\"\r\n            temp.lastName = basicInfo.lastName ? \"\" : \"Last Name  is required.\"\r\n            temp.sexId = basicInfo.sexId ? \"\" : \"Sex is required.\"\r\n            temp.dateOfRegistration1 = basicInfo.dateOfRegistration ? \"\" : \"Date of Registration is required.\"\r\n            temp.educationId = basicInfo.educationId ? \"\" : \"Education is required.\"\r\n            temp.address = basicInfo.address ? \"\" : \"Address is required.\"\r\n            temp.phoneNumber = basicInfo.phoneNumber ? \"\" : \"Phone Number  is required.\"\r\n            temp.countryId = basicInfo.countryId ? \"\" : \"Country is required.\"    \r\n            temp.stateId = basicInfo.stateId ? \"\" : \"State is required.\"  \r\n            temp.district = basicInfo.district ? \"\" : \"Province/LGA is required.\" \r\n            //HIV FORM VALIDATION\r\n            temp.targetGroupId = objValues.targetGroupId ? \"\" : \"Target group is required.\"\r\n            temp.dateConfirmedHiv = objValues.dateConfirmedHiv ? \"\" : \"date confirm HIV is required.\"\r\n            temp.sourceOfReferrerId = objValues.sourceOfReferrerId ? \"\" : \"Source of referrer is required.\"\r\n            temp.enrollmentSettingId = objValues.enrollmentSettingId ? \"\" : \"Enrollment Setting Number  is required.\"\r\n            temp.tbStatusId = objValues.tbStatusId ? \"\" : \"TB status is required.\"    \r\n            temp.statusAtRegistrationId = objValues.statusAtRegistrationId ? \"\" : \"Status at Registration is required.\"  \r\n            temp.entryPointId = objValues.entryPointId ? \"\" : \"Care Entry Point is required.\" \r\n            temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"Date of Registration is required.\"  \r\n            temp.uniqueId = objValues.uniqueId ? \"\" : \"Unique ID is required.\"\r\n            \r\n                setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault(); \r\n        const getSexId=  genders.find((x)=> x.display===basicInfo.sexId)//get patient sex ID by filtering the request\r\n        basicInfo.sexId=getSexId.id\r\n         if(validate()){\r\n            let newConatctsInfo=[]\r\n            //Manipulate relatives contact  address:\"\",\r\n            const actualcontacts=contacts && contacts.length>0 && contacts.map((x)=>{\r\n                \r\n                const contactInfo = { \r\n                address: {\r\n                    line: [\r\n                        x.address\r\n                    ],\r\n                },\r\n                contactPoint: {\r\n                    type: \"phone\",\r\n                    value: x.phone\r\n                },\r\n                firstName: x.firstName,\r\n                fullName: x.firstName + \" \" + x.middleName + \" \" + x.lastName,\r\n                relationshipId: x.relationshipId,\r\n                surname: x.lastName,\r\n                otherName: x.middleName\r\n            }\r\n            \r\n            newConatctsInfo.push(contactInfo)\r\n            })\r\n            try {\r\n                const patientForm = {\r\n                    active: true,\r\n                    address: [\r\n                        {\r\n                            \"city\": basicInfo.address,\r\n                            \"countryId\": basicInfo.countryId,\r\n                            \"district\": basicInfo.district,\r\n                            \"line\": [\r\n                                basicInfo.landmark\r\n                            ],\r\n                            \"organisationUnitId\": 0,\r\n                            \"postalCode\": \"\",\r\n                            \"stateId\": basicInfo.stateId\r\n                        }\r\n                    ],\r\n                    contact: newConatctsInfo,\r\n                    contactPoint: [],\r\n                    dateOfBirth: basicInfo.dob,\r\n                    deceased: false,\r\n                    deceasedDateTime: null,\r\n                    firstName: basicInfo.firstName,\r\n                    genderId: basicInfo.genderId,\r\n                    sexId:basicInfo.sexId,\r\n                    identifier: [\r\n                        {\r\n                            \"assignerId\": 1,\r\n                            \"type\": \"HospitalNumber\",\r\n                            \"value\": basicInfo.hospitalNumber\r\n                        }\r\n                    ],\r\n                    otherName: basicInfo.middleName,\r\n                    maritalStatusId: basicInfo.maritalStatusId,\r\n                    surname: basicInfo.lastName,\r\n                    educationId: basicInfo.educationId,\r\n                    employmentStatusId: basicInfo.employmentStatusId,\r\n                    dateOfRegistration: basicInfo.dateOfRegistration,\r\n                    isDateOfBirthEstimated: basicInfo.dateOfBirth == \"Actual\" ? false : true,\r\n                    ninNumber: basicInfo.ninNumber\r\n                };\r\n                const phone = {\r\n                    \"type\": \"phone\",\r\n                    \"value\": basicInfo.phoneNumber\r\n                };\r\n                if (basicInfo.email) {\r\n                    const email = {\r\n                        \"type\": \"email\",\r\n                        \"value\": basicInfo.email\r\n                    }\r\n                    patientForm.contactPoint.push(email);\r\n                }\r\n                if (basicInfo.altPhonenumber) {\r\n                    const altPhonenumber = {\r\n                        \"type\": \"altphone\",\r\n                        \"value\": basicInfo.altPhonenumber\r\n                    }\r\n                    patientForm.contactPoint.push(altPhonenumber);\r\n                }\r\n                patientForm.contactPoint.push(phone);\r\n                patientForm.id = patientId;\r\n                patientDTO.person=patientForm;\r\n                patientDTO.hivEnrollment=objValues;\r\n                const response = await axios.put(`${baseUrl}hiv/patient/${patientObj.id}`, patientDTO, { headers: {\"Authorization\" : `Bearer ${token}`} });\r\n                toast.success(\"Patient Updated successful\");\r\n                history.push('/');\r\n            } catch (error) {                \r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage); \r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    const alphabetOnly=(value)=>{\r\n        const result = value.replace(/[^a-z]/gi, '');\r\n        return result\r\n    }\r\n   \r\n    const CareEntryPoint =()=>{\r\n            axios\r\n                .get(`${baseUrl}application-codesets/v2/POINT_ENTRY`,\r\n                    { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data);\r\n                    setCarePoints(response.data);\r\n                })\r\n                .catch((error) => {\r\n                //console.log(error);\r\n                });            \r\n    }\r\n    //Get list of Source of Referral\r\n    const SourceReferral =()=>{\r\n            axios\r\n            .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n                setSourceReferral(response.data);\r\n            })\r\n            .catch((error) => {\r\n            //console.log(error);\r\n            });        \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const HivStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/HIV_STATUS_ENROL`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setHivStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const EnrollmentSetting =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/ENROLLMENT_SETTING`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setEnrollSetting(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of HIV STATUS ENROLLMENT\r\n    const TBStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TB_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setTbStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const KP =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setKP(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //Get list of KP\r\n    const PregnancyStatus =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREGANACY_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            //console.log(response.data);\r\n            setPregnancyStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const handleInputChange = e => {        \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name ===\"entryPointId\" ){\r\n            if(e.target.value===\"21\"){\r\n                setTransferIn(true)\r\n            }else{\r\n                setTransferIn(false)\r\n            }\r\n        }\r\n        if(e.target.name ===\"pregnancyStatusId\" ){\r\n            console.log(e.target.value)\r\n            if(e.target.value===\"72\"){\r\n                setTransferIn(true)\r\n            }else{\r\n                setTransferIn(false)\r\n            }\r\n        }                  \r\n    }    \r\n    \r\n    const checkPhoneNumber=(e, inputName)=>{\r\n        const limit = 10;\r\n            setRelatives({...relatives,  [inputName]: e.slice(0, limit)});     \r\n    }\r\n    const checkPhoneNumberBasic=(e, inputName)=>{\r\n        const limit = 10;\r\n\r\n            setBasicInfo({...basicInfo,  [inputName]: e.slice(0, limit)});     \r\n    } \r\n    //Handle CheckBox \r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setOvcEnrolled(true)\r\n        }else{\r\n            setOvcEnrolled(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer autoClose={3000} hideProgressBar />\r\n            <Card className={classes.cardBottom}>\r\n                <CardContent>\r\n                <Link\r\n                    to={{\r\n                        pathname: \"/patient-history\",\r\n                        state: { patientObj: patientObj  }\r\n                    }}\r\n                >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\" float-end ms-1\"\r\n                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                            startIcon={<TiArrowBack />}\r\n                        >\r\n                            <span style={{ textTransform: \"capitalize\", color:'#fff' }}>Back </span>\r\n                        </Button>\r\n                    </Link>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"col-xl-12 col-lg-12\">\r\n                        <Form >\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Edit User Information</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"basic-form\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"dateOfRegistration\">Date of Registration* </Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        onKeyDown={(e)=>e.preventDefault()}\r\n                                                        name=\"dateOfRegistration\"\r\n                                                        id=\"dateOfRegistration\"\r\n                                                        value={basicInfo.dateOfRegistration}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                   {errors.dateOfRegistration1 !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.dateOfRegistration1}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">Hospital Number* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"hospitalNumber\"\r\n                                                        id=\"hospitalNumber\"\r\n                                                        value={basicInfo.hospitalNumber}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                        disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                   {errors.hospitalNumber !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.hospitalNumber}</span>\r\n                                                    ) : \"\" }\r\n                                                    {errors.hospitalNumber !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.hospitalNumber}</span>\r\n                                                    ) : \"\" }\r\n                                                    {hospitalNumStatus===true ? (\r\n                                                        <span className={classes.error}>{\"Hospital number already exist\"}</span>\r\n                                                    ) : \"\" }\r\n                                                    {hospitalNumStatus2===true ? (\r\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\r\n                                                    ) :\"\"}\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">EMR Number* </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"emrNumber\"\r\n                                                        id=\"emrNumber\"\r\n                                                        disabled='true'\r\n                                                        value={Math.floor(Math.random() * 1094328)}\r\n                                                        //onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            \r\n                                        </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"firstName\">First Names *</Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"firstName\"\r\n                                                        id=\"firstName\"\r\n                                                        value={basicInfo.firstName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                    {errors.firstName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.firstName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Middle Name</Label>\r\n                                                    <Input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"middleName\"\r\n                                                        id=\"middleName\"\r\n                                                        value={basicInfo.middleName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Last Name *</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"lastName\"\r\n                                                        id=\"lastName\"\r\n                                                        value={basicInfo.lastName}\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                   {errors.lastName !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.lastName}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Sex *</Label>\r\n                                                    <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"sexId\"\r\n                                                            id=\"sexId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.sexId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                            \r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {genders.map((gender, index) => (\r\n                                                            <option key={gender.id} value={gender.display}>{gender.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {errors.sexId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.sexId}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-2 col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date Of Birth</Label>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Actual\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                defaultChecked\r\n                                                                //disabled={locationState.actionType==='update'? false : true}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            /> Actual\r\n                                                        </label>\r\n                                                    </div>\r\n                                                    <div className=\"radio\">\r\n                                                        <label>\r\n                                                            <input\r\n                                                                type=\"radio\"\r\n                                                                value=\"Estimated\"\r\n                                                                name=\"dateOfBirth\"\r\n                                                                //disabled={locationState.actionType==='update'? false : true}\r\n                                                                onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                                style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            /> Estimated\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Date</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"date\"\r\n                                                        onKeyDown={(e)=>e.preventDefault()}\r\n                                                        name=\"dob\"\r\n                                                        id=\"dob\"\r\n                                                        max={today}\r\n                                                        value={basicInfo.dob}\r\n                                                        onChange={handleDobChange}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            </div>\r\n\r\n                                            <div className=\"form-group mb-3 col-md-3\">\r\n                                                <FormGroup>\r\n                                                    <Label>Age</Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"number\"\r\n                                                        name=\"age\"\r\n                                                        id=\"age\"\r\n                                                        value={basicInfo.age}\r\n                                                        disabled={ageDisabled}\r\n                                                        onChange={handleAgeChange}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className={\"row\"}>\r\n{/*                                            {watchShowAge >=0 &&\r\n                                            <>*/}\r\n                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Marital Status</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"maritalStatusId\"\r\n                                                            id=\"maritalStatusId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.maritalStatusId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {maritalStatusOptions.map((maritalStatusOption, index) => (\r\n                                                                <option key={maritalStatusOption.id} value={maritalStatusOption.id}>{maritalStatusOption.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        \r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>Employment Status *</Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"employmentStatusId\"\r\n                                                            id=\"employmentStatusId\"\r\n                                                            onChange={handleInputChangeBasic}\r\n                                                            value={basicInfo.employmentStatusId}\r\n                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                        >\r\n                                                            <option value={\"\"}>Select</option>\r\n                                                            {occupationOptions.map((occupationOption, index) => (\r\n                                                                <option key={occupationOption.id} value={occupationOption.id}>{occupationOption.display}</option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                        {errors.employmentStatusId !==\"\" ? (\r\n                                                        <span className={classes.error}>{errors.employmentStatusId}</span>\r\n                                                        ) : \"\" }\r\n                                                    </FormGroup>\r\n                                                </div>\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Education Level *</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"educationId\"\r\n                                                        id=\"educationId\"\r\n                                                        onChange={handleInputChangeBasic}\r\n                                                        value={basicInfo.educationId}\r\n                                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                                    >\r\n                                                        <option value={\"\"}>Select</option>\r\n                                                        {educationOptions.map((educationOption, index) => (\r\n                                                            <option key={educationOption.id} value={educationOption.id}>{educationOption.display}</option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                    {errors.educationId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.educationId}</span>\r\n                                                    ) : \"\" }\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"patientId\">National Identity Number (NIN)  </Label>\r\n                                                    <input\r\n                                                        className=\"form-control\"\r\n                                                        type=\"text\"\r\n                                                        name=\"nin\"\r\n                                                        id=\"nin\"\r\n                                                        value={basicInfo.ninNumber}\r\n                                                        //onChange={handleInputChangeBasic}\r\n                                                        style={{border: \"1px solid #014D88\",borderRadius:\"0.2rem\"}}\r\n                                                    />\r\n                                                   \r\n                                                </FormGroup>\r\n                                            \r\n                                        </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Contact Details</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Phone Number *</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    maxLength={5}\r\n                                                    name=\"phoneNumber\"\r\n                                                    id=\"phoneNumber\"\r\n                                                    value={basicInfo.phoneNumber}\r\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'phoneNumber')}}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                    \r\n                                                />\r\n                                                {errors.phoneNumber !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.phoneNumber}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Alt. Phone Number</Label>\r\n                                                <PhoneInput\r\n                                                    containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\r\n                                                    inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                    country={'ng'}\r\n                                                    placeholder=\"(234)7099999999\"\r\n                                                    value={basicInfo.altPhonenumber}\r\n                                                    onChange={(e)=>{checkPhoneNumberBasic(e,'altPhonenumber')}}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                />\r\n\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Email</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"email\"\r\n                                                    name=\"email\"\r\n                                                    id=\"email\"\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    value={basicInfo.email}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                />\r\n                                               \r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Country *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"countryId\"\r\n                                                    id=\"countryId\"\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    value={basicInfo.countryId}\r\n                                                    onChange={getStates}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                    >\r\n                                                    <option value={\"\"}>Select</option>\r\n                                                    {countries.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.countryId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.countryId}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>State *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"stateId\"\r\n                                                    id=\"stateId\"\r\n                                                    value={basicInfo.stateId}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    onChange={getProvinces}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                    >\r\n                                                    <option value=\"\">Select</option>\r\n                                                    {states.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.stateId !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.stateId}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Province/District/LGA *</Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"district\"\r\n                                                    id=\"district\"\r\n                                                    value={basicInfo.district}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                    >\r\n                                                    <option value=\"\">Select</option>\r\n                                                    {provinces.map((value, index) => (\r\n                                                        <option key={index} value={value.id}>\r\n                                                            {value.name}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                {errors.district !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.district}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className={\"row\"}>\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Street Address*</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"address\"\r\n                                                    id=\"address\"\r\n                                                    value={basicInfo.address}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                   \r\n                                                />\r\n                                               {errors.address !==\"\" ? (\r\n                                                    <span className={classes.error}>{errors.address}</span>\r\n                                                    ) : \"\" }\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>Landmark</Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"text\"\r\n                                                    name=\"landmark\"\r\n                                                    id=\"landmark\"\r\n                                                    value={basicInfo.landmark}\r\n                                                    onChange={handleInputChangeBasic}\r\n                                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                                    \r\n                                                />\r\n                                                \r\n                                            </FormGroup>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder',  borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\" style={{color:'#fff'}}>Relationship / Next Of Kin</h5>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        {\r\n                                            contacts && contacts.length > 0 && (\r\n                                                <div className=\"col-xl-12 col-lg-12\">\r\n                                                    <table style={{ width: '100%' }} className=\"mb-3\">\r\n                                                        <thead className=\"mb-3\">\r\n                                                        <tr>\r\n                                                            <th>Relationship Type</th>\r\n                                                            <th>Name</th>\r\n                                                            <th>Phone</th>\r\n                                                            <th>Address</th>\r\n                                                            <th>Actions</th>\r\n                                                        </tr>\r\n                                                        </thead>\r\n                                                        <tbody className=\"mb-3\">\r\n                                                        {contacts.map((item, index) => {\r\n                                                            return (\r\n                                                                <tr key={item.index} className=\"mb-3\">\r\n                                                                    <td>{ \r\n                                                                        getRelationship(item.relationshipId) \r\n                                                                    }</td>\r\n                                                                    <td>{ \r\n                                                                        item.firstName + \" \"  + item.middleName + \" \" + item.lastName\r\n                                                                    }</td>\r\n                                                                    <td>{ \r\n                                                                            item.phone\r\n                                                                        }</td>\r\n                                                                    <td>{ \r\n                                                                            item.address\r\n                                                                    }</td>\r\n                                                                    <td>\r\n                                                                        <button type=\"button\"\r\n                                                                                className=\"btn btn-default btn-light btn-sm editRow\"\r\n                                                                                onClick={() => handleEditRelative(item, index)}\r\n                                                                                >\r\n                                                                            <FontAwesomeIcon icon=\"edit\" />\r\n                                                                        </button>\r\n                                                                        &nbsp;&nbsp;\r\n                                                                        <button\r\n                                                                            type=\"button\"\r\n                                                                            className=\"btn btn-danger btn-sm removeRow\"\r\n                                                                            onClick={(e) => handleDeleteRelative(index)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon=\"trash\" />\r\n                                                                        </button>\r\n                                                                    </td>\r\n                                                                </tr>\r\n                                                            );\r\n                                                        })}\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        <div className=\"col-xl-12 col-lg-12\">\r\n                                            {\r\n                                                showRelative && (\r\n                                                    <div className=\"card\">\r\n                                                        <div className=\"card-body\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"relationshipType\">Relationship Type *</Label>\r\n                                                                        <select\r\n                                                                            className=\"form-control\"\r\n                                                                            name=\"relationshipId\"\r\n                                                                            id=\"relationshipId\"\r\n                                                                            value={relatives.relationshipId}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                            >\r\n                                                                            <option value={\"\"}>Select</option>\r\n                                                                            {relationshipOptions.map((relative, index) => (\r\n                                                                                <option key={relative.id} value={relative.id}>{relative.display}</option>\r\n                                                                            ))}\r\n                                                                        </select>\r\n                                                                        {errors.relationshipId !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.relationshipId}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"cfirstName\">First Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"firstName\"\r\n                                                                            value={relatives.firstName}\r\n                                                                            id=\"firstName\"\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                        />\r\n                                                                       {errors.firstName !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.firstName}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Middle Name</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"middleName\"\r\n                                                                            id=\"middleName\"\r\n                                                                            value={relatives.middleName}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                        />\r\n                                                                        {/* {errors.cmiddleName && <p>{errors.cmiddleName.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Last Name *</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"lastName\"\r\n                                                                            id=\"lastName\"\r\n                                                                            value={relatives.lastName}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                        />\r\n                                                                       {errors.lastName !==\"\" ? (\r\n                                                                        <span className={classes.error}>{errors.lastName}</span>\r\n                                                                        ) : \"\" }\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactPhoneNumber\">Phone Number</Label>\r\n                                                                        <PhoneInput\r\n                                                                            containerStyle={{width:'100%',border: \"1px solid #014D88\"}}\r\n                                                                            inputStyle={{width:'100%',borderRadius:'0px'}}\r\n                                                                            country={'ng'}\r\n                                                                            placeholder=\"(234)7099999999\"\r\n                                                                            name=\"phone\"\r\n                                                                            value={relatives.phone}\r\n                                                                            id=\"phone\"\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                            onChange={(e)=>{checkPhoneNumber(e.slice(0, 10),'phone')}}\r\n                                                                        />\r\n                                                                    \r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactEmail\">Email</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"email\"\r\n                                                                            id=\"email\"\r\n                                                                            value={relatives.email}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                        />\r\n                                                                        {/* {errors.contactEmail && <p>{errors.contactEmail.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"form-group mb-3 col-md-3\">\r\n                                                                    <FormGroup>\r\n                                                                        <Label for=\"contactAddress\">Address</Label>\r\n                                                                        <input\r\n                                                                            className=\"form-control\"\r\n                                                                            type=\"text\"\r\n                                                                            name=\"address\"\r\n                                                                            id=\"address\"\r\n                                                                            value={relatives.address}\r\n                                                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                                                            onChange={handleInputChangeRelatives}\r\n                                                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                                                        />\r\n                                                                        {/* {errors.contactAddress && <p>{errors.contactAddress.message}</p>} */}\r\n                                                                    </FormGroup>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-1\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleSaveRelationship}\r\n                                                                    >\r\n                                                                        Add\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n\r\n                                                                <div className=\"col-1\">\r\n                                                                    <MatButton\r\n                                                                        type=\"button\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"secondary\"\r\n                                                                        className={classes.button}\r\n                                                                        onClick={handleCancelSaveRelationship}\r\n                                                                    >\r\n                                                                        Cancel\r\n                                                                    </MatButton>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\"></div>\r\n                                        <MatButton\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={handleAddRelative}\r\n                                            style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                        >\r\n                                            Add a Relative/Next Of Kin\r\n                                        </MatButton>\r\n                                    {/* </div> */}\r\n                                </div>\r\n                            </div>\r\n                            {/* Adding HIV ENROLLEMENT FORM HERE */}\r\n                            <div className=\"card\">\r\n                                <div className=\"card-header\" style={{backgroundColor:\"#014d88\",color:'#fff',fontWeight:'bolder', borderRadius:\"0.2rem\"}}>\r\n                                    <h5 className=\"card-title\"  style={{color:'#fff'}}>HIV Enrollment</h5>\r\n                                </div>\r\n\r\n                                <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"uniqueId\">Unique ID No  * </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"uniqueId\"\r\n                                        id=\"uniqueId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.uniqueId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled\r\n                                        \r\n                                    />\r\n                                    {errors.uniqueId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uniqueId}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label for=\"dateOfRegistration\">Date of Enrollment * </Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e)=>e.preventDefault()}\r\n                                        name=\"dateOfRegistration\"\r\n                                        id=\"dateOfRegistration\"\r\n                                        min={basicInfo.dateOfRegistration}\r\n                                        max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateOfRegistration}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        \r\n                                    />\r\n                                    {errors.dateOfRegistration !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                    ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label for=\"entryPointId\">Care Entry Point * </Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"entryPointId\"\r\n                                    id=\"entryPointId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.entryPointId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> </option>                  \r\n                                {carePoints.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.entryPointId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.entryPointId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                \r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                {transferIn===true ? \r\n                                    (\r\n                                        <FormGroup>\r\n                                        <Label >Facility Name</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"facilityName\"\r\n                                            id=\"facilityName\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.facilityName}  \r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                        />\r\n                                        </FormGroup>\r\n                                    ):\"\"}\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                <Label >HIV Status at Registration *</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"statusAtRegistrationId\"\r\n                                    id=\"statusAtRegistrationId\"\r\n                                    onChange={handleInputChange}\r\n                                    value={objValues.statusAtRegistrationId}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    //disabled={locationState.actionType==='update'? false : true}\r\n                                    \r\n                                >\r\n                                <option value=\"\"> Select</option>                  \r\n                                {hivStatus.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                </Input>\r\n                                {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Date of Confirmed HIV Test *</Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e)=>e.preventDefault()}\r\n                                        name=\"dateConfirmedHiv\"\r\n                                        id=\"dateConfirmedHiv\"\r\n                                        min={basicInfo.dob}\r\n                                        max={objValues.dateOfRegistration}\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.dateConfirmedHiv}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        \r\n                                    /> \r\n                                    {errors.dateConfirmedHiv !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                        ) : \"\" } \r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Source of Referral *</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"sourceOfReferrerId\"\r\n                                        id=\"sourceOfReferrerId\"\r\n                                        value={objValues.sourceOfReferrerId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        \r\n                                    >\r\n                                        <option value=\"\">Select </option>                 \r\n                                            {sourceReferral.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.sourceOfReferrerId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.sourceOfReferrerId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Enrollment Setting *</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"enrollmentSettingId\"\r\n                                        id=\"enrollmentSettingId\"\r\n                                        value={objValues.enrollmentSettingId}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        onChange={handleInputChange}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n\r\n                                            {enrollSetting.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {errors.enrollmentSettingId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.enrollmentSettingId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {(femaleStatus && basicInfo.age > 9) && (\r\n                                    <>\r\n                                   \r\n                                    <div className = \"form-group mb-3 col-md-6\" >\r\n                                        <FormGroup>\r\n                                        <Label> Pregnancy </Label>\r\n                                        <Input\r\n                                            type = \"select\"\r\n                                            name = \"pregnancyStatusId\"\r\n                                            id = \"pregnancyStatusId\"\r\n                                            value = {objValues.pregnancyStatusId}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            onChange = {handleInputChange}  \r\n                                            //disabled={locationState.actionType==='update'? false : true}                                      \r\n                                        >\r\n                                        < option value = \"\" >Select </option>\r\n                                        {pregnancyStatus.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                        </Input>                                                                        \r\n                                    </FormGroup>  \r\n                                    </div>\r\n                                    {objValues.pregnancyStatusId!=='72' && (\r\n                                    <>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date of LMP </Label>                                    \r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            onKeyDown={(e)=>e.preventDefault()}\r\n                                            name=\"dateOfLpm\"\r\n                                            id=\"dateOfLpm\"\r\n                                            max={today}\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateOfLpm}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            //disabled={locationState.actionType==='update'? false : true}\r\n                                        />  \r\n                                            \r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    </>\r\n                                    )}\r\n                                    </>\r\n                                )}\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >TB Status * </Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"tbStatusId\"\r\n                                        id=\"tbStatusId\"\r\n                                        value={objValues.tbStatusId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>\r\n                                            {tbStatus.map((value) => (\r\n                                                <option key={value.id} value={value.id}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                    </Input>\r\n                                    {errors.tbStatusId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.tbStatusId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                {hideTargetGroup===\"false\" ? (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                    <Label >Target Group *</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"targetGroupId\"\r\n                                        id=\"targetGroupId\"\r\n                                        value={objValues.targetGroupId}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        >\r\n                                        <option value=\"\"> Select</option>                    \r\n                                                {kP.map((value) => (\r\n                                                    <option key={value.id} value={value.id}>\r\n                                                        {value.display}\r\n                                                    </option>\r\n                                                ))}\r\n                                    </Input>\r\n                                    {errors.targetGroupId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.targetGroupId}</span>\r\n                                        ) : \"\" }\r\n                                    </FormGroup>\r\n                                </div>\r\n                                ) : \"\"}\r\n                                <div className=\"form-group mb-3 col-md-3\">\r\n                                    \r\n                                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                                        <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"ovc_enrolled\"\r\n                                        id=\"ovc_enrolled\"                                        \r\n                                        onChange={handleCheckBox}\r\n                                        //disabled={locationState.actionType==='update'? false : true}\r\n                                        />\r\n                                        <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"basic_checkbox_1\"\r\n                                        >\r\n                                        Enrolled into OVC?\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                {basicInfo.age <=14 && (\r\n                                <div className=\"form-group mb-3 col-md-3\">\r\n                                    \r\n                                    <div className=\"form-check custom-checkbox ml-1 \">\r\n                                        <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        name=\"ovc_enrolled\"\r\n                                        id=\"ovc_enrolled\"                                        \r\n                                        onChange={handleCheckBox}\r\n                                        />\r\n                                        <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"basic_checkbox_1\"\r\n                                        >\r\n                                        Enrolled into OVC?\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                )}\r\n                                {/* <div className=\"form-group mb-3 col-md-3\">\r\n                                    {ovcEnrolled===true ? \r\n                                        (\r\n                                        <FormGroup>\r\n                                        <Label >OVC Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"ovcNumber\"\r\n                                            id=\"ovcNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.ovcNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                        )\r\n                                        :\r\n                                        \"\"\r\n                                    }\r\n                                </div> */}\r\n                                \r\n                                {ovcEnrolled===true && \r\n                                (\r\n                                <>        \r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Household Unique Number</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"householdNumber\"\r\n                                            id=\"householdNumber\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.householdNumber}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\"></div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredToOVCPartner\"\r\n                                            id=\"referredToOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredToOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred To OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            onKeyDown={(e)=>e.preventDefault()}\r\n                                            name=\"dateReferredToOVCPartner\"\r\n                                            id=\"dateReferredToOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredToOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"referredFromOVCPartner\"\r\n                                            id=\"referredFromOVCPartner\"\r\n                                            required={ovcEnrolled}\r\n                                            onChange={handleInputChange}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            value={objValues.referredFromOVCPartner}\r\n                                            \r\n                                        />\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <FormGroup>\r\n                                        <Label >Date Referred From OVC Partner</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            onKeyDown={(e)=>e.preventDefault()}\r\n                                            name=\"dateReferredFromOVCPartner\"\r\n                                            id=\"dateReferredFromOVCPartner\"\r\n                                            min={basicInfo.dob}\r\n                                            max={objValues.dateOfRegistration }\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.dateReferredFromOVCPartner}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                            \r\n                                        /> \r\n                                        {/* {errors.dateConfirmedHiv !==\"\" ? (\r\n                                            <span className={classes.error}>{errors.dateConfirmedHiv}</span>\r\n                                            ) : \"\" }  */}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </div>\r\n                                </>\r\n                                )}\r\n                            \r\n                            </div>\r\n                                </div>\r\n                            </div>\r\n                            {/* END OF HIV ENROLLEMENT FORM */}\r\n                            {saving ? <Spinner /> : \"\"}\r\n\r\n                            <br />\r\n\r\n                            {locationState.actionType ==='update' ?\r\n                            (\r\n                                <>\r\n                                    <MatButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={classes.button}\r\n                                        startIcon={<SaveIcon />}\r\n                                        onClick={handleSubmit}\r\n                                        style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                                    >\r\n                                        {!saving ? (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                        ) : (\r\n                                            <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                        )}\r\n                                    </MatButton>\r\n            \r\n                                    <MatButton\r\n                                        variant=\"contained\"\r\n                                        className={classes.button}\r\n                                        startIcon={<CancelIcon />}\r\n                                        onClick={handleCancel}\r\n                                        style={{backgroundColor:'#992E62'}}\r\n                                    >\r\n                                        <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\r\n                                    </MatButton>\r\n                            </>\r\n                            ):\"\"}\r\n                        </Form>\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserRegistration","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["140"],"import React,{useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport PatientCardDetail from './PatientCard'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SubMenu from './SubMenu';\r\nimport RecentHistory from './../History/RecentHistory';\r\nimport PatientHistory from './../History/PatientHistory'\r\nimport ClinicVisit from '../Consultation/Index'\r\nimport PrEPCommencementForm from './../PrepServices/PrEPCommencementForm';\r\nimport PrEPDiscontinuationsInterruptions from './../PrepServices/PrEPDiscontinuationsInterruptions';\r\nimport PrEPEligibiltyScreeningForm from './../PrepServices/PrEPEligibiltyScreeningForm';\r\nimport PrEPVisit from './../PrepServices/PrEPVisit';\r\nimport PrEPRegistrationForm from './../PrepServices/PrEPRegistrationForm';\r\nimport Biometrics from './Biometric'\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\n\r\nfunction PatientCard(props) {\r\n  \r\n    let history = useHistory();\r\n    const [patientDetail, setPatientDetail] = useState(\"\")\r\n    const [activeContent, setActiveContent] = useState({route:\"recent-history\", id:\"\", activeTab:\"home\", actionType:\"create\", obj:{}});\r\n    const { classes } = props;\r\n    \r\n    const patientObjLocation = history.location && history.location.state ? history.location.state.patientObj : {}\r\n    const prepId = history.location && history.location.state ? history.location.state.prepId : {}\r\n    //console.log(patientObj)\r\n    useEffect(() => {\r\n      PatientObject()\r\n     }, []);\r\n\r\n     async function PatientObject() {\r\n      axios\r\n          .get(`${baseUrl}prep/persons/${patientObjLocation.personId}`,\r\n          { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n          )\r\n          .then((response) => {\r\n            setPatientDetail(response.data);\r\n            //patientObj=response.data\r\n          })\r\n          .catch((error) => {    \r\n          });        \r\n    }\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className=\"row page-titles mx-0\" style={{marginTop:\"0px\", marginBottom:\"-10px\"}}>\r\n\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t<li className=\"breadcrumb-item active\"><h4> <Link to={\"/\"} >PrEP /</Link> Patient Dashboard</h4></li>\r\n\t\t\t</ol>\r\n\t\t  </div>\r\n      <Card >\r\n        <CardContent>\r\n          {/* This component is where the patient menu and route is define and manage */}\r\n            {/* start of patient card detail */}\r\n            <PatientCardDetail patientObj={patientObjLocation}  setActiveContent={setActiveContent} activeContent={activeContent} patientDetail={patientDetail}/> \r\n            {/* End of patient card detail */} \r\n            {/* This is the submenu components */}          \r\n            <SubMenu patientObj={patientObjLocation}  setActiveContent={setActiveContent} patientDetail={patientDetail}/>\r\n            <br/>\r\n            {/* This is the submenu routes */}\r\n            {activeContent.route==='recent-history' &&(<RecentHistory patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\r\n            {activeContent.route==='biometrics' &&(<Biometrics patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\r\n            {activeContent.route==='consultation' &&( <ClinicVisit patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId}/>)}\r\n            {/* {activeContent==='child-consultation' &&( <ChildConsultation patientObj={patientObj} setActiveContent={setActiveContent}/>)} */}\r\n            {activeContent.route==='prep-commencement' &&( <PrEPCommencementForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)}\r\n            {activeContent.route==='prep-interruptions' &&( <PrEPDiscontinuationsInterruptions patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)}\r\n            {activeContent.route==='prep-screening' &&( <PrEPEligibiltyScreeningForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} patientDetail={patientDetail} PatientObject={PatientObject}/>)}\r\n            {activeContent.route==='prep-visit' &&( <PrEPVisit PatientObject={PatientObject}/>)}\r\n            {activeContent.route==='prep-registration' &&( <PrEPRegistrationForm patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent} prepId={prepId} PatientObject={PatientObject}/>)} \r\n            {activeContent.route==='patient-history' &&( <PatientHistory patientObj={patientObjLocation} setActiveContent={setActiveContent} activeContent={activeContent}/>)}         \r\n          {/* History Pages */}\r\n         \r\n         </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["141","142","143","144","145"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst Patients = (props) => {\r\n  const [patientList, setPatientList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  ///GET LIST OF Patients\r\n  async function patients() {\r\n    setLoading(true);\r\n    axios\r\n      .get(`${baseUrl}prep/persons`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setPatientList(response.data);\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"Find Patient\"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          {\r\n            title: \"Hospital Number\",\r\n            field: \"hospital_number\",\r\n            filtering: false,\r\n          },\r\n          { title: \"PrEP Code\", field: \"clientCode\", filtering: false },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          { title: \"PrEP Status\", field: \"status\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        //isLoading={loading}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}prep/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                resolve({\r\n                  data: result?.data?.records?.map?.((row) => ({\r\n                    name: row.firstName + \" \" + row.surname,\r\n                    hospital_number: row.hospitalNumber,\r\n                    clientCode: row.uniqueId,\r\n                    //phone_number:  row.phone,\r\n                    gender: row && row.gender ? row.gender : \"\",\r\n                    age: row.age,\r\n\r\n                    status: (\r\n                      <Label color=\"blue\" size=\"mini\">\r\n                        {row.prepStatus}\r\n                      </Label>\r\n                    ),\r\n\r\n                    actions: (\r\n                      <div>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/patient-dashboard\",\r\n                            state: { patientObj: row },\r\n                          }}\r\n                        >\r\n                          <ButtonGroup\r\n                            variant=\"contained\"\r\n                            aria-label=\"split button\"\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              height: \"30px\",\r\n                              width: \"215px\",\r\n                            }}\r\n                            size=\"large\"\r\n                          >\r\n                            <Button\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              aria-label=\"select merge strategy\"\r\n                              aria-haspopup=\"menu\"\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <MdDashboard />\r\n                            </Button>\r\n                            <Button\r\n                              style={{ backgroundColor: \"rgb(153, 46, 98)\" }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  color: \"#fff\",\r\n                                  fontWeight: \"bolder\",\r\n                                }}\r\n                              >\r\n                                Patient Dashboard\r\n                              </span>\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </Link>\r\n                      </div>\r\n                    ),\r\n                  })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        options={{\r\n          headerStyle: {\r\n            backgroundColor: \"#014d88\",\r\n            color: \"#fff\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: true,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div className=\"p-2\">\r\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input\"\r\n                  name=\"showPP!\"\r\n                  id=\"showPP\"\r\n                  value=\"showPP\"\r\n                  checked={showPPI === true ? false : true}\r\n                  onChange={handleCheckBox}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\r\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    SHOW PII\r\n                  </b>\r\n                </label>\r\n              </div>\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\SubMenu.js",["146","147"],"import React, { useState, useEffect } from \"react\";\r\nimport { Menu, Popup } from \"semantic-ui-react\";\r\n\r\n\r\n\r\n\r\nfunction SubMenu(props) {\r\n\r\n    const patientObj = props.patientObj \r\n    useEffect(() => {\r\n        //Observation();\r\n    }, [props.patientObj]);\r\n\r\n    const loadPrEPDiscontinuationsInterruptions = (row) =>{\r\n        props.setActiveContent({...props.activeContent, route:'prep-interruptions'})\r\n    }\r\n    const loadPrEPRegistrationForm = (row) =>{\r\n        props.setActiveContent({...props.activeContent, route:'prep-registration'})\r\n    }\r\n    const loadPrEPCommencementForm = (row) =>{\r\n        props.setActiveContent({...props.activeContent, route:'prep-commencement'})\r\n    }\r\n    const loadPrEPEligibiltyScreeningForm = (row) =>{\r\n        props.setActiveContent({...props.activeContent, route:'prep-screening'})\r\n    }\r\n\r\n    const onClickConsultation = (row) =>{        \r\n        props.setActiveContent({...props.activeContent, route:'consultation'})\r\n    }\r\n    const onClickHome = (row) =>{        \r\n        props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n    }\r\n    const loadPatientHistory = ()=>{\r\n        props.setActiveContent({...props.activeContent, route:'patient-history'})\r\n    }\r\n\r\n    return (\r\n         <div>\r\n\r\n                <Menu size=\"large\" color={\"black\"} inverted >\r\n                { patientObj.createdBy!==\"ETL\"  ? //The menu will show if the patient is not migrated \r\n                (<>\r\n                <Menu.Item onClick={() => onClickHome()} >Home</Menu.Item>\r\n                                  \r\n                { patientObj.eligibilityCount<=0 || patientObj.eligibilityCount===null ?\r\n                (<>\r\n                    <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} >PrEP Eligibility Screening</Menu.Item>\r\n                   \r\n                </>)\r\n                :\r\n                (<>\r\n                {/* check if the patient has done prep commencement */}\r\n                    {patientObj.prepCount==='0' || patientObj.commencementCount===null ? \r\n                    (<>\r\n                        {patientObj.prepCount==='0' && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\r\n                        {(patientObj.commencementCount===null || patientObj.commencementCount<=0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\r\n                        \r\n                    </>) \r\n                    : (<>\r\n                       \r\n                        <Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} > PrEP Eligibility Screening </Menu.Item>\r\n                        {(patientObj.prepCount===null || patientObj.prepCount<0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\r\n                        {(patientObj.commencementCount===null || patientObj.commencementCount<=0) && patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\r\n                        {patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => onClickConsultation()} > PrEP Visit</Menu.Item>)}\r\n                        {patientObj.hivresultAtVisit===\"Negative\" && (<Menu.Item onClick={() => loadPrEPDiscontinuationsInterruptions()} >PrEP Discontinuations & Interruptions</Menu.Item>)}\r\n                    </>)\r\n                    }\r\n                    \r\n                </>)}\r\n                <Menu.Item onClick={() => loadPatientHistory(patientObj)} >History</Menu.Item>   \r\n                </>)\r\n                :\r\n\r\n                (<>\r\n                {/* This menu will show only if the patient is migrated  and check if the patient last HIV test result is not positive*/}\r\n                <Menu.Item onClick={() => onClickHome()} >Home</Menu.Item>\r\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && (<Menu.Item onClick={() => loadPrEPEligibiltyScreeningForm()} >PrEP Eligibility Screening</Menu.Item>)}\r\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && patientObj.prepCount==='0' && (<Menu.Item onClick={() => loadPrEPRegistrationForm()} >PrEP Enrollment</Menu.Item>)}\r\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) && (patientObj.commencementCount===null || patientObj.commencementCount<=0) &&(<Menu.Item onClick={() => loadPrEPCommencementForm()} >PrEP Commencement</Menu.Item>)}\r\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) &&(<Menu.Item onClick={() => onClickConsultation()} > PrEP Visit</Menu.Item>)}\r\n                {(patientObj.hivresultAtVisit ===\"Negative\" || patientObj.hivresultAtVisit ===null) &&(<Menu.Item onClick={() => loadPrEPDiscontinuationsInterruptions()} >PrEP Discontinuations & Interruptions</Menu.Item>)}\r\n                <Menu.Item onClick={() => loadPatientHistory(patientObj)} >History</Menu.Item>     \r\n                </>) }                \r\n                </Menu>\r\n                   \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default SubMenu;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["148","149","150","151","152","153","154","155"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\n//import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\n//import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\n//import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Link } from 'react-router-dom'\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport { TiArrowBack } from 'react-icons/ti'\r\n//import Chip from '@material-ui/core/Chip';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import { Button } from 'semantic-ui-react';\r\nimport { Label, } from \"semantic-ui-react\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//import axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport Typography from '@material-ui/core/Typography';\r\n// import CaptureBiometric from './CaptureBiometric';\r\n\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  //const patientObj = props.patientObj ? props.patientObj : {}\r\n  //const [patientObj, setpatientObj] = useState(props.patientObj)\r\n  const patientObj = props?.patientObj;\r\n  //console.log(\"inn\",props.patientObj)\r\n\r\n  // useEffect(() => {\r\n  //   setpatientObj(props.patientDetail);\r\n  // }, [props.patientDetail]);\r\n\r\n  const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today?.getFullYear() - birthDate?.getFullYear();\r\n    var m = today?.getMonth() - birthDate?.getMonth();\r\n    if (m < 0 || (m === 0 && today?.getDate() < birthDate?.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n  const getHospitalNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const hospitalNumber = identifiers?.identifier?.find?.(obj => obj.type === 'HospitalNumber');\r\n    return hospitalNumber ? hospitalNumber?.value : '';\r\n  };\r\n  const getPhoneNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const phoneNumber = identifiers?.contactPoint?.find?.(obj => obj?.type === 'phone');\r\n    return phoneNumber ? phoneNumber?.value : '';\r\n  };\r\n  const getAddress = (identifier) => {\r\n    console.log('identifier: ', identifier)\r\n    const identifiers = identifier;\r\n    const address = identifiers?.address?.find?.(obj => obj?.city);\r\n    const houseAddress = Array.isArray(address?.line) && (address?.line[0] != null) ? address?.line[0] : \"\"\r\n    const landMark = address && address?.city && address?.city !== null ? address?.city : \"\"\r\n    return address ? houseAddress + \" \" + landMark : '';\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel >\r\n        <ExpansionPanelSummary >\r\n          <Row>\r\n            <Col md={12}>\r\n              {patientObj && patientObj !== null ? (<>\r\n                <Row className={\"mt-1\"}>\r\n                  <Col md={12} className={classes?.root2}>\r\n                    <b style={{ fontSize: \"25px\", color: 'rgb(153, 46, 98)' }}>\r\n                      {patientObj?.firstName + \" \" + patientObj?.surname}\r\n                    </b>\r\n                    <Link to={\"/\"} >\r\n                      <ButtonMui\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\" float-end ms-2 mr-2 mt-2\"\r\n                        //startIcon={<FaUserPlus size=\"10\"/>}\r\n                        startIcon={<TiArrowBack />}\r\n                        style={{ backgroundColor: \"rgb(153, 46, 98)\", color: '#fff', height: '35px' }}\r\n\r\n                      >\r\n                        <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                      </ButtonMui>\r\n                    </Link>\r\n                  </Col>\r\n                  <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                      {\" \"}\r\n                      Patient ID : <b style={{ color: '#0B72AA' }}>{patientObj?.hospitalNumber}</b>\r\n                    </span>\r\n                  </Col>\r\n\r\n                  <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                      Date Of Birth : <b style={{ color: '#0B72AA' }}>{patientObj?.dateOfBirth}</b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                      {\" \"}\r\n                      Age : <b style={{ color: '#0B72AA' }}>{calculate_age(moment(patientObj?.dateOfBirth).format(\"DD-MM-YYYY\"))}</b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <span>\r\n                      {\" \"}\r\n                      Gender :{\" \"}\r\n                      <b style={{ color: '#0B72AA' }}>{patientObj?.gender}</b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                      {\" \"}\r\n                      Phone Number : <b style={{ color: '#0B72AA' }}>{patientObj?.phoneNumber}</b>\r\n                    </span>\r\n                  </Col>\r\n                  <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                      {\" \"}\r\n                      Address : <b style={{ color: '#0B72AA' }}>{patientObj?.address} </b>\r\n                    </span>\r\n                  </Col>\r\n                  {patientObj?.prepStatus !== null && (\r\n                    <Col md={12}>\r\n                      <div >\r\n                        <Typography variant=\"caption\">\r\n                          <Label color={\"teal\"} size={\"mini\"}>\r\n                            STATUS : {props.activeContent?.obj?.newStatus?.display || patientObj?.prepStatus}\r\n                          </Label>\r\n                        </Typography>\r\n                      </div>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </>)\r\n                : (\r\n                  <>\r\n                    <p>Loading please wait..</p>\r\n                  </>\r\n                )\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </ExpansionPanelSummary>\r\n        <Divider />\r\n      </ExpansionPanel>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Patient\\Biometric.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["187","188","189"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast} from \"react-toastify\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\n//import {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport {  Modal } from \"react-bootstrap\";\r\nimport { Dropdown,Button, Menu, Icon } from 'semantic-ui-react'\r\n\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n\r\nconst PatientnHistory = (props) => {\r\n    const [recentActivities, setRecentActivities] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [saving, setSaving] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n    const [record, setRecord] = useState(null)\r\n     const toggle = () => setOpen(!open);\r\n    useEffect(() => {\r\n        PatientHistory()\r\n      }, [props.patientObj.id]);\r\n        ///GET LIST OF Patients        \r\n        const PatientHistory =()=>{\r\n            setLoading(true)\r\n            axios\r\n               .get(`${baseUrl}prep/general-activities/patients/${props.patientObj.personId}`,\r\n                   { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n               )\r\n               .then((response) => {\r\n                setLoading(false)                       \r\n                    setRecentActivities(response.data)\r\n                })\r\n\r\n               .catch((error) => {\r\n               //console.log(error);\r\n               });\r\n           \r\n          }\r\n    \r\n    const LoadViewPage =(row,action)=>{\r\n        \r\n        if(row.path==='prep-eligibility'){        \r\n            props.setActiveContent({...props.activeContent, route:'prep-screening', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-enrollment'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-registration', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-clinic'){//prep-commencement \r\n            props.setActiveContent({...props.activeContent, route:'consultation', recentActivities, id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-commencement'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-commencement', id:row.id, actionType:action})\r\n\r\n        }else if(row.path==='prep-interruption'){\r\n            props.setActiveContent({...props.activeContent, route:'prep-interruptions', id:row.id, actionType:action})\r\n\r\n        }else{\r\n\r\n        }\r\n        \r\n    }\r\n    const LoadModal =(row)=>{\r\n        toggle()\r\n        setRecord(row)\r\n    }\r\n    const LoadDeletePage =(row)=>{\r\n        \r\n        if(row.path==='prep-eligibility'){ \r\n            setSaving(true)       \r\n            //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });  \r\n        }else if(row.path==='prep-clinic'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-enrollment'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-commencement'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else if(row.path==='prep-interruption'){\r\n            setSaving(true)\r\n            //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n            axios\r\n            .delete(`${baseUrl}prep-interruption/${row.id}`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSaving(false)\r\n                toast.success(\"Record Deleted Successfully\");\r\n                PatientHistory()\r\n                toggle()\r\n            })\r\n            .catch((error) => {\r\n                setSaving(false)\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                  }\r\n                  else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                  }\r\n            });\r\n\r\n        }else{\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n        \r\n    <br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Patient History \"\r\n              columns={[\r\n                { title: \"Name\", field: \"name\" },\r\n                {\r\n                  title: \"Encounter Date\",\r\n                  field: \"date\",\r\n                },               \r\n                // { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              isLoading={loading}\r\n              data={recentActivities && recentActivities.map((row) => ({\r\n                   name: row.name,\r\n                   date: row.date,\r\n                   actions:\r\n            \r\n                    <div>\r\n                        <Menu.Menu position='right'  >\r\n                        <Menu.Item >\r\n                            <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                            <Dropdown item text='Action'>\r\n\r\n                            <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                {row.viewable && ( <Dropdown.Item onClick={()=>LoadViewPage(row, 'view')}> <Icon name='eye' />View  </Dropdown.Item>)}\r\n                                {row.editable && ( <Dropdown.Item  onClick={()=>LoadViewPage(row, 'update')}><Icon name='edit' />Edit</Dropdown.Item>)}\r\n                                <Dropdown.Item  onClick={()=>LoadModal(row, 'delete')}> <Icon name='trash' /> Delete</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                            </Button>\r\n                        </Menu.Item>\r\n                        </Menu.Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              backgroundColor: \"#014d88\",\r\n                              color: \"#fff\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n        <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered backdrop=\"static\">\r\n            <Modal.Header >\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n        </Modal.Title>\r\n        </Modal.Header>\r\n            <Modal.Body>\r\n                <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n                \r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button onClick={()=>LoadDeletePage(record)}  style={{backgroundColor:\"red\", color:\"#fff\"}} disabled={saving}>{saving===false ? \"Yes\": \"Deleting...\"}</Button>\r\n            <Button onClick={toggle} style={{backgroundColor:\"#014d88\", color:\"#fff\"}} disabled={saving}>No</Button>\r\n            \r\n        </Modal.Footer>\r\n        </Modal>    \r\n    </div>\r\n  );\r\n}\r\n    \r\nexport default PatientnHistory;\r\n\r\n\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\History\\RecentHistory.js",["190","191","192","193"],"import React, { Fragment, useState, useEffect } from \"react\";\r\n// BS\r\nimport { Dropdown, } from \"react-bootstrap\";\r\n/// Scroll\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n//import { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n//import { Alert } from \"react-bootstrap\";\r\nimport { Card, Accordion } from \"react-bootstrap\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nconst RecentHistory = (props) => {\r\n  //console.log(props.patientObj)\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [summary, setSummary] = useState(null)\r\n  const [saving, setSaving] = useState(false)\r\n  const [open, setOpen] = React.useState(false)\r\n  const [record, setRecord] = useState(null)\r\n  const toggle = () => setOpen(!open);\r\n  const [\r\n    activeAccordionHeaderShadow,\r\n    setActiveAccordionHeaderShadow,\r\n  ] = useState(0);\r\n\r\n  useEffect(() => {\r\n    Summary()\r\n    RecentActivities();\r\n  }, [props.patientObj.personId]);\r\n\r\n  const RecentActivities = () => {\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setRecentActivities(response.data)\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n  const Summary = () => {\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/person/${props.patientObj.personId}?full=true`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        console.log('sumry: ', response.data[0])\r\n        setSummary(response.data[0])\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  function countPrepEligibility(data) {\r\n    let count = 0;\r\n    let relevantActivities = ['Prep Commencement', 'Prep Clinic']\r\n    data.forEach(entry => {\r\n      entry?.activities?.forEach(activity => {\r\n        if (relevantActivities.includes(activity?.name)) {\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n\r\n    return count;\r\n  }\r\n\r\n  const ActivityName = (name) => {\r\n    if (name === 'HIV Enrollment') {\r\n      return \"HE\"\r\n    } else if (name === 'Prep Clinic') {\r\n      return \"PC\"\r\n    } else if (name === 'Prep Enrollment') {\r\n      return \"PE\"\r\n    } else if (name === 'Prep Eligibility') {\r\n      return \"PE\"\r\n    } else if (name === 'ART Commencement') {\r\n      return \"AC\"\r\n    } else {\r\n      return \"RA\"\r\n    }\r\n  }\r\n\r\n  const LoadViewPage = (row, action) => {\r\n\r\n    if (row.path === 'prep-eligibility') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-screening', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-enrollment') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-registration', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-clinic') {//prep-commencement \r\n      props.setActiveContent({ ...props.activeContent, route: 'consultation', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-commencement') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-commencement', id: row.id, actionType: action })\r\n\r\n    } else if (row.path === 'prep-interruption') {\r\n      props.setActiveContent({ ...props.activeContent, route: 'prep-interruptions', id: row.id, actionType: action })\r\n\r\n    } else {\r\n\r\n    }\r\n\r\n  }\r\n  const LoadModal = (row) => {\r\n    toggle()\r\n    setRecord(row)\r\n  }\r\n  const LoadDeletePage = (row) => {\r\n    if (row.path === 'prep-eligibility') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-eligibility/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else if (row.path === 'prep-clinic') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-enrollment') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-enrollment/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-commencement') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-clinic/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else if (row.path === 'prep-interruption') {\r\n      setSaving(true)\r\n      //props.setActiveContent({...props.activeContent, route:'art-commencement-view', id:row.id})\r\n      axios\r\n        .delete(`${baseUrl}prep-interruption/${row.id}`,\r\n          { headers: { \"Authorization\": `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          setSaving(false)\r\n          toast.success(\"Record Deleted Successfully\");\r\n          RecentActivities()\r\n          toggle()\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false)\r\n          if (error.response && error.response.data) {\r\n            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          }\r\n          else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n\r\n    } else {\r\n\r\n    }\r\n\r\n  }\r\n  // const redirectLink=()=>{\r\n  //   props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n  // }\r\n  //const index= 1\r\n\r\n  function joinActivities(data) {\r\n    return data.reduce((acc, item) => {\r\n      return acc.concat(item.activities);\r\n    }, []);\r\n  }\r\n  return (\r\n    <Fragment>\r\n      {/* <Ext /> */}\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-4 col-xxl-4 col-lg-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header  border-0 pb-0\" >\r\n              <h4 className=\"card-title\">Recent Activities</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <PerfectScrollbar\r\n                style={{ height: \"370px\" }}\r\n                id=\"DZ_W_Todo1\"\r\n                className=\"widget-media dz-scroll ps ps--active-y\"\r\n              >\r\n                <Accordion\r\n                  className=\"accordion accordion-header-bg accordion-header-shadow accordion-rounded \"\r\n                  defaultActiveKey=\"0\"\r\n                >\r\n                  <>\r\n                    {recentActivities.map((data, i) =>\r\n                      <div className=\"accordion-item\" key={i}>\r\n                        <Accordion.Toggle\r\n                          as={Card.Text}\r\n                          eventKey={`${i}`}\r\n                          className={`accordion-header ${activeAccordionHeaderShadow === 1 ? \"\" : \"collapsed\"\r\n                            } accordion-header-info`}\r\n                          onClick={() =>\r\n                            setActiveAccordionHeaderShadow(\r\n                              activeAccordionHeaderShadow === 1 ? -1 : i\r\n                            )\r\n                          }\r\n                        >\r\n                          <span className=\"accordion-header-icon\"></span>\r\n                          <span className=\"accordion-header-text\">Encounter Date : <span className=\"\">{data.date}</span> </span>\r\n                          <span className=\"accordion-header-indicator\"></span>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse\r\n                          eventKey={`${i}`}\r\n                          className=\"accordion__body\"\r\n                        >\r\n                          <div className=\"accordion-body-text\">\r\n                            <ul className=\"timeline\">\r\n                              {data.activities && data.activities.map((activity, index) => (\r\n\r\n                                <>\r\n                                  <li>\r\n                                    <div className=\"timeline-panel\">\r\n                                      <div className={i % 2 == 0 ? \"media me-2 media-info\" : \"media me-2 media-success\"}>{ActivityName(data.name)}</div>\r\n                                      <div className=\"media-body\">\r\n                                        <h5 className=\"mb-1\">{activity.name}</h5>\r\n                                        <small className=\"d-block\">\r\n                                          {activity.date}\r\n                                        </small>\r\n                                      </div>\r\n                                      <Dropdown className=\"dropdown\">\r\n                                        <Dropdown.Toggle\r\n                                          variant=\" light\"\r\n                                          className=\"i-false p-0 btn-info sharp\"\r\n                                        >\r\n                                          <svg\r\n                                            width=\"18px\"\r\n                                            height=\"18px\"\r\n                                            viewBox=\"0 0 24 24\"\r\n                                            version=\"1.1\"\r\n                                          >\r\n                                            <g\r\n                                              stroke=\"none\"\r\n                                              strokeWidth=\"1\"\r\n                                              fill=\"none\"\r\n                                              fillRule=\"evenodd\"\r\n                                            >\r\n                                              <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" />\r\n                                              <circle fill=\"#000000\" cx=\"5\" cy=\"12\" r=\"2\" />\r\n                                              <circle fill=\"#000000\" cx=\"12\" cy=\"12\" r=\"2\" />\r\n                                              <circle fill=\"#000000\" cx=\"19\" cy=\"12\" r=\"2\" />\r\n                                            </g>\r\n                                          </svg>\r\n                                        </Dropdown.Toggle>\r\n                                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() => LoadViewPage(activity, 'view')}\r\n                                          >\r\n                                            View\r\n                                          </Dropdown.Item>\r\n\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            onClick={() => LoadViewPage(activity, 'update')}\r\n                                          >\r\n                                            Update\r\n                                          </Dropdown.Item>\r\n\r\n                                          <Dropdown.Item\r\n                                            className=\"dropdown-item\"\r\n                                            to=\"/widget-basic\"\r\n                                            onClick={() => LoadModal(activity)}\r\n                                          >\r\n                                            Delete\r\n                                          </Dropdown.Item>\r\n\r\n                                        </Dropdown.Menu>\r\n                                      </Dropdown>\r\n                                    </div>\r\n                                  </li>\r\n                                </>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        </Accordion.Collapse>\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                </Accordion>\r\n\r\n              </PerfectScrollbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-8 col-xxl-8 col-lg-8\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header border-0  pb-2\" style={{ backgroundColor: \"#EEEEEE\" }}>\r\n              <h4 className=\"card-title\">Summary </h4>\r\n            </div>\r\n            <div className=\"row\">\r\n              {(<>\r\n                <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                  <div className=\"card-body\">\r\n\r\n                    <div className=\"col-sm-12 col-md-12 col-lg-12\">\r\n                      <div className=\"card overflow-hidden\">\r\n                        <div className=\"social-graph-wrapper widget-facebook\">\r\n                          <span className=\"s-icon\">\r\n                            <span style={{ fontSize: \"16px\" }}>Total Clinic Visit : {countPrepEligibility(recentActivities)}</span>\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-6 border-right\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              <h4 className=\"m-1\">\r\n                                <span className=\"counter\"><b>{summary?.encounterDate}</b></span>\r\n                              </h4>\r\n                              {summary && <p className=\"m-0\"><b>Last Visit </b></p>}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-6\">\r\n                            <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                              <h4 className=\"m-1\">\r\n                                <span className=\"counter\"><b>{summary?.nextAppointment}</b></span>\r\n                              </h4>\r\n                              {summary &&<p className=\"m-0\"><b>Next Visit</b></p>}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-xl-12 col-lg-12 col-sm-12\">\r\n                      <div className=\"widget-stat card\">\r\n                        <div className=\"card-body p-4\" style={{ backgroundColor: \"#fff\" }}>\r\n                          <h4 className=\"card-title\" style={{ fontSize: \"15px\" }}><b>Current Regimen Given</b></h4>\r\n                          <h4 class=\"text-info \">{summary? summary?.regimen: 'NIL'}</h4>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-6 col-md-6 col-lg-6\">\r\n                  <div className=\"card-body\">\r\n                    <div className=\"card overflow-hidden\">\r\n                      <div className=\"social-graph-wrapper widget-linkedin\">\r\n                        <span className=\"s-icon\">\r\n                          <span style={{ fontSize: \"16px\", }}>{<>\r\n                            BMI : {summary?((summary?.weight / ((summary?.height / 100) * (summary?.height / 100))).toFixed(2)): 'NIL'} {summary && <>kg/m<sup>2</sup><span></span></>}\r\n                          </>}</span> \r\n                        </span>\r\n                      </div>\r\n                      <div className=\"row\">\r\n\r\n                        <div className=\"col-6 border-right\">\r\n                          <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                            {summary && <><h4 className=\"m-1\">\r\n                              <span className=\"counter\">{summary? summary.weight: '0'} Kg</span>\r\n                            </h4>\r\n                            <p className=\"m-0\"><b>Weight </b></p></>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                          <div className=\"pt-3 pb-3 ps-0 pe-0 text-center\">\r\n                            {summary && <><h4 className=\"m-1\">\r\n                              <span className=\"counter\">{summary? summary.height: '0'} cm</span>\r\n                            </h4>\r\n                            <p className=\"m-0\"><b>Height </b></p></>}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Modal show={open} toggle={toggle} className=\"fade\" size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered backdrop=\"static\">\r\n        <Modal.Header >\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure you want to delete <b>{record && record.name}</b></h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={() => LoadDeletePage(record)} style={{ backgroundColor: \"red\", color: \"#fff\" }} disabled={saving}>{saving === false ? \"Yes\" : \"Deleting...\"}</Button>\r\n          <Button onClick={toggle} style={{ backgroundColor: \"#014d88\", color: \"#fff\" }} disabled={saving}>No</Button>\r\n\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RecentHistory;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPEligibiltyScreeningForm.js",["194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, Checkbox, FormControl, FormControlLabel, FormLabel, } from \"@material-ui/core\";\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Label as LabelRibbon, Button, Message, Select, Dropdown } from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport * as moment from 'moment';\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ReactReadMoreReadLess from \"react-read-more-read-less\";\r\nimport \"../../index.css\"\r\nimport { color } from \"highcharts\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\": {\r\n            color: '#fff',\r\n            fontWeight: 'bold'\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: '0.25rem',\r\n            height: '41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\": {\r\n            color: 'red'\r\n        },\r\n        \"& label\": {\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            fontWeight: 'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error: {\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\nexport const DateInputWrapper = ({ children }) => {\r\n\r\n    const handleKeyDown = (event) => {\r\n        event.preventDefault()\r\n    };\r\n\r\n    const clonedChildren = React.cloneElement(children, {\r\n        onKeydown: handleKeyDown,\r\n    });\r\n\r\n    return clonedChildren;\r\n};\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    const patientID = props.patientDetail && props.patientDetail.personResponseDto ? props.patientDetail.personResponseDto.id : \"\";\r\n    console.log('patient ID OBS: ',props)\r\n    //const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [counselingType, setCounselingType] = useState([]);\r\n    const [visitType, setVisitType] = useState([]);\r\n    const [reasonForDecline, setReasonForDecline] = useState([]);\r\n    const [populationType, setPopulationType] = useState([]);\r\n    const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n    let temp = { ...errors }\r\n\r\n    const [objValues, setObjValues] = useState(\r\n        {\r\n            counselingType: \"\",\r\n            drugUseHistory: {},\r\n            extra: {},\r\n            firstTimeVisit: true,\r\n            hivRisk: {},\r\n            numChildrenLessThanFive: \"\",\r\n            numWives: \"\",\r\n            personId: \"\",\r\n            personalHivRiskAssessment: {},\r\n            sexPartner: \"TARGET_GROUP_GEN_POP\",\r\n            sexPartnerRisk: {},\r\n            stiScreening: {},\r\n            targetGroup: \"TARGET_GROUP_GEN_POP\",\r\n            uniqueId: \"\",\r\n            visitDate: \"\",\r\n            visitType: \"\",\r\n            populationType: \"\",\r\n            pregnancyStatus: \"\",\r\n            score: 0\r\n        }\r\n    )\r\n    useEffect(async () => {\r\n\r\n        CounselingType();\r\n        VisitType();\r\n        await ReasonForDecline();\r\n        PopulationType();\r\n        PregnancyStatus();\r\n        if (props.activeContent.id && props.activeContent.id !== \"\" && props.activeContent.id !== null) {\r\n            GetPatientPrepEligibility(props.activeContent.id)\r\n            setSisabledField(props.activeContent.actionType === 'view' ? true : false)\r\n        }\r\n    }, [props.patientObj]);\r\n\r\n    const GetPatientPrepEligibility = (id) => {\r\n        axios\r\n            .get(`${baseUrl}prep/eligibility/${id}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                // console.log(response.data);\r\n                setObjValues(response.data);\r\n                setRiskAssessment(response.data.personalHivRiskAssessment)\r\n                setRiskAssessmentPartner(response.data.sexPartnerRisk)\r\n                setStiScreening(response.data.stiScreening)\r\n                setDrugHistory(response.data.drugUseHistory)\r\n                setAssessmentForPepIndication(response.data.assessmentForPepIndication)\r\n                setAssessmentForAcuteHivInfection(response.data.assessmentForAcuteHivInfection)\r\n                setServicesReceivedByClient(response.data.servicesReceivedByClient)\r\n                setAssessmentForPrepEligibility(response.data.assessmentForPrepEligibility)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    // useEffect(()=>console.log('uniqueId: ',props.patientObj))\r\n    const CounselingType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setCounselingType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const VisitType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_VISIT_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setVisitType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const ReasonForDecline = async () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/REASON_PREP_DECLINED`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setReasonForDecline(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PopulationType = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/POPULATION_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPopulationType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PregnancyStatus = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPregnancyStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n    const [riskAssessment, setRiskAssessment] = useState(\r\n        {\r\n            unprotectedVaginalSexCasual: \"\",\r\n            unprotectedVaginalSexRegular: \"\",\r\n            uprotectedAnalSexWithCasual: \"\",\r\n            uprotectedAnalSexWithRegular: \"\",\r\n            stiHistory: \"\",\r\n            sharedNeedles: \"\",\r\n            moreThan1SexPartner: \"\",\r\n            analSexWithPartner: \"\",\r\n            unprotectedAnalSexWithPartner: \"\",\r\n            haveYouPaidForSex: \"\",\r\n            haveSexWithoutCondom: \"\",\r\n            experienceCondomBreakage: \"\",\r\n            takenPartInSexualOrgy: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeRiskAssessment = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"}) \r\n        setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n    }\r\n    // Getting the number count of riskAssessment True\r\n    const actualRiskCountTrue = Object.values(riskAssessment)\r\n    const riskCount = actualRiskCountTrue.filter((x) => x === 'true')\r\n    const [riskAssessmentPartner, setRiskAssessmentPartner] = useState(\r\n        {\r\n            haveSexWithHIVPositive: \"\",\r\n            haveSexWithPartnerInjectDrug: \"\",\r\n            haveSexWithPartnerWhoHasSexWithMen: \"\",\r\n            haveSexWithPartnerTransgender: \"\",\r\n            sexWithPartnersWithoutCondoms: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeRiskAssessmentPartner = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setRiskAssessmentPartner({ ...riskAssessmentPartner, [e.target.name]: e.target.value });\r\n\r\n    }\r\n    // Getting the number count of sexPartRiskCount True\r\n    const actualSexPartRiskCountTrue = Object.values(riskAssessmentPartner)\r\n    const sexPartRiskCount = actualSexPartRiskCountTrue.filter((x) => x === 'true')\r\n    const [stiScreening, setStiScreening] = useState(\r\n        {\r\n            vaginalDischarge: \"\",\r\n            lowerAbdominalPains: \"\",\r\n            urethralDischarge: \"\",\r\n            complaintsOfScrotal: \"\",\r\n            complaintsGenitalSore: \"\",\r\n            analDischarge: \"\",\r\n            analItching: \"\",\r\n            analpain: \"\",\r\n            swollenIguinal: \"\",\r\n            genitalScore: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeStiScreening = e => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        setStiScreening({ ...stiScreening, [e.target.name]: e.target.value });\r\n\r\n    }\r\n    // Getting the number count of STI True\r\n    const actualStiTrue = Object.values(stiScreening)\r\n    const stiCount = actualStiTrue.filter((x) => x === 'true')\r\n    const [drugHistory, setDrugHistory] = useState(\r\n        {\r\n            useAnyOfTheseDrugs: \"\",\r\n            inject: \"\",\r\n            sniff: \"\",\r\n            smoke: \"\",\r\n            Snort: \"\",\r\n            useDrugSexualPerformance: \"\",\r\n            hivTestedBefore: \"\",\r\n            recommendHivRetest: \"\",\r\n            clinicalSetting: \"\",\r\n            reportHivRisk: \"\",\r\n            hivExposure: \"\",\r\n            hivTestResultAtvisit: \"\", //\r\n            lastTest: \"\"\r\n        }\r\n    )\r\n    const handleInputChangeDrugHistory = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        if (drugHistory.hivTestedBefore === \"true\") {\r\n            setDrugHistory({ ...drugHistory, lastTest: '' });\r\n        }\r\n        setDrugHistory({ ...drugHistory, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForPepIndication, setAssessmentForPepIndication] = useState(\r\n        {\r\n            unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours: \"\",\r\n            sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForPepIndication = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForPepIndication({ ...assessmentForPepIndication, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForAcuteHivInfection, setAssessmentForAcuteHivInfection] = useState(\r\n        {\r\n            acuteHivSymptomsLasttwoWeeks: \"\",\r\n            unprotectedAnalOrVaginalOrSharedNeedlesLast28Days: \"\",\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForAcuteHivInfection = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForAcuteHivInfection({ ...assessmentForAcuteHivInfection, [e.target.name]: e.target.value });\r\n    }\r\n    const [assessmentForPrepEligibility, setAssessmentForPrepEligibility] = useState(\r\n        {\r\n            hivNegative: \"\",\r\n            hivRiskScore: \"\",\r\n            noIndicationForPep: \"\",\r\n            hasNoProteinuria: \"\",\r\n            noHistoryOrSignsOfLiverAbnormalitiesCabLa: \"\",\r\n            noHistoryOfDrugToDrugInteractionCabLa: \"\",\r\n            noHistoryOfDrugHypersensitivityCabLa: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeAssessmentForPrepEligibility = e => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n        setAssessmentForPrepEligibility({ ...assessmentForPrepEligibility, [e.target.name]: e.target.value });\r\n    }\r\n    const [servicesReceivedByClient, setServicesReceivedByClient] = useState(\r\n        {\r\n            willingToCommencePrep: \"\",\r\n            reasonsForDecline: [],\r\n            otherReasonsForDecline: \"\",\r\n\r\n        }\r\n    )\r\n    const handleInputChangeServicesReceivedByClient = (e, data) => {\r\n        setErrors({ ...temp, [e.target.name]: \"\" })\r\n\r\n\r\n        if(e.target.name === \"willingToCommencePrep\"){\r\n\r\n            setServicesReceivedByClient({ ...servicesReceivedByClient, [e.target.name]: e.target.value,  reasonsForDecline: [],\r\n            });\r\n\r\n        }else{\r\n            setServicesReceivedByClient({ ...servicesReceivedByClient, [e.target.name]: e.target.value });\r\n\r\n        }\r\n    }\r\n\r\n    const handleInputReasonsForDecline = (e, data) => {\r\n        setServicesReceivedByClient({ ...servicesReceivedByClient, reasonsForDecline: data.value })\r\n    }\r\n\r\n    const [assessmentScore, setAssessmentScore] = useState(0);\r\n\r\n\r\n    /*****  Validation  */\r\n    const validate = () => {\r\n        //PREP FORM VALIDATION\r\n        temp.visitDate = objValues.visitDate ? \"\" : \"This field is required.\"\r\n        temp.sexPartner = objValues.sexPartner ? \"\" : \"This field is required.\"\r\n        temp.hivTestResultAtvisit = drugHistory.hivTestResultAtvisit ? \"\" : \"This field is required.\"\r\n\r\n        setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (validate()) {\r\n            setSaving(true);\r\n            //objValues.htsClientId= clientId\r\n            objValues.drugUseHistory = drugHistory\r\n            objValues.personalHivRiskAssessment = riskAssessment\r\n            objValues.sexPartnerRisk = riskAssessmentPartner\r\n            objValues.stiScreening = stiScreening\r\n            objValues.personId = props?.patientObj?.personId\r\n            objValues.uniqueId = props?.patientObj?.uniqueId\r\n            objValues.assessmentForAcuteHivInfection = assessmentForAcuteHivInfection\r\n            objValues.assessmentForPepIndication = assessmentForPepIndication\r\n            objValues.assessmentForPrepEligibility = assessmentForPrepEligibility\r\n            objValues.servicesReceivedByClient = servicesReceivedByClient\r\n            objValues.score = getPrepEligibilityScore();\r\n            if (props.activeContent && props.activeContent.actionType === \"update\") {//Perform operation for updation action\r\n                axios.put(`${baseUrl}prep-eligibility/${props.activeContent.id}`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },)\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        props.patientObj.eligibilityCount = 1\r\n                        props.patientObj.hivresultAtVisit = drugHistory.hivTestResultAtvisit\r\n                        props.PatientObject();\r\n                        toast.success(\"Prep Eligilibility save successful!\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            } else {\r\n                axios.post(`${baseUrl}prep/eligibility`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },)\r\n                    .then(response => {\r\n                        setSaving(false);\r\n                        props.patientObj.eligibilityCount = 1\r\n                        //props.setPatientObj(response.data)\r\n                        props.patientObj.hivresultAtVisit = drugHistory.hivTestResultAtvisit\r\n                        toast.success(\"Prep Eligilibility save successful!\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            }\r\n\r\n        } else {\r\n            setSaving(false);\r\n            toast.error(\"All field are required \", { position: toast.POSITION.BOTTOM_CENTER });\r\n        }\r\n    }\r\n\r\n    const isFemale = () => {\r\n        return props.patientObj.gender.toLowerCase() === \"female\";\r\n    }\r\n\r\n    const is30AndAbove = () => {\r\n        return Number(props.patientObj.age) >= 30;\r\n    }\r\n\r\n    const getIndicationForPepResult = () => {\r\n        if (assessmentForPepIndication !== null && assessmentForPepIndication !== undefined) {\r\n            return Object.values(assessmentForPepIndication).filter((each) => (each === \"true\")).length > 0 ? 0 : 1\r\n        }\r\n    }\r\n\r\n    const getAcuteHivResult = () => {\r\n        if (assessmentForAcuteHivInfection !== null && assessmentForAcuteHivInfection !== undefined) {\r\n            return Object.values(assessmentForAcuteHivInfection).filter((each) => (each === \"true\")).length > 0 ? 0 : 1\r\n        }\r\n    }\r\n\r\n    const getPrepEligibilityScore = () => {\r\n        var score = 0;\r\n        score += drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0\r\n        score += riskCount.length > 0 ? 1 : 0\r\n        score += getAcuteHivResult()\r\n        score += getIndicationForPepResult()\r\n        if (is30AndAbove() && isFemale() === false) {\r\n            score += assessmentForPrepEligibility?.hasNoProteinuria === \"true\" ? 1 : 0;\r\n        }\r\n        score += assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa === \"true\" ? 1 : 0;\r\n        score += assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa === \"true\" ? 1 : 0;\r\n        score += assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa === \"true\" ? 1 : 0;\r\n\r\n        if (is30AndAbove() && isFemale() === false) {\r\n            return score >= 8 ? 1 : 0;\r\n        } else {\r\n            return score >= 7 ? 1 : 0;\r\n        }\r\n    }\r\n    const [recentActivities, setRecentActivities] = useState([])\r\n    function countPrepEligibility(data) {\r\n        let count = 0;\r\n        let relevantActivities = ['Prep Commencement', 'Prep Clinic']\r\n        data.forEach(entry => {\r\n          entry?.activities?.forEach(activity => {\r\n            if (relevantActivities.includes(activity?.name)) {\r\n              count++;\r\n            }\r\n          });\r\n        });\r\n    \r\n        return count;\r\n      }\r\n    const getRecentActivities = () => {\r\n        axios\r\n            .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setRecentActivities(response.data)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n\r\n    }\r\n    useEffect(() => getRecentActivities(), [])\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <h2>PrEP Eligibilty Screening Form</h2>\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Visit Date <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        className=\"form-control\"\r\n                                        name=\"visitDate\"\r\n                                        id=\"visitDate\"\r\n                                        value={objValues.visitDate}\r\n                                        onChange={handleInputChange}\r\n                                        min={props.patientDetail && props.patientDetail.dateHivPositive !== null ? props.patientDetail.dateHivPositive : props.patientObj.dateOfRegistration}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.visitDate !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.visitDate}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Visit type <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"visitType\"\r\n                                        id=\"visitType\"\r\n                                        value={objValues.visitType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {visitType.map((value) => (\r\n                                            <option value={value.code}> {value.display} </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors.visitType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.visitType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Population type <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"populationType\"\r\n                                        id=\"populationType\"\r\n                                        value={objValues.populationType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {populationType.map((value) => (\r\n                                            <option value={value.code}> {value.display} </option>\r\n                                        ))}\r\n                                        {!populationType?.find((pType)=>pType.display === \"GenPop\") && <option value=\"POPULATION_TYPE_GEN_POP\">GenPop</option>}\r\n                                    </select>\r\n                                    {errors.populationType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.populationType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {isFemale() && (\r\n                                <div className=\"form-group col-md-4 p-2\">\r\n                                    <FormGroup className=\"p-2\">\r\n                                        <Label>Pregnancy Status <span style={{ color: \"red\" }}> *</span></Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"pregnancyStatus\"\r\n                                            id=\"pregnancyStatus\"\r\n                                            value={objValues.pregnancyStatus}\r\n                                            onChange={handleInputChange}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            {pregnancyStatus.map((value) => (\r\n                                                <option value={value.code}> {value.display} </option>\r\n                                            ))}\r\n                                        </select>\r\n                                        {errors.pregnancyStatus !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.pregnancyStatus}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Sex partners <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexPartner\"\r\n                                        id=\"sexPartner\"\r\n                                        value={objValues.sexPartner}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"Male\">Male</option>\r\n                                        <option value=\"Female\">Female</option>\r\n                                        <option value=\"Both\">Both</option>\r\n                                    </select>\r\n                                    {errors.sexPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sexPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {props.patientObj.gender === 'Male' || props.patientObj.gender === 'male' && (\r\n                                <div className=\"form-group col-md-4 p-2\">\r\n                                    <FormGroup className=\"p-2\">\r\n                                        <Label>Number of wives </Label>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            name=\"numWives\"\r\n                                            id=\"numWives\"\r\n                                            value={objValues.numWives}\r\n                                            onChange={handleInputChange}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        {errors.numWives !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.numWives}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Type of counseling <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"counselingType\"\r\n                                        id=\"counselingType\"\r\n                                        value={objValues.counselingType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        {counselingType.map((value) => (\r\n                                            <option value={value.id}> {value.display} </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors.counselingType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.counselingType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group my-4 col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }}>\r\n                                HIV Risk Assessment (Last 3 months)\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Unprotected Vaginal sex with casual partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedVaginalSexCasual\"\r\n                                        id=\"unprotectedVaginalSexCasual\"\r\n                                        value={riskAssessment.unprotectedVaginalSexCasual}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedVaginalSexCasual !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedVaginalSexCasual}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-2\">\r\n                                <FormGroup className=\"p-2\">\r\n                                    <Label>Unprotected Vaginal sex with regular partner </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedVaginalSexRegular\"\r\n                                        id=\"unprotectedVaginalSexRegular\"\r\n                                        value={riskAssessment.unprotectedVaginalSexRegular}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedVaginalSexRegular !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedVaginalSexRegular}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup >\r\n                                    <Label>Unprotected Anal sex with regular partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedAnalSexWithRegular\"\r\n                                        id=\"uprotectedAnalSexWithRegular\"\r\n                                        value={riskAssessment.uprotectedAnalSexWithRegular}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.uprotectedAnalSexWithRegular !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.uprotectedAnalSexWithRegular}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>History of STI</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"stiHistory\"\r\n                                        id=\"stiHistory\"\r\n                                        value={riskAssessment.stiHistory}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.stiHistory !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.stiHistory}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Shared needles/injecting materials</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sharedNeedles\"\r\n                                        id=\"sharedNeedles\"\r\n                                        value={riskAssessment.sharedNeedles}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.sharedNeedles !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sharedNeedles}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>More than 1 sex partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"moreThan1SexPartner\"\r\n                                        id=\"moreThan1SexPartner\"\r\n                                        value={riskAssessment.moreThan1SexPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.moreThan1SexPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.moreThan1SexPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal sex with Male/Female partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analSexWithPartner\"\r\n                                        id=\"analSexWithPartner\"\r\n                                        value={riskAssessment.analSexWithPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.analSexWithPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analSexWithPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected Anal sex with male/female partner</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedAnalSexWithPartner\"\r\n                                        id=\"unprotectedAnalSexWithPartner\"\r\n                                        value={riskAssessment.unprotectedAnalSexWithPartner}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedAnalSexWithPartner !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedAnalSexWithPartner}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you paid for sex in the last 6 months?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveYouPaidForSex\"\r\n                                        id=\"haveYouPaidForSex\"\r\n                                        value={riskAssessment.haveYouPaidForSex}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveYouPaidForSex !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveYouPaidForSex}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you been paid for sex in the last 6 months?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                        id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                        value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.moreThanOneSexPartnerLastThreeMonths !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you experienced condom breakage?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"experienceCondomBreakage\"\r\n                                        id=\"experienceCondomBreakage\"\r\n                                        value={riskAssessment.experienceCondomBreakage}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.experienceCondomBreakage !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.experienceCondomBreakage}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you taken part in sexual orgy?\r\n\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"takenPartInSexualOrgy\"\r\n                                        id=\"takenPartInSexualOrgy\"\r\n                                        value={riskAssessment.takenPartInSexualOrgy}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.takenPartInSexualOrgy !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.takenPartInSexualOrgy}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Personal HIV Risk assessment score (sum of all 7 answers)</h4>\r\n                                <b>Score : {riskCount.length}</b>\r\n                            </Message>\r\n                            <hr />\r\n                            <br />\r\n\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Sex Partner Risk Assessment (Last 3 months)</div>\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who is HIV positive?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithHIVPositive\"\r\n                                        id=\"haveSexWithHIVPositive\"\r\n                                        value={riskAssessmentPartner.haveSexWithHIVPositive}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithHIVPositive !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithHIVPositive}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who injects drugs?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerInjectDrug\"\r\n                                        id=\"haveSexWithPartnerInjectDrug\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerInjectDrug}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerInjectDrug !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerInjectDrug}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who has sex with men?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerWhoHasSexWithMen\"\r\n                                        id=\"haveSexWithPartnerWhoHasSexWithMen\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerWhoHasSexWithMen}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerWhoHasSexWithMen !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerWhoHasSexWithMen}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who is a transgender person?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithPartnerTransgender\"\r\n                                        id=\"haveSexWithPartnerTransgender\"\r\n                                        value={riskAssessmentPartner.haveSexWithPartnerTransgender}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.haveSexWithPartnerTransgender !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.haveSexWithPartnerTransgender}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had sex with a partner who has sex with multiple partners without condoms?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexWithPartnersWithoutCondoms\"\r\n                                        id=\"sexWithPartnersWithoutCondoms\"\r\n                                        value={riskAssessmentPartner.sexWithPartnersWithoutCondoms}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.sexWithPartnersWithoutCondoms !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sexWithPartnersWithoutCondoms}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <Message warning>\r\n                                <h4>Sex Partner Risk Assessment score (sum of all 6 answers)</h4>\r\n                                <b>Score: {sexPartRiskCount.length}</b>\r\n                            </Message>\r\n\r\n                            <hr />\r\n                            <br />\r\n\r\n                            <div\r\n                                className=\"form-group col-md-12 text-center p-2 mb-4\"\r\n                                style={{ backgroundColor: '#014D88', width: '125%', color: '#fff', fontWeight: 'bold' }}\r\n                            >\r\n                                Assessment for PEP Indication\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            In the past 72 hours, have you had sex without a condom with someone whose HIV status is positive or not known to you?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        id=\"unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        value={assessmentForPepIndication?.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours}\r\n                                        onChange={handleInputChangeAssessmentForPepIndication}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </select>\r\n                                    {errors.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedSexWithHivPositiveOrUnknownStatusLast72Hours}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you shared injection equipment like needles with someone whose HIV status is positive or unknown to you?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        id=\"sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours\"\r\n                                        value={assessmentForPepIndication?.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours}\r\n                                        onChange={handleInputChangeAssessmentForPepIndication}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.sharedInjectionOrNeedleWithHivPositiveOrUnknownStatusLast72Hours}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#992E62', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }}  >Assessment for Acute HIV Infection</div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            In the past 2 weeks: Have you had a cold or flu such as fever, sore throat, abnormal sweats, swollen lymph nodes, mouth sores, headache or rash?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"acuteHivSymptomsLasttwoWeeks\"\r\n                                        id=\"acuteHivSymptomsLasttwoWeeks\"\r\n                                        value={assessmentForAcuteHivInfection?.acuteHivSymptomsLasttwoWeeks}\r\n                                        onChange={handleInputChangeAssessmentForAcuteHivInfection}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.acuteHivSymptomsLasttwoWeeks !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.acuteHivSymptomsLasttwoWeeks}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Have you had condomless anal or vaginal sex or shared injection materials and/or equipment in the past 28 days?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedAnalOrVaginalOrSharedNeedlesLast28Days\"\r\n                                        id=\"unprotectedAnalOrVaginalOrSharedNeedlesLast28Days\"\r\n                                        value={assessmentForAcuteHivInfection?.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days}\r\n                                        onChange={handleInputChangeAssessmentForAcuteHivInfection}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.unprotectedAnalOrVaginalOrSharedNeedlesLast28Days}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#000', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Drug Use History</div>\r\n                            <hr />\r\n                            <h3>Route of Administration</h3>\r\n                            <h4>\r\n                                    Do you use any of these drugs/substances ?\r\n                            </h4>\r\n                            <br />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Inject</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"inject\"\r\n                                            id=\"inject\"\r\n                                            value={drugHistory.inject}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.inject !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.inject}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Sniff</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"sniff\"\r\n                                            id=\"sniff\"\r\n                                            value={drugHistory.sniff}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.sniff !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.sniff}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Snort</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"Snort\"\r\n                                            id=\"Snort\"\r\n                                            value={drugHistory.fever}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.Snort !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.Snort}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-6 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>Smoke</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"smoke\"\r\n                                            id=\"smoke\"\r\n                                            value={drugHistory.smoke}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.smoke !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.smoke}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Have you used drugs to enhance sexual performance ?\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"useDrugSexualPerformance\"\r\n                                            id=\"useDrugSexualPerformance\"\r\n                                            value={drugHistory.useDrugSexualPerformance}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.useDrugSexualPerformance !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.useDrugSexualPerformance}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Have you had HIV testing before ?\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivTestedBefore\"\r\n                                            id=\"hivTestedBefore\"\r\n                                            value={drugHistory.hivTestedBefore}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n                                        </select>\r\n                                        {errors.hivTestedBefore !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivTestedBefore}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                {drugHistory.hivTestedBefore === \"true\" && (\r\n                                    <div className=\"form-group col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    When was your last test?\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"lastTest\"\r\n                                                id=\"lastTest\"\r\n                                                value={drugHistory.lastTest}\r\n                                                onChange={handleInputChangeDrugHistory}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"1 Month\">{\"<\"}1 Month</option>\r\n                                                <option value=\"1-3 Months\">1-3 Months</option>\r\n                                                <option value=\"4-6Months\">4-6 Months</option>\r\n                                                <option value=\"6Months\">{\">\"}6 months</option>\r\n                                            </select>\r\n                                            {errors.lastTest !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.lastTest}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                )}\r\n\r\n                                <div className=\"form-group col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>HIV test result at visit <span style={{ color: \"red\" }}> *</span></Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivTestResultAtvisit\"\r\n                                            id=\"hivTestResultAtvisit\"\r\n                                            value={drugHistory.hivTestResultAtvisit}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"Positive\">Positive</option>\r\n                                            <option value=\"Negative\">Negative</option>\r\n                                        </select>\r\n                                        {errors.hivTestResultAtvisit !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivTestResultAtvisit}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Recommended for HIV Retest ?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"recommendHivRetest\"\r\n                                            id=\"recommendHivRetest\"\r\n                                            value={drugHistory.recommendHivRetest}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.recommendHivRetest !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.recommendHivRetest}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Tested in certain Clinical settings, such as STI clinics?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"clinicalSetting\"\r\n                                            id=\"clinicalSetting\"\r\n                                            value={drugHistory.clinicalSetting}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.clinicalSetting !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.clinicalSetting}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Report ongoing HIV risk behaviors?\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"reportHivRisk\"\r\n                                            id=\"reportHivRisk\"\r\n                                            value={drugHistory.reportHivRisk}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.reportHivRisk !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.reportHivRisk}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                                <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>\r\n                                                Report a specific HIV exposure within the last 3 months\r\n\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hivExposure\"\r\n                                            id=\"hivExposure\"\r\n                                            value={drugHistory.hivExposure}\r\n                                            onChange={handleInputChangeDrugHistory}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.hivExposure !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hivExposure}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"col-md-12 text-center pt-2 mb-4\" style={{ backgroundColor: '#014D88', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Syndromic STI Screening</div>\r\n                            {props.patientDetail && props.patientDetail.personResponseDto.sex === 'Female' && (\r\n                                <>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of vaginal discharge or burning when urinating?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"vaginalDischarge\"\r\n                                                id=\"vaginalDischarge\"\r\n                                                value={stiScreening.vaginalDischarge}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.vaginalDischarge !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.vaginalDischarge}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\nComplaints of lower abdominal pains with or without vaginal discharge?\r\n\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"lowerAbdominalPains\"\r\n                                                id=\"lowerAbdominalPains\"\r\n                                                value={stiScreening.lowerAbdominalPains}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.lowerAbdominalPains !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.lowerAbdominalPains}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)}\r\n                            {props.patientObj.personResponseDto && props.patientDetail.personResponseDto.sex === 'Male' && (\r\n                                <>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of urethral discharge or burning when urinating?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"urethralDischarge\"\r\n                                                id=\"urethralDischarge\"\r\n                                                value={stiScreening.urethralDischarge}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.urethralDischarge !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.urethralDischarge}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of scrotal swelling and pain\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"complaintsOfScrotal\"\r\n                                                id=\"complaintsOfScrotal\"\r\n                                                value={stiScreening.complaintsOfScrotal}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.complaintsOfScrotal !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.complaintsOfScrotal}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div className=\"form-group  col-md-4 p-3\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                    Complaints of genital sore(s) or swollen inguinal lymph nodes with or without pains?\r\n\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"complaintsGenitalSore\"\r\n                                                id=\"complaintsGenitalSore\"\r\n                                                value={stiScreening.complaintsGenitalSore}\r\n                                                onChange={handleInputChangeStiScreening}\r\n                                                style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                                disabled={disabledField}\r\n                                            >\r\n                                                <option value={\"\"}>Select</option>\r\n                                                <option value=\"true\">Yes</option>\r\n                                                <option value=\"false\">No</option>\r\n\r\n                                            </select>\r\n                                            {errors.complaintsGenitalSore !== \"\" ? (\r\n                                                <span className={classes.error}>{errors.complaintsGenitalSore}</span>\r\n                                            ) : \"\"}\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </>)}\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            Genital sore +/-pains?\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"genitalScore\"\r\n                                        id=\"genitalScore\"\r\n                                        value={stiScreening.genitalScore}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.genitalScore !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.genitalScore}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Swollen iguinal lymph node +/-pains?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"swollenIguinal\"\r\n                                        id=\"swollenIguinal\"\r\n                                        value={stiScreening.swollenIguinal}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.swollenIguinal !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.swollenIguinal}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal pain on stooling?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analpain\"\r\n                                        id=\"analpain\"\r\n                                        value={stiScreening.analpain}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analpain !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analpain}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal itching?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analItching\"\r\n                                        id=\"analItching\"\r\n                                        value={stiScreening.analItching}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analItching !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analItching}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>Anal discharge?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"analDischarge\"\r\n                                        id=\"analDischarge\"\r\n                                        value={stiScreening.analDischarge}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.analDischarge !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.analDischarge}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of the STI screening. If {\">= \"}1, should be referred for STI test </h4>\r\n                                <b>Score :{stiCount.length}</b>\r\n                            </Message>\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4 p-3\" style={{ backgroundColor: '#014D88', width: '125%', height: '35px', color: '#fff', fontWeight: 'bold' }} >Assessment for PrEP Eligibilty</div>\r\n\r\n                            <div className=\"col-md-6 p-3\">\r\n                                <div className=\"d-flex\">\r\n                                    <div style={{ flex: 1 }}>\r\n                                        <FormGroup>\r\n                                            <Label>HIV Negative: <span className=\"badge badge-info\">{`${drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0}`}</span> </Label>\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                    <div style={{ flex: 1 }}>\r\n                                        <Label>HIV Risk Score &gt; 1: <span className=\"badge badge-info\">{`${riskCount.length > 0 ? 1 : 0}`}</span></Label>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {true && <div className=\"form-group  col-md-4 p-3\">\r\n                                    <FormGroup>\r\n                                        <Label>{`Has no proteinuria (>=30 Years)`}</Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"hasNoProteinuria\"\r\n                                            id=\"hasNoProteinuria\"\r\n                                            value={assessmentForPrepEligibility?.hasNoProteinuria}\r\n                                            onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value={\"\"}>Select</option>\r\n                                            <option value=\"true\">Yes</option>\r\n                                            <option value=\"false\">No</option>\r\n\r\n                                        </select>\r\n                                        {errors.hasNoProteinuria !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.hasNoProteinuria}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n                                </div>}\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                            {`No history/signs & symptoms of Liver abnormalities (CAB-LA)`}\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOrSignsOfLiverAbnormalitiesCabLa\"\r\n                                        id=\"noHistoryOrSignsOfLiverAbnormalitiesCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOrSignsOfLiverAbnormalitiesCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOrSignsOfLiverAbnormalitiesCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`No history of PrEP drug interaction (CAB-LA)`}</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOfDrugToDrugInteractionCabLa\"\r\n                                        id=\"noHistoryOfDrugToDrugInteractionCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOfDrugToDrugInteractionCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOfDrugToDrugInteractionCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-6 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`No history of drug hypersensitivity (CAB-LA)`}</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"noHistoryOfDrugHypersensitivityCabLa\"\r\n                                        id=\"noHistoryOfDrugHypersensitivityCabLa\"\r\n                                        value={assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa}\r\n                                        onChange={handleInputChangeAssessmentForPrepEligibility}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.noHistoryOfDrugHypersensitivityCabLa !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.noHistoryOfDrugHypersensitivityCabLa}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of PrEP Eligibility. If {\">= \"}1 client is Eligible for PrEP.  (Score: Count Yes=1, No=0).</h4>\r\n                                {/* <b>Score :{stiCount.length}</b> */}\r\n                                <h5>{`HIV Negative: ${drugHistory.hivTestResultAtvisit === \"Negative\" ? 1 : 0}`}</h5>\r\n                                <h5>{`HIV risk score >=1 : ${riskCount.length > 0 ? 1 : 0}`}</h5>\r\n                                <h5>{`No signs & symptoms of acute HIV infection: ${getAcuteHivResult()}`}</h5>\r\n                                <h5>{`No Indication for PEP: ${getIndicationForPepResult()}`}</h5>\r\n                                {(is30AndAbove() && isFemale() === false) && <h5>{`Has no proteinuria: ${assessmentForPrepEligibility?.hasNoProteinuria === \"true\" ? 1 : 0}`}</h5>}\r\n\r\n                            </Message>\r\n                            <Message warning>\r\n                                <h4>Calculate the sum of PrEP Eligibility for CAB-LA regimen. If the following below =1 client is Eligible for CAB-LA. {`(Score: Count Yes=1, No=0)`}</h4>\r\n                                {/* <b>Score :{stiCount.length}</b> */}\r\n                                <h5>{`No history / signs & symptoms of Liver abnormalities (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOrSignsOfLiverAbnormalitiesCabLa === \"true\" ? 1 : 0}`}</h5>\r\n                                <h5>{`No history of PrEP drug interaction (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOfDrugToDrugInteractionCabLa === \"true\" ? 1 : 0}`}</h5>\r\n                                <h5>{`No history of drug hypersensitivity (CAB-LA): ${assessmentForPrepEligibility?.noHistoryOfDrugHypersensitivityCabLa === \"true\" ? 1 : 0}`}</h5>\r\n\r\n                            </Message>\r\n                            {/* <Message warning>\r\n                                <h3>{`Final Prep Eligibility Score: ${getPrepEligibilityScore()}`}</h3>\r\n                            </Message> */}\r\n                            <hr />\r\n                            <br />\r\n                            <div className=\"form-group  col-md-12 text-center mb-4 p-2\" style={{ backgroundColor: '#014D88', width: '125%', color: '#fff', fontWeight: 'bold' }} >Services Received by Client</div>\r\n                            <div className=\"form-group  col-md-4 \">\r\n                                <FormGroup>\r\n                                    <Label>Willing to commence PrEP</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"willingToCommencePrep\"\r\n                                        id=\"willingToCommencePrep\"\r\n                                        value={servicesReceivedByClient?.willingToCommencePrep}\r\n                                        onChange={handleInputChangeServicesReceivedByClient}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value={\"\"}>Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n\r\n                                    </select>\r\n                                    {errors.willingToCommencePrep !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.willingToCommencePrep}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n\r\n                            {/* <Dropdown placeholder='Skills' fluid multiple selection options={reasonForDecline} /> */}\r\n                            {servicesReceivedByClient?.willingToCommencePrep === 'false' && <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Reasons for Declining PrEP</Label>\r\n                                    <Dropdown value={servicesReceivedByClient?.reasonsForDecline} placeholder='select reasons for decline' onChange={handleInputReasonsForDecline} fluid multiple selection options={reasonForDecline.map((each) => {\r\n                                        return { key: each.code, text: each.display, value: each.code }\r\n                                    })} />\r\n                                    {errors.reasonsForDecline !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.reasonsForDecline}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>}\r\n                            {(servicesReceivedByClient?.reasonsForDecline?.find((one) => one === \"REASON_PREP_DECLINED_OTHERS_(SPECIFY)\") !== (null || undefined)) && <div className=\"form-group  col-md-12 p-3\">\r\n                                <FormGroup>\r\n                                    <Label>{`Other Reasons for Declining PrEP (Specify)`}</Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        name=\"otherReasonsForDecline\"\r\n                                        id=\"otherReasonsForDecline\"\r\n                                        value={servicesReceivedByClient?.otherReasonsForDecline}\r\n                                        onChange={handleInputChangeServicesReceivedByClient}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                    {errors.reasonsForDecline !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.reasonsForDecline}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>}\r\n\r\n\r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-12 p-3\">\r\n                                    {props.activeContent && props.activeContent.actionType === \"update\" ? (<>\r\n                                        <MatButton\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            hidden={disabledField}\r\n                                            className={classes.button}\r\n                                            startIcon={<SaveIcon />}\r\n                                            style={{ backgroundColor: \"#014d88\" }}\r\n                                            onClick={handleSubmit}\r\n                                            disabled={saving}\r\n                                        >\r\n                                            {!saving ? (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                            ) : (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                            )}\r\n                                        </MatButton>\r\n                                    </>) : (<>\r\n                                        <MatButton\r\n                                            type=\"submit\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.button}\r\n                                            startIcon={<SaveIcon />}\r\n                                            style={{ backgroundColor: \"#014d88\" }}\r\n                                            onClick={handleSubmit}\r\n                                            disabled={saving}\r\n                                        >\r\n                                            {!saving ? (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                            ) : (\r\n                                                <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                            )}\r\n                                        </MatButton>\r\n                                    </>)}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPCommencementForm.js",["215","216","217"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Card, CardBody, FormGroup, Label, Input, InputGroup,\r\n    InputGroupText, Label as FormLabelName,\r\n} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import Moment from \"moment\";\r\n// import momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& .card-title\": {\r\n            color: '#fff',\r\n            fontWeight: 'bold'\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: '0.25rem',\r\n            height: '41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\": {\r\n            color: 'red'\r\n        },\r\n        \"& label\": {\r\n            fontSize: '14px',\r\n            color: '#014d88',\r\n            fontWeight: 'bold'\r\n        },\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n}))\r\n\r\nconst PrEPCommencementForm = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    const classes = useStyles()\r\n    const [disabledField, setSisabledField] = useState(false);\r\n    const [prepRegimen, setprepRegimen] = useState([]);\r\n    const [historyOfDrugToDrugInteraction, setHistoryOfDrugToDrugInteraction] = useState([])\r\n    const [objValues, setObjValues] = useState({\r\n        dateInitialAdherenceCounseling: \"\",\r\n        datePrepStart: \"\",\r\n        height: \"\",\r\n        personId: patientObj.personId,\r\n        prepClientId: props.prepId,\r\n        regimenId: null,\r\n        urinalysisResult: \"\",\r\n        prepEligibilityUuid: \"\",\r\n        weight: \"\",\r\n        drugAllergies: \"\",\r\n        referred: \"\",\r\n        datereferred: \"\",\r\n        extra: {},\r\n        nextAppointment: \"\",\r\n        pregnant: true,\r\n        prepEnrollmentUuid: \"\",\r\n        duration: \"\",\r\n        prepDistributionSetting: \"\",\r\n        prepType: \"\",\r\n        monthsOfRefill: \"\",\r\n        liverFunctionTestResults: \"\",\r\n        dateLiverFunctionTestResults: \"\",\r\n        historyOfDrugToDrugInteraction: \"\"\r\n    });\r\n\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [pregnant, setpregnant] = useState([]);\r\n    const [patientDto, setPatientDto] = useState();\r\n    const [prepEntryPoint, setPrepEntryPoints] = useState([]);\r\n    const [urinalysisTestResult, setUrinalysisTestResult] = useState([]);\r\n    const [prepType, setPrepType] = useState([]);\r\n    const [liverFunctionTestResult, setLiverFunctionTestResult] = useState([]);\r\n\r\n    useEffect(() => {\r\n        PREGANACY_STATUS();\r\n        GetPatientDTOObj();\r\n        PrepRegimen();\r\n        PREP_ENTRY_POINT();\r\n        PREP_TYPE();\r\n        LiverFunctionTestResult();\r\n        HistoryOfDrugToDrugInteraction();\r\n        PREP_URINALYSIS_RESULT();\r\n        if (props.activeContent.id && props.activeContent.id !== \"\" && props.activeContent.id !== null) {\r\n            GetPatientCommercement(props.activeContent.id)\r\n            setSisabledField(props.activeContent.actionType === 'view' ? true : false)\r\n        }\r\n    }, []);\r\n    const PrepRegimen = async () => {\r\n        axios\r\n            .get(`${baseUrl}prep-regimen`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setprepRegimen(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const PREP_ENTRY_POINT = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_ENTRY_POINT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPrepEntryPoints(response.data);\r\n                // console.log(\"prep\", prepEntryPoint)\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const PREP_URINALYSIS_RESULT = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_URINALYSIS_RESULT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n\r\n                setUrinalysisTestResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n\r\n            });\r\n\r\n    }\r\n\r\n\r\n    const PREP_TYPE = async () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PrEP_TYPE`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPrepType(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    const LiverFunctionTestResult = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/LIVER_FUNCTION_TEST_RESULT`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setLiverFunctionTestResult(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const HistoryOfDrugToDrugInteraction = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREP_HISTORY_OF_DRUG_INTERACTIONS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setHistoryOfDrugToDrugInteraction(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n\r\n    const GetPatientCommercement = (id) => {\r\n        axios\r\n            .get(`${baseUrl}prep/commencement/person/${props.patientObj.personId}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                //console.log(response.data.find((x)=> x.id===id));\r\n                setObjValues(response.data.find((x) => x.id === id));\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const PREGANACY_STATUS = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setpregnant(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    const GetPatientDTOObj = () => {\r\n        axios\r\n            .get(`${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\r\n                { headers: { \"Authorization\": `Bearer ${token}` } }\r\n            )\r\n            .then((response) => {\r\n                setPatientDto(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //console.log(error);\r\n            });\r\n    }\r\n    //Vital signs clinical decision support\r\n    const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n        weight: \"\",\r\n        height: \"\",\r\n    })\r\n\r\n\r\n\r\n    const handleInputChange = e => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n\r\n        if (e.target.name === 'referred' && e.target.value === 'false') {\r\n            objValues.datereferred = ''\r\n            setObjValues({ ...objValues, ['datereferred']: '' });\r\n        } else if (e.target.name === 'monthsOfRefill') {\r\n            const durationInDays = (Number(e.target.value) * 30)\r\n            setObjValues({ ...objValues, monthsOfRefill: e.target.value, duration: durationInDays })\r\n\r\n        }\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        temp.dateInitialAdherenceCounseling = objValues.dateInitialAdherenceCounseling ? \"\" : \"This field is required\"\r\n        temp.datePrepStart = objValues.datePrepStart ? \"\" : \"This field is required\"\r\n        temp.prepType = objValues.prepType ? \"\" : \"This field is required\"\r\n        temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\"\r\n        temp.height = objValues.height ? \"\" : \"This field is required\"\r\n        temp.weight = objValues.weight ? \"\" : \"This field is required\"\r\n        temp.referred = objValues.referred ? \"\" : \"This field is required\"\r\n        temp.prepDistributionSetting = objValues.prepDistributionSetting ? \"\" : \"This field is required\"\r\n        //temp.datereferred = objValues.datereferred ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    //to check the input value for clinical decision \r\n    const handleInputValueCheckHeight = (e) => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        if (e.target.name === \"height\" && (e.target.value < 48.26 || e.target.value > 216.408)) {\r\n            const message = \"Height cannot be greater than 216.408 and less than 48.26\"\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, height: message })\r\n        } else {\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, height: \"\" })\r\n        }\r\n    }\r\n    const handleInputValueCheckBodyWeight = (e) => {\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n        if (e.target.name === \"weight\" && (e.target.value < 3 || e.target.value > 150)) {\r\n            const message = \"Body weight must not be greater than 150 and less than 3\"\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, weight: message })\r\n        } else {\r\n            setVitalClinicalSupport({ ...vitalClinicalSupport, weight: \"\" })\r\n        }\r\n    }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            setSaving(true);\r\n            objValues.prepEnrollmentUuid = patientDto.uuid\r\n            if (props.activeContent && props.activeContent.actionType === \"update\") {//Perform operation for updation action\r\n                axios.put(`${baseUrl}prep-clinic/${props.activeContent.id}`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },\r\n                ).then(response => {\r\n                    setSaving(false);\r\n                    patientObj.commencementCount = 1\r\n                    toast.success(\"Record save successful\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                    props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            } else {\r\n                axios.post(`${baseUrl}prep/commencement`, objValues,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } },\r\n                ).then(response => {\r\n                    setSaving(false);\r\n                    patientObj.commencementCount = 1\r\n                    props.PatientObject();\r\n                    toast.success(\"Record save successful\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                    props.setActiveContent({ ...props.activeContent, route: 'recent-history' })\r\n\r\n                })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if (error.response && error.response.data) {\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message !== \"\" ? error.response.data.apierror.message : \"Something went wrong, please try again\";\r\n                            if (error.response.data.apierror) {\r\n                                toast.error(error.response.data.apierror.message, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            } else {\r\n                                toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n                            }\r\n                        } else {\r\n                            toast.error(\"Something went wrong, please try again...\", { position: toast.POSITION.BOTTOM_CENTER });\r\n                        }\r\n                    });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // console.log(props.patientObj.gender)\r\n\r\n    const handlePrepTypeChange = (e) => {\r\n        // check the prep type. if it is ed prep or others, fetch all prep types instead\r\n\r\n        setObjValues({ ...objValues, regimenId: \"\", prepType: e.target.value })\r\n        if (e.target.value === 'PREP_TYPE_OTHERS' || e.target.value === 'PREP_TYPE_ED_PREP') {\r\n            PrepRegimen();\r\n        } else {\r\n            axios\r\n                .get(`${baseUrl}prep-regimen/prepType?prepType=${e.target.value}`,\r\n                    { headers: { \"Authorization\": `Bearer ${token}` } }\r\n                )\r\n                .then((response) => {\r\n                    setprepRegimen(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    //console.log(error);\r\n                });\r\n        }\r\n\r\n        setErrors({ ...errors, [e.target.name]: \"\" })\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <h2> PrEP Commencement </h2>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"uniqueId\">Date of Initial Adherence Counseling <span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"dateInitialAdherenceCounseling\"\r\n                                        id=\"dateInitialAdherenceCounseling\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.dateInitialAdherenceCounseling}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateInitialAdherenceCounseling !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateInitialAdherenceCounseling}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>Date PrEP started <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"datePrepStart\"\r\n                                        id=\"datePrepStart\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.datePrepStart}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.datePrepStart !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.datePrepStart}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\" mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Body Weight <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <InputGroup>\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            name=\"weight\"\r\n                                            id=\"weight\"\r\n                                            onChange={handleInputChange}\r\n                                            min=\"3\"\r\n                                            max=\"150\"\r\n                                            value={objValues.weight}\r\n                                            onKeyUp={handleInputValueCheckBodyWeight}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0rem\" }}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        <InputGroupText addonType=\"append\" style={{\r\n                                            backgroundColor: \"#014D88\",\r\n                                            color: \"#fff\",\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0rem\"\r\n                                        }}>\r\n                                            kg\r\n                                        </InputGroupText>\r\n                                    </InputGroup>\r\n                                    {vitalClinicalSupport.bodyWeight !== \"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.bodyWeight}</span>\r\n                                    ) : \"\"}\r\n                                    {errors.weight !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.weight}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Height <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <InputGroup>\r\n                                        <InputGroupText\r\n                                            addonType=\"append\"\r\n                                            style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}\r\n                                        >\r\n                                            cm\r\n                                        </InputGroupText>\r\n                                        <Input\r\n                                            type=\"number\"\r\n                                            name=\"height\"\r\n                                            id=\"height\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.height}\r\n                                            min=\"48.26\"\r\n                                            max=\"216.408\"\r\n                                            disabled={disabledField}\r\n                                            onKeyUp={handleInputValueCheckHeight}\r\n                                            style={{ border: \"1px solid #014D88\", borderRadius: \"0rem\" }}\r\n                                        />\r\n                                        <InputGroupText\r\n                                            addonType=\"append\"\r\n\r\n                                            style={{\r\n                                                backgroundColor: \"#992E62\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #992E62\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}\r\n                                        >\r\n                                            {objValues.height !== '' ? (objValues.height / 100).toFixed(2) + \"m\" : \"m\"}\r\n                                        </InputGroupText>\r\n                                    </InputGroup>\r\n                                    {vitalClinicalSupport.height !== \"\" ? (\r\n                                        <span className={classes.error}>{vitalClinicalSupport.height}</span>\r\n                                    ) : \"\"}\r\n                                    {errors.height !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.height}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 mt-2 col-md-4\">\r\n                                {objValues.weight !== \"\" && objValues.height !== '' && (\r\n                                    <FormGroup>\r\n                                        <Label> {\" \"}</Label>\r\n                                        <InputGroup>\r\n                                            <InputGroupText addonType=\"append\" style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"#fff\",\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0rem\"\r\n                                            }}>\r\n                                                BMI\r\n                                                : {(objValues.weight / ((objValues.height / 100) * (objValues.height / 100))).toFixed(2)}\r\n                                            </InputGroupText>\r\n\r\n                                        </InputGroup>\r\n                                    </FormGroup>\r\n                                )}\r\n                            </div>\r\n                            {(props.patientObj.gender === 'Female' || props.patientObj.gender === 'female' || props.patientObj.gender === 'FEMALE') && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"\">Pregnancy Status</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"pregnant\"\r\n                                            id=\"pregnant\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.pregnant}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value=\"\"></option>\r\n                                            {pregnant.map((value) => (\r\n                                                <option key={value.id} value={value.code}>\r\n                                                    {value.display}\r\n                                                </option>\r\n                                            ))}\r\n\r\n                                        </Input>\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n                            {objValues.pregnant === 'PREGANACY_STATUS_BREASTFEEDING' && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"\">Breast Feeding</Label>\r\n                                        <Input\r\n                                            type=\"select\"\r\n                                            name=\"breastFeeding\"\r\n                                            id=\"breastFeeding\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.breastFeeding}\r\n                                            disabled={disabledField}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Yes\"> Yes</option>\r\n                                            <option value=\"No\"> No</option>\r\n                                        </Input>\r\n\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">History of drug Allergies</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"drugAllergies\"\r\n                                        id=\"drugAllergies\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.drugAllergies}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                    </Input>\r\n\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"urinalysisResult\">Urinalysis Result</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"urinalysisResult\"\r\n                                        id=\"urinalysisResult\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.urinalysisResult}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {urinalysisTestResult.map((value) => (\r\n                                            <option key={value.id} value={value.display}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"historyOfDrugToDrugInteraction\">History of PrEP drug interactions\r\n                                        {/* <span style={{color: \"red\"}}> *</span> */}\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"select\"\r\n                                        name=\"historyOfDrugToDrugInteraction\"\r\n                                        id=\"historyOfDrugToDrugInteraction\"\r\n                                        // min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        // max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.historyOfDrugToDrugInteraction}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select </option>\r\n                                        {historyOfDrugToDrugInteraction.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                    {errors.historyOfDrugToDrugInteraction !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.historyOfDrugToDrugInteraction}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"liverFunctionTestResults\">Liver Function Tests Result<span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"select\"\r\n                                        name=\"liverFunctionTestResults\"\r\n                                        id=\"liverFunctionTestResults\"\r\n                                        // min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        // max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.liverFunctionTestResults}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select Result</option>\r\n                                        {liverFunctionTestResult.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Input>\r\n                                    {errors.liverFunctionTestResults !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.liverFunctionTestResults}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"dateLiverFunctionTestResults\">Date of Liver Function Tests Result  <span\r\n                                        style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"date\"\r\n                                        onKeyDown={(e) => e.preventDefault()}\r\n                                        name=\"dateLiverFunctionTestResults\"\r\n                                        id=\"dateLiverFunctionTestResults\"\r\n                                        min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        value={objValues.dateLiverFunctionTestResults}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.2rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.dateLiverFunctionTestResults !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateLiverFunctionTestResults}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">Referred <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"referred\"\r\n                                        id=\"referred\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.referred}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"true\"> Yes</option>\r\n                                        <option value=\"false\"> No</option>\r\n                                    </Input>\r\n                                    {errors.referred !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.referred}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            {objValues.referred === 'true' && (\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"datereferred\">Date referred</Label>\r\n                                        <Input\r\n                                            type=\"date\"\r\n                                            onKeyDown={(e) => e.preventDefault()}\r\n                                            name=\"datereferred\"\r\n                                            id=\"datereferred\"\r\n                                            onChange={handleInputChange}\r\n                                            value={objValues.datereferred}\r\n                                            min={patientDto && patientDto.dateEnrolled ? patientDto.dateEnrolled : \"\"}\r\n                                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                            disabled={disabledField}\r\n                                        />\r\n                                        {errors.datereferred !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.datereferred}</span>\r\n                                        ) : \"\"}\r\n                                    </FormGroup>\r\n\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <FormLabelName for=\"prepType\">Prep Type At Start <span\r\n                                        style={{ color: \"red\" }}> *</span></FormLabelName>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"prepType\"\r\n                                        id=\"prepType\"\r\n                                        // disabled\r\n                                        onChange={handlePrepTypeChange}\r\n                                        value={objValues.prepType}\r\n                                    // disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\">Select Prep Type</option>\r\n                                        {prepType.map((value) => (\r\n                                            <option key={value.id} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.prepType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.prepType}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label for=\"regimenId\">PrEP Regimen <span style={{ color: \"red\" }}> *</span></Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"regimenId\"\r\n                                        id=\"regimenId\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.regimenId}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"> Select</option>\r\n                                        {prepRegimen.map((value) => (\r\n                                            <option key={value.id} value={value.id}>\r\n                                                {value.regimen}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.regimenId !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.regimenId}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <FormLabelName for=\"\">Prep Distribution Setting <span\r\n                                        style={{ color: \"red\" }}> *</span></FormLabelName>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"prepDistributionSetting\"\r\n                                        id=\"prepDistributionSetting\"\r\n                                        onChange={handleInputChange}\r\n                                        value={objValues.prepDistributionSetting}\r\n                                        disabled={disabledField}\r\n                                    >\r\n                                        <option value=\"\"></option>\r\n                                        {prepEntryPoint.map((value) => (\r\n                                            <option key={value.code} value={value.code}>\r\n                                                {value.display}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                    </Input>\r\n                                    {errors.prepDistributionSetting !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.prepDistributionSetting}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {/* <div className=\" mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Date PrEP Given</Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                onKeyDown={(e)=>e.preventDefault()}\r\n                                name=\"datePrepGiven\"\r\n                                id=\"datePrepGiven\"\r\n                                value={objValues.datePrepGiven}\r\n                                onChange={handleInputChange}\r\n                                style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                disabled={disabledField}\r\n                            />\r\n                                \r\n                            </FormGroup>\r\n                        </div>  */}\r\n                            {/* <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>Duration</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={objValues.duration}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius: \"0.25rem\"}}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                </FormGroup>\r\n                            </div> */}\r\n                            <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <Label>{`Duration of Refill (Day[s])`}</Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"monthsOfRefill\"\r\n                                        id=\"monthsOfRefill\"\r\n                                        value={objValues.monthsOfRefill}\r\n                                        min={0}\r\n                                        onChange={handleInputChange}\r\n                                        style={{ border: \"1px solid #014D88\", borderRadius: \"0.25rem\" }}\r\n                                        disabled={disabledField}\r\n                                    />\r\n\r\n                                </FormGroup>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {saving ? <Spinner /> : \"\"}\r\n                        <br />\r\n\r\n                        {props.activeContent && props.activeContent.actionType ? (<>\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                hidden={disabledField}\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{ backgroundColor: \"#014d88\" }}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Update</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Updating...</span>\r\n                                )}\r\n                            </MatButton>\r\n                        </>) : (<>\r\n                            <MatButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                style={{ backgroundColor: \"#014d88\" }}\r\n                                onClick={handleSubmit}\r\n                                disabled={saving}\r\n                            >\r\n                                {!saving ? (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                                ) : (\r\n                                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                                )}\r\n                            </MatButton>\r\n                        </>)}\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrEPCommencementForm;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Index.js",["218"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { Row, Col, Card, Tab, Tabs, } from \"react-bootstrap\";\r\nimport ConsultationPage from './Home';\r\nimport ClinicHistoryPage from \"./ClinicHistory\";\r\nimport { token, url as baseUrl } from \"../../../api\";\r\nimport axios from \"axios\";\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst ClinicVisitPage = (props) => {\r\n  const [key, setKey] = useState('home');\r\n  const patientObj = props.patientObj\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n  const getPatientHistory = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/person/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setRecentActivities(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  const [encounters, setEncounters] = useState([])\r\n\r\n  const fetchListOfEncounters = () => {\r\n    setLoading(true)\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?isCommenced=false&last=false`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setEncounters(response.data)\r\n      })\r\n\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setKey(props.activeContent.activeTab)\r\n  }, [props.activeContent]);\r\n\r\n  useEffect(() => { fetchListOfEncounters() }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                  id=\"controlled-tab-example\"\r\n                  activeKey={key}\r\n                  onSelect={(k) => setKey(k)}\r\n                  className=\"mb-3\"\r\n                >\r\n\r\n                  <Tab eventKey=\"home\" title=\"CLINIC VISIT \">\r\n                    <ConsultationPage encounters={encounters}  recentActivities={recentActivities} patientObj={patientObj} setActiveContent={props.setActiveContent} activeContent={props.activeContent} />\r\n                  </Tab>\r\n                  <Tab eventKey=\"history\" title=\"HISTORY\">\r\n                    <ClinicHistoryPage encounters={encounters} getPatientHistory={getPatientHistory} loading={loading} recentActivities={recentActivities} patientObj={patientObj} activeContent={props.activeContent} setActiveContent={props.setActiveContent} />\r\n                  </Tab>\r\n                </Tabs>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ClinicVisitPage;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPRegistrationForm.js",["219","220","221","222","223","224"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPVisit.js",["225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst PrEPVisit = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [objValues, setObjValues] = useState({id:\"\", uniqueId: \"\",dateOfRegistration:\"\",entryPointId:\"\", facilityName:\"\",statusAtRegistrationId:\"\",dateConfirmedHiv:\"\",sourceOfReferrer:\"\",enrollmentSettingId:\"\",pregnancyStatusId:\"\",dateOfLpm:\"\",tbStatusId:\"\",targetGroupId:\"\",ovc_enrolled:\"\",ovcNumber:\"\"});\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [carePoints, setCarePoints] = useState([]);\r\n    const [hivStatus, setHivStatus] = useState([]);\r\n    //set ro show the facility name field if is transfer in \r\n    const [transferIn, setTransferIn] = useState(false);\r\n    // display the OVC number if patient is enrolled into OVC \r\n    const [ovcEnrolled, setOvcEnrolled] = useState(false);\r\n\r\n    useEffect(() => {         \r\n\r\n      }, []);\r\n\r\n    const handleInputChange = e => {\r\n        \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        if(e.target.name ===\"entryPointId\" ){\r\n            if(e.target.value===\"21\"){\r\n                setTransferIn(true)\r\n            }else{\r\n                setTransferIn(false)\r\n            }\r\n        }\r\n\r\n    }\r\n          \r\n    //Handle CheckBox \r\n    const handleCheckBox =e =>{\r\n        if(e.target.checked){\r\n            setOvcEnrolled(true)\r\n        }else{\r\n            setOvcEnrolled(false)\r\n        }\r\n    }  \r\n    \r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        //temp.name = details.name ? \"\" : \"This field is required\"\r\n        //temp.description = details.description ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        \r\n          objValues.personId= patientObj.id\r\n          patientObj.enrolled=true\r\n          delete objValues['tableData'];\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}hiv/enrollment`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Record save successful\");\r\n                  props.toggle()\r\n                  props.patientObj.enrolled=true\r\n                  props.PatientCurrentStatus()\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n        <div>                  \r\n            <Card >\r\n                <CardBody>\r\n                <form >\r\n                    <div className=\"row\">\r\n                        <h2>PrEP Visit</h2>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"uniqueId\">Duration on PErp  </Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"uniqueId\"\r\n                                id=\"uniqueId\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.uniqueId}\r\n                                required\r\n                            />\r\n                            \r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <hr/>\r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Noted Side Effects</Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"entryPointId\"\r\n                                id=\"entryPointId\"\r\n                                onChange={handleInputChange}\r\n                                value={objValues.entryPointId}\r\n                                required\r\n                            >\r\n                                <option value=\"\">Select </option>\r\n                \r\n                                {carePoints.map((value) => (\r\n                                    <option key={value.id} value={value.id}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                                {errors.entryPointId !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.entryPointId}</span>\r\n                                    ) : \"\" }\r\n                            </Input>\r\n                                \r\n                            </FormGroup>\r\n                        </div>\r\n                        </div>\r\n                        <hr/>\r\n                        \r\n                        <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"entryPointId\">HTS Result</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"entryPointId\"\r\n                            id=\"entryPointId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.entryPointId}\r\n                            required\r\n                        >\r\n                        <option value=\"\"> </option>\r\n            \r\n                        {carePoints.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        {errors.entryPointId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.entryPointId}</span>\r\n                            ) : \"\" }\r\n                        </Input>\r\n                        </FormGroup>\r\n                        \r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"entryPointId\">Risk Reduction Plan</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"entryPointId\"\r\n                            id=\"entryPointId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.entryPointId}\r\n                            required\r\n                        >\r\n                        <option value=\"\"> </option>\r\n            \r\n                        {carePoints.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        {errors.entryPointId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.entryPointId}</span>\r\n                            ) : \"\" }\r\n                        </Input>\r\n                        </FormGroup>\r\n                        \r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"entryPointId\">Syndromic STI Screening</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"entryPointId\"\r\n                            id=\"entryPointId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.entryPointId}\r\n                            required\r\n                        >\r\n                        <option value=\"\"> </option>\r\n            \r\n                        {carePoints.map((value) => (\r\n                            <option key={value.id} value={value.id}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        {errors.entryPointId !==\"\" ? (\r\n                                <span className={classes.error}>{errors.entryPointId}</span>\r\n                            ) : \"\" }\r\n                        </Input>\r\n                        </FormGroup>\r\n                        \r\n                        </div>\r\n                        </div>\r\n                        <hr/>\r\n                        <div className=\"row\">\r\n                        <h3>PrEP Drugs</h3>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Regimen</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"statusAtRegistrationId\"\r\n                            id=\"statusAtRegistrationId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.statusAtRegistrationId}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select </option>\r\n            \r\n                            {hivStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                            {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                ) : \"\" }\r\n                        </Input>\r\n                        </FormGroup>\r\n                        </div>\r\n                    \r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Level of Adherence</Label>\r\n                            <Input\r\n                            type=\"select\"\r\n                            name=\"statusAtRegistrationId\"\r\n                            id=\"statusAtRegistrationId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.statusAtRegistrationId}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select </option>\r\n            \r\n                            {hivStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                            {/* {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                ) : \"\" } */}\r\n                        </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label >Why Poor/Fair Adherence?</Label>\r\n                            <Input\r\n                            type=\"select\"\r\n                            name=\"statusAtRegistrationId\"\r\n                            id=\"statusAtRegistrationId\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.statusAtRegistrationId}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select </option>\r\n            \r\n                            {hivStatus.map((value) => (\r\n                                <option key={value.id} value={value.id}>\r\n                                    {value.display}\r\n                                </option>\r\n                            ))}\r\n                            {errors.statusAtRegistrationId !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.statusAtRegistrationId}</span>\r\n                                ) : \"\" }\r\n                        </Input>\r\n                            </FormGroup>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {saving ? <Spinner /> : \"\"}\r\n                    <br />\r\n                \r\n                    <MatButton\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        startIcon={<SaveIcon />}\r\n                        onClick={handleSubmit}\r\n                        >\r\n                        {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                        ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                        )}\r\n                    </MatButton>\r\n                \r\n                <MatButton\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    startIcon={<CancelIcon />}\r\n                    onClick={props.toggle}\r\n                    \r\n                >\r\n                    <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n                </MatButton>\r\n                \r\n                    </form>\r\n                </CardBody>\r\n            </Card>                    \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default PrEPVisit;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\PrepServices\\PrEPDiscontinuationsInterruptions.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {  Modal, Button } from \"react-bootstrap\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import { DateTimePicker } from \"react-widgets\";\r\n// import Moment from \"moment\";\r\n// import momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        //maxWidth: 752,\r\n        //flexGrow: 1,\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    },  \r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    },\r\n    \r\n}));\r\n\r\nconst PrEPEligibiltyScreeningForm = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    //let history = useHistory();\r\n    const classes = useStyles()\r\n    const [disabledField, setDisabledField] = useState(false);\r\n    const [objValues, setObjValues] = useState({\r\n        dateInterruption: \"\",\r\n        why: \"\",\r\n        interruptionType: \"\",\r\n        dateRestartPlacedBackMedication: \"\",\r\n        personId: patientObj.personId,\r\n        causeOfDeath: \"\",\r\n        dateClientDied: \"\",\r\n        dateClientReferredOut: \"\",\r\n        facilityReferredTo: \"\",\r\n        interruptionDate: \"\",\r\n        interruptionReason: \"\",\r\n        sourceOfDeathInfo: \"\",\r\n        dateSeroconverted:\"\",\r\n        reasonStopped:\"\",\r\n        reasonStoppedOthers:\"\"\r\n      });\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const [prepStatus, setPrepStatus] = useState([]);\r\n    const [reasonStooped, setReasonStooped] = useState([]);\r\n    const [causeOfDeath, setCauseOfDeath] = useState([]);\r\n    const [patientDto, setPatientDto] = useState();\r\n    useEffect(() => {         \r\n        PREP_STATUS();\r\n        PREP_STATUS_STOPPED_REASON();\r\n        GetPatientDTOObj();\r\n        CAUSE_DEATH();\r\n        if(props.activeContent.id && props.activeContent.id!==\"\" && props.activeContent.id!==null){\r\n            GetPatientInterruption(props.activeContent.id)\r\n            setDisabledField(props.activeContent.actionType==='view'? true : false)\r\n        }\r\n    }, []);\r\n    const GetPatientDTOObj =()=>{\r\n        axios\r\n           .get(`${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n               setPatientDto(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });          \r\n    }\r\n    const GetPatientInterruption =(id)=>{\r\n        axios\r\n           .get(`${baseUrl}prep-interruption/${props.activeContent.id}`,\r\n               { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n           )\r\n           .then((response) => {\r\n            //    setObjValues(response.data.find((x)=> x.id===id));\r\n               setObjValues(response.data);\r\n           })\r\n           .catch((error) => {\r\n           //console.log(error);\r\n           });          \r\n    }\r\n    const PREP_STATUS =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREP_STATUS`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setPrepStatus(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const CAUSE_DEATH =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/CAUSE_DEATH`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setCauseOfDeath(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    //\r\n    const PREP_STATUS_STOPPED_REASON =()=>{\r\n        axios\r\n        .get(`${baseUrl}application-codesets/v2/PREP_STATUS_STOPPED_REASON`,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setReasonStooped(response.data);\r\n        })\r\n        .catch((error) => {\r\n        //console.log(error);\r\n        });    \r\n    }\r\n    const handleInputChange = e => { \r\n        setErrors({...errors, [e.target.name]: \"\"}) \r\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_STOPPED'){\r\n            objValues.reasonStopped=\"\"\r\n            objValues.reasonStoppedOthers=\"\"\r\n            setObjValues ({...objValues,  ['reasonStopped']: \"\"});\r\n            setObjValues ({...objValues,  ['reasonStoppedOthers']: \"\"});\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        } \r\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_DEAD'){\r\n            objValues.causeOfDeath=\"\"\r\n            objValues.sourceOfDeathInfo=\"\"\r\n            objValues.dateClientDied=\"\"\r\n            //objValues.dateClientDied\r\n            setObjValues ({...objValues,  ['causeOfDeath']: \"\"});\r\n            setObjValues ({...objValues,  ['sourceOfDeathInfo']: \"\"});\r\n            setObjValues ({...objValues,  ['dateClientDied']: \"\"});\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_RESTART'){\r\n            objValues.dateRestartPlacedBackMedication=\"\"\r\n            setObjValues ({...objValues,  ['dateRestartPlacedBackMedication']: \"\"});\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_TRANSFER_OUT'){\r\n            objValues.dateClientReferredOut=\"\"\r\n            objValues.facilityReferredTo=\"\"\r\n            setObjValues ({...objValues,  ['facilityReferredTo']: \"\"});\r\n            setObjValues ({...objValues,  ['dateClientReferredOut']: \"\"});\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }\r\n        if(e.target.name==='interruptionType' && e.target.value!=='PREP_STATUS_SEROCONVERTED'){\r\n            objValues.linkToArt=\"\"\r\n            objValues.dateSeroconverted=\"\"\r\n            setObjValues ({...objValues,  ['dateSeroconverted']: \"\"});\r\n            setObjValues ({...objValues,  ['linkToArt']: \"\"});\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        }     \r\n        //     \r\n        setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n\r\n    }\r\n    const validate = () => {\r\n        let temp = { ...errors }\r\n        //temp.interruptionDate = objValues.interruptionDate ? \"\" : \"This field is required\"\r\n        temp.interruptionType = objValues.interruptionType ? \"\" : \"This field is required\"\r\n        setErrors({\r\n            ...temp\r\n            })    \r\n        return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const getNewPrepStatus = (interruptionOption,allPrepInterruptions)=>{\r\n        console.log(allPrepInterruptions,interruptionOption)\r\n        const transformedInterruption = interruptionOption?.interruptionType?.toLowerCase();\r\n        const newPrepInterruptionObj = allPrepInterruptions?.find(interruption => transformedInterruption.includes(interruption?.display?.replace(/\\s/g,'_').toLowerCase())\r\n)\r\n        return newPrepInterruptionObj;\r\n    }\r\n\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n          if(objValues.interruptionDate===\"\" && objValues.dateSeroconverted!==\"\"){\r\n            objValues.interruptionDate =  objValues.dateSeroconverted\r\n         }else if(objValues.interruptionDate===\"\" && objValues.dateRestartPlacedBackMedication!==\"\"){\r\n            objValues.interruptionDate =  objValues.dateRestartPlacedBackMedication\r\n         }else if(objValues.interruptionDate===\"\" && objValues.dateClientReferredOut!==\"\"){\r\n            objValues.interruptionDate =  objValues.dateClientReferredOut\r\n         }else if(objValues.interruptionDate===\"\" && objValues.dateClientDied!==\"\"){\r\n            objValues.interruptionDate =  objValues.dateClientDied\r\n         }else{\r\n            //objValues.interruptionDate = objValues.interruptionDate\r\n         }\r\n         if(validate()){\r\n          setSaving(true);\r\n          if(props.activeContent && props.activeContent.actionType===\"update\"){\r\n          axios.put(`${baseUrl}prep-interruption/${props.activeContent.id}`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          ).then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Record save successful\");\r\n                  props.PatientObject();\r\n                  props.setActiveContent({...props.activeContent, route:'recent-history'})\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    if(error.response.data.apierror){\r\n                      toast.error(error.response.data.apierror.message , {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }else{\r\n                      toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                    }\r\n                }else{\r\n                    toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                }\r\n              });\r\n            }else{\r\n                axios.post(`${baseUrl}prep/interruption`,objValues,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                \r\n                ).then(response => {\r\n                    console.log('response: ',response?.data)\r\n                    const newStatus = getNewPrepStatus(response.data,prepStatus)\r\n                        setSaving(false);\r\n                        toast.success(\"Record save successful\");\r\n                        props.PatientObject();\r\n                        props.setActiveContent({...props.activeContent, route:'recent-history',obj:{newStatus}})\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        setSaving(false);\r\n                        if(error.response && error.response.data){\r\n                            let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                            if(error.response.data.apierror){\r\n                            toast.error(error.response.data.apierror.message , {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }else{\r\n                            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_CENTER});\r\n                            }\r\n                        }else{\r\n                            toast.error(\"Something went wrong, please try again...\", {position: toast.POSITION.BOTTOM_CENTER});\r\n                        }\r\n                    });\r\n\r\n            }\r\n        }\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div>                   \r\n        <Card className={classes.root}>\r\n            <CardBody>\r\n            <form >\r\n                <div className=\"row\">\r\n                    <h2> PrEP Discontinuations & Interruptions</h2>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">PrEP Interruptions <span style={{ color:\"red\"}}> *</span></Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"interruptionType\"\r\n                            id=\"interruptionType\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.interruptionType}\r\n                            required\r\n                        >\r\n                        <option value=\"\">Select</option>\r\n                        {prepStatus.filter((interruption)=>interruption?.id!==743).map((value) => (\r\n                            <option key={value.id} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                        </Input>\r\n                        {errors.interruptionType !==\"\" ? (\r\n                                <span className={classes.error}>{errors.interruptionType}</span>\r\n                            ) : \"\" } \r\n                        </FormGroup>\r\n                    </div>\r\n                    {(objValues.interruptionType==='PREP_STATUS_ADVERSE_DRUG_REACTION' || objValues.interruptionType==='PREP_STATUS_STOPPED' || objValues.interruptionType==='PREP_STATUS_LOSS_TO_FOLLOW_UP' ) && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"uniqueId\">Date of Interruption <span style={{ color:\"red\"}}> *</span></Label>\r\n                            <Input\r\n                                type=\"date\"\r\n                                onKeyDown={(e)=>{\r\n                                    e.preventDefault()\r\n                                }}\r\n                                name=\"interruptionDate\"\r\n                                id=\"interruptionDate\"\r\n                                min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                value={objValues.interruptionDate}\r\n                                required\r\n                            />\r\n                            {errors.interruptionDate !==\"\" ? (\r\n                                <span className={classes.error}>{errors.interruptionDate}</span>\r\n                            ) : \"\" } \r\n                            </FormGroup>\r\n                        </div>\r\n                    )}\r\n                     {objValues.interruptionType==='PREP_STATUS_STOPPED' && (\r\n                        <>\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"uniqueId\">Reason Stopped </Label>\r\n                            <Input\r\n                                type=\"select\"\r\n                                name=\"reasonStopped\"\r\n                                id=\"reasonStopped\"\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonStopped}\r\n                                \r\n                            >\r\n                                <option value=\"\">Select</option>\r\n                                {reasonStooped.map((value) => (\r\n                                    <option key={value.id} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                            </Input>\r\n                            {errors.reasonStopped !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonStopped}</span>\r\n                            ) : \"\" } \r\n                            </FormGroup>\r\n                        </div>\r\n                        {objValues.reasonStopped ==='Others (Pls specify)' && (\r\n                        <div className=\"form-group mb-3 col-md-6\">\r\n                            <FormGroup>\r\n                            <Label for=\"uniqueId\">Other Reason Stopped </Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"reasonStoppedOthers\"\r\n                                id=\"reasonStoppedOthers\"\r\n                                max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                onChange={handleInputChange}\r\n                                value={objValues.reasonStoppedOthers}\r\n                                \r\n                            ></Input>\r\n                            {errors.reasonStoppedOther !==\"\" ? (\r\n                                <span className={classes.error}>{errors.reasonStopped}</span>\r\n                            ) : \"\" } \r\n                            </FormGroup>\r\n                        </div>\r\n                        )}\r\n                        </>\r\n                     )}\r\n                    {objValues.interruptionType==='PREP_STATUS_TRANSFER_OUT' && (\r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Date of client referred out </Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            onKeyDown={(e)=>e.preventDefault()}\r\n                            name=\"dateClientReferredOut\"\r\n                            id=\"dateClientReferredOut\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateClientReferredOut}\r\n                            required\r\n                        />\r\n                        {errors.dateClientReferredOut !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateClientReferredOut}</span>\r\n                        ) : \"\" } \r\n                        </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Facility referred to </Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"facilityReferredTo\"\r\n                            id=\"facilityReferredTo\"\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.facilityReferredTo}\r\n                            required\r\n                        />\r\n                        {errors.facilityReferredTo !==\"\" ? (\r\n                            <span className={classes.error}>{errors.facilityReferredTo}</span>\r\n                        ) : \"\" } \r\n                        </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    {objValues.interruptionType==='PREP_STATUS_DEAD' && (\r\n                    <>\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Date of client died </Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            onKeyDown={(e)=>e.preventDefault()}\r\n                            name=\"dateClientDied\"\r\n                            id=\"dateClientDied\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateClientDied}\r\n                            required\r\n                        />\r\n                        {errors.dateClientDied !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateClientDied}</span>\r\n                        ) : \"\" } \r\n                        </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Cause of death</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"causeOfDeath\"\r\n                            id=\"causeOfDeath\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.causeOfDeath}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                                {causeOfDeath.map((value) => (\r\n                                    <option key={value.id} value={value.display}>\r\n                                        {value.display}\r\n                                    </option>\r\n                                ))}\r\n                        </Input>\r\n                        {errors.causeOfDeath !==\"\" ? (\r\n                            <span className={classes.error}>{errors.causeOfDeath}</span>\r\n                        ) : \"\" } \r\n                        </FormGroup>\r\n                    </div>\r\n                   \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Source of death information  </Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"sourceOfDeathInfo\"\r\n                            id=\"sourceOfDeathInfo\"\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.sourceOfDeathInfo}\r\n                            required\r\n                        />\r\n                        {errors.sourceOfDeathInfo !==\"\" ? (\r\n                            <span className={classes.error}>{errors.sourceOfDeathInfo}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    </>\r\n                    )}\r\n                    {/* <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"eligibilityScreeningOccupation\">Why ? </Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"why\"\r\n                            id=\"why\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.why}\r\n                            required\r\n                        />\r\n                        \r\n                        </FormGroup>\r\n                    </div> */}\r\n                     {objValues.interruptionType==='PREP_STATUS_RESTART' && (\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Date of restart if placed back on medication</Label>\r\n                        <Input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            onKeyDown={(e)=>e.preventDefault()}\r\n                            name=\"dateRestartPlacedBackMedication\"\r\n                            id=\"dateRestartPlacedBackMedication\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            value={objValues.dateRestartPlacedBackMedication}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                        />\r\n                        {errors.dateRestartPlacedBackMedication !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateRestartPlacedBackMedication}</span>\r\n                        ) : \"\" }    \r\n                        </FormGroup>\r\n                    </div>\r\n                     )}\r\n                     {objValues.interruptionType==='PREP_STATUS_SEROCONVERTED' && (\r\n                    <>\r\n                     <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label for=\"uniqueId\">Date Seroconverted </Label>\r\n                        <Input\r\n                            type=\"date\"\r\n                            onKeyDown={(e)=>e.preventDefault()}\r\n                            name=\"dateSeroconverted\"\r\n                            id=\"dateSeroconverted\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            onChange={handleInputChange}\r\n                            value={objValues.dateSeroconverted}\r\n                            required\r\n                        />\r\n                        {errors.dateSeroconverted !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateSeroconverted}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div> \r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Link to ART</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"linkToArt\"\r\n                            id=\"linkToArt\"\r\n                            onChange={handleInputChange}\r\n                            value={objValues.linkToArt}  \r\n                        >\r\n                        <option value=\"\"> Select</option>\r\n                        <option value=\"true\">Yes </option>\r\n                        <option value=\"false\"> No</option>\r\n                        </Input>\r\n                        {errors.linkToArt !==\"\" ? (\r\n                            <span className={classes.error}>{errors.linkToArt}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    {objValues.linkToArt==='true' && (\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                        <FormGroup>\r\n                        <Label >Date link to ART</Label>\r\n                        <Input\r\n                            className=\"form-control\"\r\n                            type=\"date\"\r\n                            onKeyDown={(e)=>e.preventDefault()}\r\n                            name=\"dateLinkToArt\"\r\n                            id=\"dateLinkToArt\"\r\n                            //min=\"1983-12-31\"\r\n                            min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                            max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                            value={objValues.dateLinkToArt}\r\n                            onChange={handleInputChange}\r\n                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                        />\r\n                        {errors.dateLinkToArt !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dateLinkToArt}</span>\r\n                        ) : \"\" }    \r\n                        </FormGroup>\r\n                    </div>\r\n                    )}\r\n                    </>)}\r\n                    \r\n                </div>\r\n\r\n                {saving ? <Spinner /> : \"\"}\r\n                <br />\r\n            \r\n                <MatButton\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                    style={{backgroundColor:'#014d88',fontWeight:\"bolder\"}}\r\n                    >\r\n                    {!saving ? (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                    ) : (\r\n                    <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                    )}\r\n                </MatButton>\r\n            \r\n                <MatButton\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    startIcon={<CancelIcon />}\r\n                    onClick={props.toggle}\r\n                    style={{backgroundColor:'#992E62'}}\r\n                    \r\n                >\r\n                    <span style={{ textTransform: \"capitalize\", color:\"#fff\" }}>Cancel</span>\r\n                </MatButton>\r\n            \r\n                </form>\r\n            </CardBody>\r\n        </Card>                    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrEPEligibiltyScreeningForm;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\Home.js",["253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Grid, Segment, Label, List, Card } from \"semantic-ui-react\";\r\n// Page titie\r\nimport {\r\n  FormGroup,\r\n  Label as FormLabelName,\r\n  InputGroup,\r\n  InputGroupText,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { url as baseUrl, token } from \"../../../api\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport Select from \"react-select\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport { TiTrash } from \"react-icons/ti\";\r\n\r\nimport { formValues } from \"redux-form\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst ClinicVisit = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const [disabledField, setSisabledField] = useState(false);\r\n  const [patientDto, setPatientDto] = useState();\r\n  let temp = { ...errors };\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [adherenceLevel, setAdherenceLevel] = useState([]);\r\n  const [sti, setSti] = useState([]);\r\n  const [prepStatus, setPrepStatus] = useState([]);\r\n  const [prepSideEffect, setPrepSideEffect] = useState([]);\r\n  const [htsResult, setHtsResult] = useState([]);\r\n  const [prepRegimen, setprepRegimen] = useState([]);\r\n  const [whyAdherenceLevelPoor, setWhyAdherenceLevelPoor] = useState([]);\r\n  const [labTestOptions, setLabTestOptions] = useState([]);\r\n  const [urineTestResult, setUrineTestResult] = useState([]);\r\n  const [otherTestResult, setOtherTestResult] = useState([]);\r\n  const [sphylisTestResult, setSphylisTestResult] = useState([]);\r\n  const [hepaTestResult, setHepaTestResult] = useState([]);\r\n  const [familyPlanningMethod, setFamilyPlanningMethod] = useState([]);\r\n  const [pregnant, setpregnant] = useState([]);\r\n  const [prepEntryPoint, setPrepEntryPoints] = useState([]);\r\n  const [prepType, setPrepType] = useState([]);\r\n  const [populationType, setPopulationType] = useState([]);\r\n  const [visitType, setVisitType] = useState([]);\r\n  // const [selectedPregnant, setSelectedPregnant] = useState(\"\");\r\n  const [selectedPopulationType, setSelectedPopulationType] = useState(\"\");\r\n  // const [selectedVisitType, setSelectedVisitType] = useState(\"\");\r\n  const [latestFromEligibility, setLatestFromEligibility] = useState(null);\r\n  let testsOptions = [];\r\n  const [hivTestValue, setHivTestValue] = useState(\"\");\r\n  const [hivTestResultDate, setHivTestResultDate] = useState(\"\");\r\n\r\n\r\n  // useEffect(() => {\r\n  //   handleInputChange({\r\n  //     target: { name: \"hivTestResult\", value: hivTestValue },\r\n  //   });\r\n  //   handleInputChange({\r\n  //     target: { name: \"hivTestResultDate\", value: hivTestResultDate },\r\n  //   });\r\n  // }, [hivTestValue]);\r\n\r\n\r\n\r\n  //Vital signs clinical decision support\r\n  const [vitalClinicalSupport, setVitalClinicalSupport] = useState({\r\n    weight: \"\",\r\n    diastolic: \"\",\r\n    height: \"\",\r\n    systolic: \"\",\r\n    pulse: \"\",\r\n    temperature: \"\",\r\n    respiratoryRate: \"\",\r\n  });\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    adherenceLevel: \"\",\r\n    dateInitialAdherenceCounseling: \"\",\r\n    datePrepGiven: \"\",\r\n    datePrepStart: \"\",\r\n    dateReferre: \"\",\r\n    diastolic: \"\",\r\n    encounterDate: \"\",\r\n    extra: {},\r\n    height: \"\",\r\n    hepatitis: {},\r\n    nextAppointment: \"\",\r\n    notedSideEffects: \"\",\r\n    otherTestsDone: [],\r\n    personId: props.patientObj.personId,//should person id be from patientObj?\r\n    pregnant: \"\",\r\n    prepEnrollmentUuid: \"\",\r\n    pulse: \"\",\r\n    referred: \"\",\r\n    regimenId: \"\",\r\n    respiratoryRate: \"\",\r\n    riskReductionServices: \"\",\r\n    healthCareWorkerSignature: \"\",\r\n    stiScreening: \"\",\r\n    syndromicStiScreening: null,\r\n    syphilis: {},\r\n    systolic: \"\",\r\n    temperature: \"\",\r\n    urinalysis: {},\r\n    urinalysisResult: \"\",\r\n    weight: \"\",\r\n    why: \"\",\r\n    otherDrugs: \"\",\r\n    duration: \"\",\r\n    prepGiven: \"\",\r\n    hivTestResult: \"\",\r\n    hivTestResultDate: \"\",\r\n    prepType: \"\",\r\n    populationType: \"\",\r\n    prepDistributionSetting: \"\",\r\n    familyPlanning: \"\",\r\n    dateOfFamilyPlanning: \"\",\r\n    monthsOfRefill: \"\",\r\n    visitType: \"\",\r\n  });\r\n  const [urinalysisTest, setUrinalysisTest] = useState({\r\n    urinalysisTest: \"Yes\",\r\n    testDate: \"\",\r\n    result: \"\",\r\n  });\r\n\r\n  const [syphilisTest, setSyphilisTest] = useState({\r\n    syphilisTest: \"Yes\",\r\n    testDate: \"\",\r\n    result: \"\",\r\n    others: \"\",\r\n  });\r\n  const [hepatitisTest, setHepatitisTest] = useState({\r\n    hepatitisTest: \"Yes\",\r\n    testDate: \"\",\r\n    result: \"\",\r\n  });\r\n\r\n  const [otherTest, setOtherTest] = useState([\r\n    {\r\n      localId: 0,\r\n      otherTest: \"Yes\",\r\n      testDate: \"\",\r\n      result: \"\",\r\n      name: \"\",\r\n      otherTestName: \"\"\r\n    }\r\n  ]);\r\n  useEffect(async () => {\r\n    // Check if the fields exist in objValues first\r\n    if (\r\n      objValues.urinalysis.testDate &&\r\n      objValues.urinalysis.result &&\r\n      objValues.urinalysis.urinalysisTest\r\n    ) {\r\n      setUrinalysisTest({\r\n        ...urinalysisTest,\r\n        testDate: objValues.urinalysis.testDate,\r\n        result: objValues.urinalysis.result,\r\n        urinalysisTest: objValues.urinalysis.urinalysisTest,\r\n      });\r\n    }\r\n    if (\r\n      objValues.syphilis.testDate &&\r\n      objValues.syphilis.result &&\r\n      objValues.syphilis.syphilisTest\r\n    ) {\r\n      setSyphilisTest({\r\n        ...syphilisTest,\r\n        testDate: objValues.syphilis.testDate,\r\n        result: objValues.syphilis.result,\r\n        syphilisTest: objValues.syphilis.syphilisTest,\r\n        others: objValues.syphilis.others,\r\n      });\r\n    }\r\n    if (\r\n      objValues.hepatitis.testDate &&\r\n      objValues.hepatitis.result &&\r\n      objValues.hepatitis.hepatitisTest\r\n    ) {\r\n      setHepatitisTest({\r\n        ...hepatitisTest,\r\n        testDate: objValues.hepatitis.testDate,\r\n        result: objValues.hepatitis.result,\r\n        hepatitisTest: objValues.hepatitis.hepatitisTest,\r\n      });\r\n    }\r\n  }, [objValues]);\r\n\r\n  useEffect(() => {\r\n    AdherenceLevel();\r\n    SYNDROMIC_STI_SCREENING();\r\n    PREP_RISK_REDUCTION_PLAN();\r\n    //PatientDetaild();\r\n    PREP_STATUS();\r\n    HTS_RESULT();\r\n    // LAST_HIV_TEST_RESULT();\r\n    PREP_SIDE_EFFECTS();\r\n    GetPatientDTOObj();\r\n    WHY_POOR_FAIR_ADHERENCE();\r\n    PrepEligibilityObj();\r\n    // PrepRegimen(objValues.encounterDate);\r\n    TestGroup();\r\n    PREP_URINALYSIS_RESULT();\r\n    PREP_OTHER_TEST();\r\n    HEPATITIS_SCREENING_RESULT();\r\n    SYPHILIS_RESULT();\r\n    PREGANACY_STATUS();\r\n    PREP_ENTRY_POINT();\r\n    PREP_TYPE();\r\n    POPULATION_TYPE();\r\n    VISIT_TYPE();\r\n    FAMILY_PLANNING_METHOD();\r\n    if (\r\n      props.activeContent &&\r\n      props.activeContent.id !== \"\" &&\r\n      props.activeContent.id !== null\r\n    ) {\r\n      GetPatientVisit(props.activeContent.id);\r\n      setSisabledField(\r\n        props.activeContent.actionType\r\n      );\r\n    }\r\n    GetLatestFromEligibility();\r\n  }, [props.activeContent]);\r\n\r\n  const PREGANACY_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setpregnant(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  const PREP_ENTRY_POINT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPrepEntryPoints(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  const PREP_TYPE = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_TYPE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPrepType(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  //Get list of Test Group\r\n  const TestGroup = () => {\r\n    axios\r\n      .get(`${baseUrl}laboratory/labtestgroups`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        response.data.map((x) => {\r\n          x.labTests.map((x2) => {\r\n            testsOptions.push({\r\n              value: x2.id,\r\n              label: x2.labTestName,\r\n              testGroupId: x.id,\r\n              testGroupName: x.groupName,\r\n              sampleType: x2.sampleType,\r\n            });\r\n          });\r\n        });\r\n        setLabTestOptions(testsOptions);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n\r\n  const checkEligibleForCABLA = async (currentDate, regimenList) => {\r\n    if (currentDate) {\r\n      await axios\r\n        .get(\r\n          `${baseUrl}prep-clinic/checkEnableCab/${props.patientObj.personId}/${currentDate}`,\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        )\r\n        .then((response) => {\r\n          if (response?.data || !response?.data) {\r\n            let isEligibleForCABLA = response?.data\r\n            if (isEligibleForCABLA || (objValues?.visitType === \"PREP_VISIT_TYPE_METHOD_SWITCH\")) {\r\n              setPrepType(prepType)\r\n              setprepRegimen(regimenList);\r\n            } else {\r\n              let reg = regimenList.filter((each, index) => {\r\n                return each.code !== \"CAB-LA(600mg/3mL)\"\r\n              })\r\n              let pTypes = prepType.filter((each, index) => {\r\n                return each.code !== \"PREP_TYPE_INJECTIBLES\"\r\n              })\r\n              setPrepType(pTypes)\r\n              setprepRegimen(reg);\r\n            }\r\n            return response?.data\r\n          }\r\n        })\r\n        .catch((error) => { });\r\n    }\r\n  };\r\n\r\n  const GetPatientVisit = async (id) => {\r\n    axios\r\n      .get(`${baseUrl}prep-clinic/${props.activeContent.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setObjValues(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  const getHIVresult = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep-clinic/hts-record/${props.patientObj.personId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        if (response.data?.length === 0) {\r\n          toast.error(\"No HTS record found. Atleast, 1 test result is required to proceed.\");\r\n        } else if (response.data?.length > 0) {\r\n          toast.success(\"HTS record found. You may proceed.\");\r\n        }\r\n        setHivTestValue(response?.data?.[0]?.hivTestResult)\r\n        setHivTestResultDate(response?.data?.[0]?.visitDate)\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const GetPatientDTOObj = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep/enrollment/open/patients/${props.patientObj.personId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setPatientDto(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const PrepEligibilityObj = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}prep/eligibility/open/patients/${props.patientObj.personId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        //setPrepStatus(response.data);\r\n        objValues.prepEnrollmentUuid = \"\";\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const PrepRegimen = (currentDate) => {\r\n    axios\r\n      .get(`${baseUrl}prep-regimen`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        // confirm access to display CAB-LA\r\n        let isEligibleForCABLA = checkEligibleForCABLA(currentDate, response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const PREP_STATUS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPrepStatus(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const [prepRiskReductionPlan, setPrepRiskReductionPlan] = useState([]);\r\n  const PREP_RISK_REDUCTION_PLAN = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_RISK_REDUCTION_PLAN`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        console.log(\"prep codeset: \", response.data);\r\n        setPrepRiskReductionPlan(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const PREP_SIDE_EFFECTS = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_SIDE_EFFECTS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPrepSideEffect(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  const HTS_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/HTS_RESULT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setHtsResult(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  const LAST_HIV_TEST_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}hts/persons/${objValues.personId}/current-hts`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        var lastHivTest = response?.data?.hivTestResult;\r\n        // console.log('last res; ', response.data.hivTestResult)\r\n        if (!lastHivTest) {\r\n          setHivTestValue(response.data.hivTestResult);\r\n          setHivTestResultDate(response.data.test1.date);\r\n          objValues.hivTestResultDate = response.data.hivTestResult;\r\n          objValues.hivTestResultDate = response.data.test1.date;\r\n        } else {\r\n          setHivTestValue(\"NOT DONE\");\r\n        }\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (latestFromEligibility !== null) {\r\n      setObjValues({\r\n        ...objValues,\r\n        populationType:\r\n          latestFromEligibility !== null\r\n            ? latestFromEligibility.populationType\r\n            : \"\",\r\n        visitType:\r\n          latestFromEligibility !== null ? latestFromEligibility.visitType : \"\",\r\n        pregnant:\r\n          latestFromEligibility !== null\r\n            ? latestFromEligibility.pregnancyStatus\r\n            : \"\",\r\n      });\r\n      // await POPULATION_TYPE();\r\n      const autoPopulatePopulationType = populationType.find(\r\n        (type) => type.code === latestFromEligibility.populationType\r\n      )?.display;\r\n      const autoPopulateVisitType = visitType.find(\r\n        (type) => type.code === latestFromEligibility.visitType\r\n      )?.display;\r\n      const autoPopulatePregnant = pregnant.find(\r\n        (type) => type.code === latestFromEligibility.pregnancyStatus\r\n      )?.display;\r\n      setSelectedPopulationType(autoPopulatePopulationType);\r\n      // setSelectedVisitType(autoPopulateVisitType)\r\n      // setSelectedPregnant(autoPopulatePregnant)\r\n    }\r\n  }, [latestFromEligibility]);\r\n\r\n  const GetLatestFromEligibility = async () => {\r\n    axios\r\n      .get(`${baseUrl}prep-eligibility/person/${objValues.personId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then(async (response) => {\r\n        const latestEligibility = response.data.sort((a, b) =>\r\n          moment(a.visitDate).isBefore(moment(b.visitDate))\r\n        )[\r\n          // (a,b) => new Date(a.date).getTime() - new Date(b.date).getTime())\r\n          response.data.length - 1\r\n        ];\r\n        setLatestFromEligibility(latestEligibility);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      objValues.populationType !== null &&\r\n      objValues.populationType !== undefined\r\n    ) {\r\n      const autoPopulate = populationType.find(\r\n        (type) => type.code === objValues.populationType\r\n      );\r\n\r\n      setSelectedPopulationType(autoPopulate ? autoPopulate.display : \"\");\r\n    }\r\n  }, [objValues.populationType]);\r\n  const POPULATION_TYPE = async () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/POPULATION_TYPE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPopulationType(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  const VISIT_TYPE = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_VISIT_TYPE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setVisitType(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n  };\r\n  const WHY_POOR_FAIR_ADHERENCE = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/WHY_POOR_FAIR_ADHERENCE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setWhyAdherenceLevelPoor(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  ///GET LIST OF FUNCTIONAL%20_STATUS\r\n  // TB STATUS\r\n  const SYNDROMIC_STI_SCREENING = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SYNDROMIC_STI_SCREENING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSti(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  //PREP_URINALYSIS_RESULT\r\n  const PREP_URINALYSIS_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_URINALYSIS_RESULT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setUrineTestResult(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  //PREP_OTHER_TEST\r\n  const PREP_OTHER_TEST = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREP_OTHER_TEST`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setOtherTestResult(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  //SYPHILIS_RESULT\r\n  const SYPHILIS_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SYPHILIS_RESULT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSphylisTestResult(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n  //HEPATITIS_SCREENING_RESULT\r\n  const HEPATITIS_SCREENING_RESULT = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/HEPATITIS_SCREENING_RESULT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setHepaTestResult(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  // FAMILY_PLANNING_METHOD\r\n  const FAMILY_PLANNING_METHOD = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FAMILY_PLANNING_METHOD`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setFamilyPlanningMethod(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  };\r\n\r\n  ///Level of Adherence\r\n  async function AdherenceLevel() {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PrEP_LEVEL_OF_ADHERENCE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setAdherenceLevel(response.data);\r\n      })\r\n      .catch((error) => { });\r\n  }\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.name === \"monthsOfRefill\") {\r\n      const asNumber = Number(e.target.value);\r\n      const durationInDays = asNumber * 30;\r\n      setObjValues({\r\n        ...objValues,\r\n        monthsOfRefill: e.target.value,\r\n        duration: `${durationInDays}`,\r\n      });\r\n    } else if (e.target.name === \"encounterDate\") {\r\n      PrepRegimen(e.target.value);\r\n\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n\r\n    } else {\r\n      // if the encounterDate is the same as the commencement date, the prep regimen id should be automatically populated from the commencement\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const handleInputChangeUrinalysisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    setUrinalysisTest({ ...urinalysisTest, [e.target.name]: e.target.value });\r\n  };\r\n  const handleInputChangeOtherTest = (e, localId) => {\r\n    //find the test with the localId\r\n    let temp = [...otherTest];\r\n    let index = temp.findIndex((x) => Number(x.localId) === Number(localId));\r\n\r\n    console.log('index found: ', index, e.target.name)\r\n    console.log('index found: ', index, e.target.value)\r\n    temp[index][e.target.name] = e.target.value;\r\n    console.log('otherTest: ', temp)\r\n    setOtherTest(temp);\r\n    // if (\r\n    //   e.target.name === \"name\" &&\r\n    //   e.target.value !== \"PREP_OTHER_TEST_OTHER_(SPECIFY)\"\r\n    // ) {\r\n    //   temp[index].otherTestName = \"\";\r\n    //   temp[index][e.target.name] = e.target.value;\r\n    //   setOtherTest(temp);\r\n    // } else {\r\n    //   temp[index][e.target.name] = e.target.value;\r\n    //   setOtherTest(temp);\r\n    // }\r\n  };\r\n  const handleRemoveTest = (localId) => {\r\n    setOtherTest((prev) => prev.filter((test) => test.localId !== localId));\r\n  };\r\n  const handleInputChangeHepatitisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    setHepatitisTest({ ...hepatitisTest, [e.target.name]: e.target.value });\r\n  };\r\n  const handleInputChangeSyphilisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    setSyphilisTest({ ...syphilisTest, [e.target.name]: e.target.value });\r\n    //Others\r\n    if (e.target.name === \"result\" && e.target.value !== \"Others\") {\r\n      syphilisTest.others = \"\";\r\n      setSyphilisTest({ ...syphilisTest, [\"others\"]: \"\" });\r\n      setSyphilisTest({ ...syphilisTest, [e.target.name]: e.target.value });\r\n    }\r\n    setSyphilisTest({ ...syphilisTest, [e.target.name]: e.target.value });\r\n  };\r\n  //Handle CheckBox\r\n  const handleCheckBoxSyphilisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.checked) {\r\n      setSyphilisTest({ ...syphilisTest, [\"syphilisTest\"]: \"Yes\" });\r\n    } else {\r\n      setSyphilisTest({ ...syphilisTest, [\"syphilisTest\"]: \"No\" });\r\n    }\r\n  };\r\n  const handleCheckBoxHepatitisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.checked) {\r\n      setHepatitisTest({ ...hepatitisTest, [\"hepatitisTest\"]: \"Yes\" });\r\n    } else {\r\n      setHepatitisTest({ ...syphilisTest, [\"syphilisTest\"]: \"No\" });\r\n    }\r\n  };\r\n  const handleCheckBoxOtherTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.checked) {\r\n      setOtherTest([\r\n        ...otherTest,\r\n        ...objValues.otherTestsDone,\r\n        {\r\n          localId: objValues.otherTestsDone?.length || 0,\r\n          otherTest: \"Yes\",\r\n          testDate: \"\",\r\n          result: \"\",\r\n          name: \"\",\r\n          otherTestName: \"\",\r\n        },\r\n      ]);\r\n    } else {\r\n      // setOtherTest({...otherTest, [\"otherTest\"]: \"No\"})\r\n      setOtherTest([]);\r\n    }\r\n  };\r\n\r\n  const otherTestInputRef = useRef();\r\n\r\n  const loadOtherTestOptions = () => {\r\n    setErrors({ ...errors, [otherTestInputRef.current.name]: \"\" });\r\n    if (otherTestInputRef.current.checked) {\r\n      setOtherTest([\r\n        ...otherTest,\r\n        ...objValues.otherTestsDone,\r\n        {\r\n          localId: objValues.otherTestsDone?.length || 0,\r\n          otherTest: \"Yes\",\r\n          testDate: \"\",\r\n          result: \"\",\r\n          name: \"\",\r\n          otherTestName: \"\",\r\n        },\r\n      ]);\r\n    } else {\r\n      // setOtherTest({...otherTest, [\"otherTest\"]: \"No\"})\r\n      setOtherTest([]);\r\n    }\r\n  };\r\n  const handleCheckBoxUrinalysisTest = (e) => {\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n    if (e.target.checked) {\r\n      setUrinalysisTest({ ...urinalysisTest, [\"urinalysisTest\"]: \"Yes\" });\r\n    } else {\r\n      setUrinalysisTest({ ...otherTest, [\"urinalysisTest\"]: \"No\" });\r\n    }\r\n  };\r\n  //to check the input value for clinical decision\r\n  const handleInputValueCheckHeight = (e) => {\r\n    if (\r\n      e.target.name === \"height\" &&\r\n      (e.target.value < 48.26 || e.target.value > 216.408)\r\n    ) {\r\n      const message =\r\n        \"Height cannot be greater than 216.408 and less than 48.26\";\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, height: message });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, height: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckweight = (e) => {\r\n    if (\r\n      e.target.name === \"weight\" &&\r\n      (e.target.value < 3 || e.target.value > 150)\r\n    ) {\r\n      const message =\r\n        \"Body weight must not be greater than 150 and less than 3\";\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, weight: message });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, weight: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckSystolic = (e) => {\r\n    if (\r\n      e.target.name === \"systolic\" &&\r\n      (e.target.value < 90 || e.target.value > 240)\r\n    ) {\r\n      const message =\r\n        \"Blood Pressure systolic must not be greater than 240 and less than 90\";\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, systolic: message });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, systolic: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckDiastolic = (e) => {\r\n    if (\r\n      e.target.name === \"diastolic\" &&\r\n      (e.target.value < 60 || e.target.value > 140)\r\n    ) {\r\n      const message =\r\n        \"Blood Pressure diastolic must not be greater than 140 and less than 60\";\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, diastolic: message });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, diastolic: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckPulse = (e) => {\r\n    if (\r\n      e.target.name === \"pulse\" &&\r\n      (e.target.value < 40 || e.target.value > 120)\r\n    ) {\r\n      const message = \"Pulse must not be greater than 120 and less than 40\";\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, pulse: message });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, pulse: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckRespiratoryRate = (e) => {\r\n    if (\r\n      e.target.name === \"respiratoryRate\" &&\r\n      (e.target.value < 10 || e.target.value > 70)\r\n    ) {\r\n      const message =\r\n        \"Respiratory Rate must not be greater than 70 and less than 10\";\r\n      setVitalClinicalSupport({\r\n        ...vitalClinicalSupport,\r\n        respiratoryRate: message,\r\n      });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, respiratoryRate: \"\" });\r\n    }\r\n  };\r\n  const handleInputValueCheckTemperature = (e) => {\r\n    if (\r\n      e.target.name === \"temperature\" &&\r\n      (e.target.value < 35 || e.target.value > 47)\r\n    ) {\r\n      const message =\r\n        \"Temperature must not be greater than 47 and less than 35\";\r\n      setVitalClinicalSupport({\r\n        ...vitalClinicalSupport,\r\n        temperature: message,\r\n      });\r\n    } else {\r\n      setVitalClinicalSupport({ ...vitalClinicalSupport, temperature: \"\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.activeContent.actionType === \"\" ||\r\n      props.activeContent.actionType === null\r\n    ) {\r\n      emptyObjValues();\r\n    }\r\n  }, [props.activeContent.actionType]);\r\n\r\n  const emptyObjValues = () => {\r\n    setObjValues({\r\n      adherenceLevel: \"\",\r\n      dateInitialAdherenceCounseling: \"\",\r\n      datePrepGiven: \"\",\r\n      datePrepStart: \"\",\r\n      dateReferre: \"\",\r\n      diastolic: \"\",\r\n      encounterDate: \"\",\r\n      extra: {},\r\n      height: \"\",\r\n      hepatitis: {},\r\n      nextAppointment: \"\",\r\n      notedSideEffects: \"\",\r\n      otherTestsDone: [],\r\n      personId: props.patientObj.personId,\r\n      pregnant: \"\",\r\n      prepEnrollmentUuid: \"\",\r\n      pulse: \"\",\r\n      referred: \"\",\r\n      regimenId: \"\",\r\n      respiratoryRate: \"\",\r\n      riskReductionServices: \"\",\r\n      stiScreening: \"\",\r\n      syndromicStiScreening: null,\r\n      syphilis: {},\r\n      systolic: \"\",\r\n      temperature: \"\",\r\n      urinalysis: {},\r\n      urinalysisResult: \"\",\r\n      weight: \"\",\r\n      why: \"\",\r\n      otherDrugs: \"\",\r\n      hivTestResult: \"\",\r\n      duration: \"\",\r\n      prepGiven: \"\",\r\n      prepDistributionSetting: \"\",\r\n      visitType: \"\",\r\n    });\r\n    setUrinalysisTest({});\r\n    setSyphilisTest({});\r\n    setHepatitisTest({});\r\n    setOtherTest([]);\r\n  };\r\n\r\n  //Validations of the forms\r\n  const validate = () => {\r\n    temp.lastHts = hivTestValue\r\n      ? \"\"\r\n      : \"Atleast, 1 HIV test result is required\";\r\n    temp.lastHtsDate = !(new Date(hivTestResultDate).getTime() < new Date(patientDto?.dateEnrolled).getTime())\r\n      ? \"\"\r\n      : `Last HIV Test must not come before Initiation (${patientDto?.dateEnrolled})`;\r\n    temp.otherTestsDone = otherTest.length\r\n      ? \"\"\r\n      : \"You must submit atleast, a test result.\";\r\n    hasPrepEligibility(temp.encounterDate, props.encounters\r\n    )\r\n    temp.encounterDate = objValues.encounterDate\r\n      ? \"\"\r\n      : \"This field is required\";\r\n\r\n    if (isFemale()) {\r\n      temp.pregnant = objValues.pregnant ? \"\" : \"This field is required\";\r\n    }\r\n    temp.nextAppointment = objValues.nextAppointment\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    // temp.adherenceLevel = (objValues.adherenceLevel || countPrepEligibility(recentActivities) <= 2)\r\n    //   ? \"\"\r\n    //   : \"This field is required\";\r\n\r\n    temp.height = objValues.height ? \"\" : \"This field is required\";\r\n    temp.weight = objValues.weight ? \"\" : \"This field is required\";\r\n    temp.urinalysisTest = urinalysisTest.urinalysisTest\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.testDate = urinalysisTest.testDate ? \"\" : \"This field is required\";\r\n    temp.result = urinalysisTest.result ? \"\" : \"This field is required\";\r\n    temp.regimenId = objValues.regimenId ? \"\" : \"This field is required\";\r\n    temp.duration = objValues.duration ? \"\" : \"This field is required\";\r\n    temp.prepDistributionSetting = objValues.prepDistributionSetting\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.populationType = objValues.populationType\r\n      ? \"\"\r\n      : \"This field is required\";\r\n    temp.visitType = objValues.visitType ? \"\" : \"This field is required\";\r\n\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n  /**** Submit Button Processing  */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      //objValues.visitDate = vital.encounterDate\r\n      objValues.hivTestResultDate = hivTestResultDate;\r\n      objValues.hivTestResult = hivTestValue;\r\n      objValues.syphilis = syphilisTest;\r\n      objValues.hepatitis = hepatitisTest;\r\n      objValues.urinalysis = urinalysisTest;\r\n      objValues.otherTestsDone = otherTest.map((x) => {\r\n        return {\r\n          testDate: x.testDate,\r\n          result: x.result,\r\n          name: x.name,\r\n          otherTestName: x.otherTestName,\r\n        };\r\n      });\r\n      objValues.prepEnrollmentUuid = patientDto.uuid;\r\n\r\n      if (props.activeContent && props.activeContent.actionType === \"update\") {\r\n        //Perform operation for updation action\r\n        axios\r\n          .put(`${baseUrl}prep-clinic/${props.activeContent.id}`, objValues, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            //PatientDetaild();\r\n            setSaving(false);\r\n            toast.success(\"Clinic Visit save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"consultation\",\r\n              activeTab: \"history\",\r\n              actionType: \"view\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              if (error.response.data.apierror) {\r\n                toast.error(error.response.data.apierror.message, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              } else {\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            } else {\r\n              toast.error(\"Something went wrong, please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        axios\r\n          .post(`${baseUrl}prep/clinic-visit`, objValues, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            //PatientDetaild();\r\n            setSaving(false);\r\n            emptyObjValues();\r\n            toast.success(\"Clinic Visit save successful\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n            props.setActiveContent({\r\n              ...props.activeContent,\r\n              route: \"consultation\",\r\n              activeTab: \"history\",\r\n              actionType: \"view\",\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              if (error.response.data.apierror) {\r\n                toast.error(error.response.data.apierror.message, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              } else {\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            } else {\r\n              toast.error(\"Something went wrong, please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCreateNewTest = () => {\r\n    setOtherTest([\r\n      ...otherTest,\r\n      {\r\n        localId: otherTest.length,\r\n        otherTest: \"Yes\",\r\n        testDate: \"\",\r\n        result: \"\",\r\n        name: \"\",\r\n        otherTestName: \"\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const isFemale = () => {\r\n    return props.patientObj.gender.toLowerCase() === \"female\";\r\n  };\r\n\r\n  const handlePrepTypeChange = (e) => {\r\n    setObjValues({ ...objValues, regimenId: \"\", prepType: e.target.value });\r\n    if (\r\n      e.target.value === \"PREP_TYPE_OTHERS\" ||\r\n      e.target.value === \"PREP_TYPE_ED_PREP\"\r\n    ) {\r\n      PrepRegimen(objValues.encounterDate);\r\n    } else {\r\n      axios\r\n        .get(`${baseUrl}prep-regimen/prepType?prepType=${e.target.value}`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n\r\n          let isEligibleForCABLA = checkEligibleForCABLA(objValues.encounterDate, response.data);\r\n\r\n          // setprepRegimen(response.data);\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n        });\r\n    }\r\n\r\n    setErrors({ ...errors, [e.target.name]: \"\" });\r\n  };\r\n\r\n  function joinActivities(data) {\r\n    return data.reduce((acc, item) => {\r\n      return acc.concat(item.activities);\r\n    }, []);\r\n  }\r\n  function countPrepEligibility(data) {\r\n    let count = 0;\r\n    let relevantActivities = ['Prep Commencement', 'Prep Clinic']\r\n    data.forEach(entry => {\r\n      entry?.activities?.forEach(activity => {\r\n        if (relevantActivities.includes(activity?.name)) {\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n\r\n    return count;\r\n  }\r\n  function isValidDate(date) {\r\n    return date instanceof Date && !isNaN(date);\r\n  }\r\n  function areDatesSame(date1, date2) {\r\n    // if (!isValidDate(date1) || !isValidDate(date2)) return alert('Invalid eligibility or visit date.')\r\n    return (\r\n      date1.getFullYear() === date2.getFullYear() &&\r\n      date1.getMonth() === date2.getMonth() &&\r\n      date1.getDate() === date2.getDate()\r\n    );\r\n  }\r\n  function hasPrepEligibility(targetDate, activitiesArray) {\r\n    for (const activityGroup of activitiesArray) {\r\n      for (const activity of activityGroup?.activities) {\r\n        if ((activity.name === \"Prep Eligibility\") && areDatesSame(new Date(activity.date), new Date(targetDate))) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  const [recentActivities, setRecentActivities] = useState([])\r\n  const getRecentActivities = () => {\r\n    axios\r\n      .get(`${baseUrl}prep/activities/patients/${props.patientObj.personId}?full=true`,\r\n        { headers: { \"Authorization\": `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setRecentActivities(response.data)\r\n      })\r\n      .catch((error) => {\r\n        //console.log(error);\r\n      });\r\n\r\n  }\r\n\r\n  const filterOutLastRegimen = (codeSet, lastRegimenId) => codeSet.filter(regimen => {\r\n    return (regimen.id !== lastRegimenId)\r\n  })\r\n  const handleOtherTestsDone = (e) => {\r\n    setOtherTestResult((prev) => prev?.filter(eachTest => eachTest?.name !== e.target.value))\r\n  }\r\n  useEffect(() => {\r\n\r\n    getRecentActivities()\r\n    getHIVresult()\r\n  }, [])\r\n  const handleOtherTestDoneChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Handle normal inputs\r\n    if (name !== 'otherTestsDone') {\r\n      setObjValues((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      // Handle changes for the otherTestsDone array\r\n      const { localId, field } = e.target.dataset; // Assuming you're using data attributes to pass localId and the field being edited\r\n      console.log('found dataset: ', e.target.dataset)\r\n      const updatedTests = [...objValues.otherTestsDone];\r\n\r\n      // Find the index of the test being updated\r\n      const index = updatedTests.findIndex((test) => test.localId === Number(localId));\r\n\r\n      console.log('found index: ', index)\r\n\r\n\r\n      if (index !== -1) {\r\n        updatedTests[index] = {\r\n          ...updatedTests[index],\r\n          [field]: value,\r\n        };\r\n      }\r\n\r\n      setObjValues((prev) => ({\r\n        ...prev,\r\n        otherTestsDone: updatedTests,\r\n      }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(otherTest)\r\n  }, [otherTest])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <h2>Clinic Follow-up Visit</h2>\r\n        </div>\r\n      </div>\r\n      <Grid>\r\n        <Grid.Column>\r\n          <Segment>\r\n            <Label\r\n              as=\"a\"\r\n              color=\"blue\"\r\n              style={{ width: \"106%\", height: \"35px\" }}\r\n              ribbon\r\n            >\r\n              <h4 style={{ color: \"#fff\" }}>VITAL SIGNS</h4>\r\n            </Label>\r\n            <br />\r\n            <br />\r\n            <div className=\"row\">\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Date of Visit <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    name=\"encounterDate\"\r\n                    id=\"encounterDate\"\r\n                    onKeyDown={(e) => e.preventDefault()}\r\n                    value={objValues.encounterDate}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    onChange={handleInputChange}\r\n                    //min={props.patientDetail && props.patientDetail.dateHivPositive!==null ? props.patientDetail.dateHivPositive : props.patientDetail.personResponseDto.dateOfRegistration}\r\n                    min={\r\n                      patientDto && patientDto.dateEnrolled\r\n                        ? patientDto.dateEnrolled\r\n                        : \"\"\r\n                    }\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.encounterDate !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.encounterDate}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\" mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Pulse</FormLabelName>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"pulse\"\r\n                        id=\"pulse\"\r\n                        onChange={handleInputChange}\r\n                        min=\"40\"\r\n                        max=\"120\"\r\n                        value={objValues.pulse}\r\n                        onKeyUp={handleInputValueCheckPulse}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        bmp\r\n                      </InputGroupText>\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.pulse !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.pulse}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.pulse !== \"\" ? (\r\n                      <span className={classes.error}>{errors.pulse}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\" mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Respiratory Rate </FormLabelName>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"respiratoryRate\"\r\n                        id=\"respiratoryRate\"\r\n                        onChange={handleInputChange}\r\n                        min=\"10\"\r\n                        max=\"70\"\r\n                        value={objValues.respiratoryRate}\r\n                        onKeyUp={handleInputValueCheckRespiratoryRate}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        bmp\r\n                      </InputGroupText>\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.respiratoryRate !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.respiratoryRate}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.respiratoryRate !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.respiratoryRate}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\" mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Temperature </FormLabelName>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"temperature\"\r\n                        id=\"temperature\"\r\n                        onChange={handleInputChange}\r\n                        min=\"35\"\r\n                        max=\"47\"\r\n                        value={objValues.temperature}\r\n                        onKeyUp={handleInputValueCheckTemperature}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        <sup>o</sup>c\r\n                      </InputGroupText>\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.temperature !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.temperature}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.temperature !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.temperature}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\" mb-3 col-md-5\">\r\n                  <FormGroup>\r\n                    <FormLabelName>\r\n                      Body Weight <span style={{ color: \"red\" }}> *</span>\r\n                    </FormLabelName>\r\n                    <InputGroup>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"weight\"\r\n                        id=\"weight\"\r\n                        onChange={handleInputChange}\r\n                        min=\"3\"\r\n                        max=\"150\"\r\n                        value={objValues.weight}\r\n                        onKeyUp={handleInputValueCheckweight}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        kg\r\n                      </InputGroupText>\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.weight !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.weight}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.weight !== \"\" ? (\r\n                      <span className={classes.error}>{errors.weight}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-5\">\r\n                  <FormGroup>\r\n                    <FormLabelName>\r\n                      Height <span style={{ color: \"red\" }}> *</span>\r\n                    </FormLabelName>\r\n                    <InputGroup>\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        cm\r\n                      </InputGroupText>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"height\"\r\n                        id=\"height\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.height}\r\n                        min=\"48.26\"\r\n                        max=\"216.408\"\r\n                        onKeyUp={handleInputValueCheckHeight}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#992E62\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #992E62\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        {objValues.height !== \"\"\r\n                          ? (objValues.height / 100).toFixed(2) + \"m\"\r\n                          : \"m\"}\r\n                      </InputGroupText>\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.height !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.height}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.height !== \"\" ? (\r\n                      <span className={classes.error}>{errors.height}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 mt-2 col-md-2\">\r\n                  {objValues.weight !== \"\" && objValues.height !== \"\" && (\r\n                    <FormGroup>\r\n                      <Label> </Label>\r\n                      <InputGroup>\r\n                        <InputGroupText\r\n                          addonType=\"append\"\r\n                          style={{\r\n                            backgroundColor: \"#014D88\",\r\n                            color: \"#fff\",\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0rem\",\r\n                          }}\r\n                        >\r\n                          BMI :{\" \"}\r\n                          {(\r\n                            objValues.weight /\r\n                            ((objValues.height / 100) *\r\n                              (objValues.height / 100))\r\n                          ).toFixed(2)}\r\n                        </InputGroupText>\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-8\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Blood Pressure</FormLabelName>\r\n                    <InputGroup>\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        systolic(mmHg)\r\n                      </InputGroupText>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"systolic\"\r\n                        id=\"systolic\"\r\n                        min=\"90\"\r\n                        max=\"240\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.systolic}\r\n                        onKeyUp={handleInputValueCheckSystolic}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n\r\n                      <InputGroupText\r\n                        addonType=\"append\"\r\n                        style={{\r\n                          backgroundColor: \"#014D88\",\r\n                          color: \"#fff\",\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                      >\r\n                        diastolic(mmHg)\r\n                      </InputGroupText>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"diastolic\"\r\n                        id=\"diastolic\"\r\n                        min={0}\r\n                        max={140}\r\n                        onChange={handleInputChange}\r\n                        value={objValues.diastolic}\r\n                        onKeyUp={handleInputValueCheckDiastolic}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      />\r\n                    </InputGroup>\r\n                    {vitalClinicalSupport.systolic !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.systolic}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.systolic !== \"\" ? (\r\n                      <span className={classes.error}>{errors.systolic}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    {vitalClinicalSupport.diastolic !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {vitalClinicalSupport.diastolic}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {errors.diastolic !== \"\" ? (\r\n                      <span className={classes.error}>{errors.diastolic}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {isFemale() && (\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <FormLabelName>\r\n                        Pregnancy Status{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"pregnant\"\r\n                        id=\"pregnant\"\r\n                        onChange={handleInputChange}\r\n                        value={objValues.pregnant}\r\n                        disabled={disabledField}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}    \r\n                      >\r\n                        <option value=\"\">Select Pregnancy Status</option>\r\n                        {pregnant.map((value) => (\r\n                          <option key={value.id} value={value.code}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.pregnant !== \"\" ? (\r\n                        <span className={classes.error}>{errors.pregnant}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <Label\r\n              as=\"a\"\r\n              color=\"black\"\r\n              style={{ width: \"106%\", height: \"35px\" }}\r\n              ribbon\r\n            >\r\n              <h4 style={{ color: \"#fff\" }}></h4>\r\n            </Label>\r\n            <br />\r\n            <br />\r\n\r\n            <div className=\"row\">\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Result of Last HIV Test <span style={{ color: \"red\" }}> *</span> </FormLabelName>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"hivTestResult\"\r\n                    id=\"hivTestResult\"\r\n                    value={hivTestValue}\r\n                    onChange={(e) => {\r\n                      setHivTestValue(e.target.value);\r\n                      handleInputChange(e);\r\n                    }}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled\r\n                  />\r\n                  <div className=\"p-1\">\r\n                    {errors.lastHts !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.lastHts}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Date of Last HIV Test <span style={{ color: \"red\" }}> *</span></FormLabelName>\r\n                  <Input\r\n                    type={hivTestValue == \"NOT DONE\" ? \"text\" : \"date\"}\r\n                    name=\"hivTestResultDate\"\r\n                    id=\"hivTestResultDate\"\r\n                    value={\r\n                      hivTestValue == \"NOT DONE\"\r\n                        ? \"NOT APPLICABLE\"\r\n                        : hivTestResultDate\r\n                    }\r\n                    onChange={(e) => {\r\n                      setHivTestValue(e.target.value);\r\n                      handleInputChange(e);\r\n                    }}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled\r\n                  />\r\n                  <div className=\"p-1\">\r\n                    {errors.lastHtsDate !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.lastHtsDate}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"mb-3 col-md-12\">\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Noted Side Effects </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"notedSideEffects\"\r\n                    id=\"notedSideEffects\"\r\n                    value={objValues.notedSideEffects}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {prepSideEffect.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              {/* <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Regimen at Start of PrEP </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"regimenStartPrep\"\r\n                    id=\"regimenStartPrep\"\r\n                    value={objValues.regimenStartPrep}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"TDF/FTC\">TDF/FTC </option>\r\n                    <option value=\"TDF/3TC\">TDF/3TC </option>\r\n                  </Input>\r\n                 \r\n                </FormGroup>\r\n              </div>\r\n               */}\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>STI Screening</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"stiScreening\"\r\n                    id=\"stiScreening\"\r\n                    value={objValues.stiScreening}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.stiScreening === \"true\" && (\r\n                <div className=\" mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <FormLabelName>Syndromic STI Screening </FormLabelName>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"syndromicStiScreening\"\r\n                      id=\"syndromicStiScreening\"\r\n                      value={objValues.syndromicStiScreening}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      disabled={disabledField}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {sti.map((value) => (\r\n                        <option key={value.id} value={value.id}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Risk Reduction Service </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"riskReductionServices\"\r\n                    id=\"riskReductionServices\"\r\n                    value={objValues.riskReductionServices}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option key={100} value=\"\">\r\n                      Select\r\n                    </option>\r\n                    {prepRiskReductionPlan.map((plan) => (\r\n                      <option key={plan.id} value={plan.id}>\r\n                        {plan.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    Level of Adherence\r\n                    {/* {countPrepEligibility(recentActivities) < 2 && <span style={{ color: \"red\" }}> *</span>} */}\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"adherenceLevel\"\r\n                    id=\"adherenceLevel\"\r\n                    value={objValues.adherenceLevel}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n\r\n                    {adherenceLevel.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.adherenceLevel !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.adherenceLevel}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.adherenceLevel ===\r\n                \"PREP_LEVEL_OF_ADHERENCE_(POOR)_≥_7_DOSES\" && (\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>Why Poor/Fair Adherence </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"whyAdherenceLevelPoor\"\r\n                        id=\"whyAdherenceLevelPoor\"\r\n                        value={objValues.whyAdherenceLevelPoor}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n\r\n                        {whyAdherenceLevelPoor.map((value) => (\r\n                          <option key={value.id} value={value.code}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              {/* <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >PrEP Given</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"prepGiven\"\r\n                    id=\"prepGiven\"\r\n                    value={objValues.prepGiven}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select </option>\r\n                    <option value=\"Yes\">Yes </option>\r\n                    <option value=\"No\">No </option>\r\n                  </Input>\r\n                 \r\n                </FormGroup>\r\n              </div> */}\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">\r\n                    Population Type <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"populationType\"\r\n                    id=\"populationType\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.populationType}\r\n                    disabled={disabledField}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    \r\n                  >\r\n                    <option value=\"\"> Select Population Type</option>\r\n                    {populationType?.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.populationType !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.populationType}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">\r\n                    Visit Type <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"visitType\"\r\n                    id=\"visitType\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.visitType}\r\n                    disabled={disabledField}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    \r\n                  >\r\n                    <option value=\"\"> Select Visit Type</option>\r\n                    {visitType.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.visitType !== \"\" ? (\r\n                    <span className={classes.error}>{errors.visitType}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">\r\n                    Prep Type<span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"prepType\"\r\n                    id=\"prepType\"\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    // disabled\r\n                    onChange={handlePrepTypeChange}\r\n                    value={objValues.prepType}\r\n                    disabled={disabledField}\r\n                  >\r\n                    <option value=\"\"> Select Prep Type</option>\r\n                    {prepType.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.prepType !== \"\" ? (\r\n                    <span className={classes.error}>{errors.prepType}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">\r\n                    PrEP Regimen <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"regimenId\"\r\n                    id=\"regimenId\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.regimenId}\r\n                    disabled={disabledField}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  >\r\n                    <option value=\"\"> Select</option>\r\n                    {objValues?.visitType === \"PREP_VISIT_TYPE_METHOD_SWITCH\" ? filterOutLastRegimen(prepRegimen, props.recentActivities[0]?.regimenId).map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.regimen}\r\n                      </option>\r\n                    )) : prepRegimen?.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.regimen}\r\n                      </option>))}\r\n                  </Input>\r\n                  {errors.regimenId !== \"\" ? (\r\n                    <span className={classes.error}>{errors.regimenId}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">\r\n                    Prep Distribution Setting{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"prepDistributionSetting\"\r\n                    id=\"prepDistributionSetting\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.prepDistributionSetting}\r\n                    disabled={disabledField}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    \r\n                  >\r\n                    <option value=\"\"></option>\r\n                    {prepEntryPoint.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  {errors.prepDistributionSetting !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.prepDistributionSetting}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              {/* <div className=\" mb-3 col-md-6\">\r\n                                <FormGroup>\r\n                                    <FormLabelName>Duration <span style={{color: \"red\"}}> *</span></FormLabelName>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"duration\"\r\n                                        id=\"duration\"\r\n                                        value={objValues.duration}\r\n                                        onChange={handleInputChange}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius: \"0.25rem\"}}\r\n\r\n                                        disabled={disabledField}\r\n                                    />\r\n                                    {errors.duration !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.duration}</span>\r\n                                    ) : \"\"}\r\n                                </FormGroup>\r\n                            </div> */}\r\n\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>\r\n                    {`Duration of refill (Day[s])`}  <span style={{ color: \"red\" }}> *</span>\r\n                  </FormLabelName>\r\n                  <Input\r\n                    type=\"number\"\r\n                    name=\"monthsOfRefill\"\r\n                    id=\"monthsOfRefill\"\r\n                    value={objValues.monthsOfRefill}\r\n                    min={0}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.monthsOfRefill !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.monthsOfRefill}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {/* <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >Date PrEP Given <span style={{ color:\"red\"}}> *</span></FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    onKeyDown={(e)=>e.preventDefault()}\r\n                    name=\"datePrepGiven\"\r\n                    id=\"datePrepGiven\"\r\n                    value={objValues.datePrepGiven}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    min={patientDto && patientDto.dateEnrolled ?patientDto.dateEnrolled :\"\"}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.datePrepGiven !==\"\" ? (\r\n                      <span className={classes.error}>{errors.datePrepGiven}</span>\r\n                  ) : \"\" }   \r\n                </FormGroup>\r\n              </div>  */}\r\n\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Other Drugs</FormLabelName>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"otherDrugs\"\r\n                    id=\"otherDrugs\"\r\n                    value={objValues.otherDrugs}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disabledField}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n              {/* <div className=\" mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName >PrEP Status</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"prepStatus\"\r\n                    id=\"prepStatus\"\r\n                    value={objValues.prepStatus}\r\n                    onChange={handleInputChange}\r\n                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {prepStatus.map((value) => (\r\n                            <option key={value.id} value={value.code}>\r\n                                {value.display}\r\n                            </option>\r\n                        ))}\r\n                  </Input>\r\n                 \r\n                </FormGroup>\r\n              </div> */}\r\n\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName for=\"\">Family Planning</FormLabelName>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"familyPlanning\"\r\n                    id=\"familyPlanning\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.familyPlanning}\r\n                    disabled={disabledField}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    \r\n                  >\r\n                    <option value=\"\"></option>\r\n                    {familyPlanningMethod.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-6\">\r\n                <FormGroup>\r\n                  <FormLabelName>Date of Family Planning </FormLabelName>\r\n                  <Input\r\n                    type=\"date\"\r\n                    onKeyDown={(e) => e.preventDefault()}\r\n                    name=\"dateOfFamilyPlanning\"\r\n                    id=\"dateOfFamilyPlanning\"\r\n                    value={objValues.dateOfFamilyPlanning}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    onChange={handleInputChange}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    disabled={disabledField}\r\n                  />\r\n                  {errors.dateOfFamilyPlanning !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.dateOfFamilyPlanning}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <br />\r\n              <br />\r\n              <Label\r\n                as=\"a\"\r\n                color=\"teal\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"urinalysisTest\"\r\n                    value=\"Yes\"\r\n                    onChange={handleCheckBoxUrinalysisTest}\r\n                    checked={\r\n                      urinalysisTest.urinalysisTest == \"Yes\" ? true : false\r\n                    }\r\n                  />{\" \"}\r\n                  Urinalysis Test\r\n                </h4>\r\n              </Label>\r\n              <br />\r\n              <br />\r\n              {urinalysisTest.urinalysisTest === \"Yes\" && (\r\n                <>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>\r\n                        Urinalysis Test Date{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </FormLabelName>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={(e) => e.preventDefault()}\r\n                        name=\"testDate\"\r\n                        id=\"testDate\"\r\n                        value={urinalysisTest.testDate}\r\n                        // defaultValue={objValues.urinalysis?.testDate}\r\n                        onChange={handleInputChangeUrinalysisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        min={objValues.encounterDate}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        disabled={disabledField}\r\n                      />\r\n                      {errors.testDate !== \"\" ? (\r\n                        <span className={classes.error}>{errors.testDate}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>\r\n                        Urinalysis Test Result{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"result\"\r\n                        id=\"result\"\r\n                        value={urinalysisTest.result}\r\n                        onChange={handleInputChangeUrinalysisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        {urineTestResult.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.result !== \"\" ? (\r\n                        <span className={classes.error}>{errors.result}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              <br />\r\n              <br />\r\n              <Label\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"hepatitisTest\"\r\n                    value=\"Yes\"\r\n                    onChange={handleCheckBoxHepatitisTest}\r\n                    checked={\r\n                      hepatitisTest.hepatitisTest === \"Yes\" ? true : false\r\n                    }\r\n                  />{\" \"}\r\n                  Hepatitis Test{\" \"}\r\n                </h4>\r\n              </Label>\r\n              <br />\r\n              <br />\r\n              {hepatitisTest.hepatitisTest === \"Yes\" && (\r\n                <>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>Hepatitis Test Date</FormLabelName>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={(e) => e.preventDefault()}\r\n                        name=\"testDate\"\r\n                        id=\"testDate\"\r\n                        value={hepatitisTest.testDate}\r\n                        onChange={handleInputChangeHepatitisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        min={objValues.encounterDate}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        disabled={disabledField}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>Hepatitis Test Result</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"result\"\r\n                        id=\"result\"\r\n                        value={hepatitisTest.result}\r\n                        onChange={handleInputChangeHepatitisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        {hepaTestResult.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              <br />\r\n              <br />\r\n              <Label\r\n                as=\"a\"\r\n                color=\"red\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"syphilisTest\"\r\n                    value=\"Yes\"\r\n                    onChange={handleCheckBoxSyphilisTest}\r\n                    checked={syphilisTest.syphilisTest === \"Yes\" ? true : false}\r\n                  />{\" \"}\r\n                  Syphilis Test{\" \"}\r\n                </h4>\r\n              </Label>\r\n              <br />\r\n              <br />\r\n              {syphilisTest.syphilisTest === \"Yes\" && (\r\n                <>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>Syphilis Test Date</FormLabelName>\r\n                      <Input\r\n                        type=\"date\"\r\n                        onKeyDown={(e) => e.preventDefault()}\r\n                        name=\"testDate\"\r\n                        id=\"testDate\"\r\n                        value={syphilisTest.testDate}\r\n                        onChange={handleInputChangeSyphilisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                        min={objValues.encounterDate}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\" mb-3 col-md-6\">\r\n                    <FormGroup>\r\n                      <FormLabelName>Syphilis Test Result</FormLabelName>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"result\"\r\n                        id=\"result\"\r\n                        value={syphilisTest.result}\r\n                        onChange={handleInputChangeSyphilisTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disabledField}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        {sphylisTestResult.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                  {syphilisTest.result === \"Others\" && (\r\n                    <div className=\" mb-3 col-md-6\">\r\n                      <FormGroup>\r\n                        <FormLabelName>\r\n                          Syphilis Test Result (Others)\r\n                        </FormLabelName>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"others\"\r\n                          id=\"others\"\r\n                          value={syphilisTest.others}\r\n                          onChange={handleInputChangeSyphilisTest}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                          disabled={disabledField}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n              <br />\r\n              <br />\r\n              <Label\r\n                as=\"a\"\r\n                color=\"black\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    name=\"otherTest\"\r\n                    value=\"Yes\"\r\n                    ref={otherTestInputRef}\r\n                    onChange={handleCheckBoxOtherTest}\r\n                    checked={otherTest.length > 0}\r\n                  />\r\n                  Other Test\r\n                </h4>\r\n              </Label>\r\n              <br />\r\n              <br />\r\n              {/* {otherTest.otherTest === 'Yes' && (<> */}\r\n              {otherTest.length > 0 &&\r\n                otherTest.map((eachTest) => (\r\n                  <div className=\"row\" key={eachTest.localId}>\r\n                    <div className=\" mb-1 col-md-3\">\r\n                      <FormGroup>\r\n                        <FormLabelName>\r\n                          {\" \"}\r\n                          Test Name <span style={{ color: \"red\" }}> *</span>\r\n                        </FormLabelName>\r\n                        <Input\r\n                          type=\"select\"\r\n                          name=\"otherTestsDone\"\r\n                          id=\"otherTestsDone\"\r\n                          data-localid={eachTest.localId}\r\n                          data-field=\"name\"\r\n                          onChange={(e) =>\r\n                            handleInputChangeOtherTest(e, eachTest.localId)\r\n                          }\r\n                          value={eachTest.otherTestsDone}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                          disabled={disabledField}\r\n                        >\r\n                          <option value=\"\">Select</option>\r\n                          {otherTestResult?.map((value) => (\r\n                            <option key={value.id} value={value.code}>\r\n                              {value.display}\r\n                            </option>\r\n                          ))}\r\n                        </Input>\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    {eachTest.name === \"PREP_OTHER_TEST_OTHER_(SPECIFY)\" && (\r\n                      <div\r\n                        style={{ display: \"none\" }}\r\n                        className=\" mb-1 col-md-3\"\r\n                      >\r\n                        <FormGroup>\r\n                          <FormLabelName>\r\n                            {\" \"}\r\n                            Other Test Name{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </FormLabelName>\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"otherTestName\"\r\n                            id=\"otherTestName\"\r\n                            data-localid={eachTest.localId}\r\n                            data-field=\"otherTestName\"\r\n                            value={eachTest.otherTestName}\r\n                            onChange={(e) =>\r\n                              handleInputChangeOtherTest(e, eachTest.localId)\r\n                            }\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.25rem\",\r\n                            }}\r\n                            disabled={disabledField}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\" mb-1 col-md-3\">\r\n                      <FormGroup>\r\n                        <FormLabelName>\r\n                          {\" \"}\r\n                          Test Date <span style={{ color: \"red\" }}> *</span>\r\n                        </FormLabelName>\r\n                        <Input\r\n                          type=\"date\"\r\n                          onKeyDown={(e) => e.preventDefault()}\r\n                          name=\"testDate\"\r\n                          id=\"testDate\"\r\n                          data-localid={eachTest.localId}\r\n                          data-field=\"testDate\"\r\n                          value={eachTest.testDate}\r\n                          onChange={(e) =>\r\n                            handleInputChangeOtherTest(e, eachTest.localId)\r\n                          }\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                          disabled={disabledField}\r\n                          min={objValues.encounterDate}\r\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\" mb-1 col-md-3\">\r\n                      <FormGroup>\r\n                        <FormLabelName>\r\n                          {\" \"}\r\n                          Test Result <span style={{ color: \"red\" }}> *</span>\r\n                        </FormLabelName>\r\n                        <Input\r\n                          type=\"text\"\r\n                          name=\"result\"\r\n                          id=\"result\"\r\n                          data-localid={eachTest.localId}\r\n                          data-field=\"result\"\r\n                          value={eachTest.result}\r\n                          onChange={(e) =>\r\n                            handleInputChangeOtherTest(e, eachTest.localId)\r\n                          }\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                          disabled={disabledField}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\" mb-1 col-md-3 d-flex align-items-end\">\r\n                      <button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        size=\"medium\"\r\n                        className={`${classes.button} btn btn-danger`}\r\n                        style={{\r\n                          display: \"block\",\r\n                          margin: 0,\r\n                          fontSize: \"1.2em\",\r\n                        }}\r\n                        onClick={() => handleRemoveTest(eachTest.localId)}\r\n                      >\r\n                        <TiTrash />\r\n                      </button>\r\n                    </div>\r\n\r\n                    {otherTest.length > 1 && (\r\n                      <Divider\r\n                        component=\"li\"\r\n                        style={{ marginBottom: \"10px\" }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              {errors.otherTestsDone !== \"\" ? (\r\n                <span className={classes.error}>{errors.otherTestsDone}</span>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {otherTest.length > 0 && (\r\n                <div>\r\n                  <MatButton\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={`${classes.button}`}\r\n                    startIcon={<AddIcon />}\r\n                    style={{ backgroundColor: \"#014d88\" }}\r\n                    onClick={handleCreateNewTest}\r\n                    disabled={saving}\r\n                  >\r\n                    <span style={{ textTransform: \"capitalize\" }}>\r\n                      Add more test results\r\n                    </span>\r\n                  </MatButton>\r\n                </div>\r\n              )}\r\n\r\n              <br />\r\n              <Label\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>NEXT APPOINTMENT DATE </h4>\r\n              </Label>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <div className=\"mb-3 col-md-6\">\r\n                <FormLabelName>Next Appointment Date</FormLabelName>\r\n                <Input\r\n                  type=\"date\"\r\n                  onKeyDown={(e) => e.preventDefault()}\r\n                  name=\"nextAppointment\"\r\n                  id=\"nextAppointment\"\r\n                  value={objValues.nextAppointment}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                  min={objValues.encounterDate}\r\n                  disabled={disabledField}\r\n                />\r\n                {errors.nextAppointment !== \"\" ? (\r\n                  <span className={classes.error}>\r\n                    {errors.nextAppointment}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n              <div className=\" mb-3 col-md-6\">\r\n                <FormLabelName>Healthcare Worker Signature</FormLabelName>\r\n                <Input\r\n                  name=\"healthCareWorkerSignature\"\r\n                  id=\"healthCareWorkerSignature\"\r\n                  placeholder=\"Enter signature...\"\r\n                  value={objValues.healthCareWorkerSignature}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                />\r\n                {errors.healthCareWorkerSignature !== \"\" ? (\r\n                  <span className={classes.error}>\r\n                    {errors.healthCareWorkerSignature}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <br />\r\n            {!disabledField && (\r\n              <>\r\n                {props.activeContent &&\r\n                  props.activeContent.actionType === \"update\" ? (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      hidden={disabledField}\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Update\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Updating...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <MatButton\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      startIcon={<SaveIcon />}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    >\r\n                      {!saving ? (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Save\r\n                        </span>\r\n                      ) : (\r\n                        <span style={{ textTransform: \"capitalize\" }}>\r\n                          Saving...\r\n                        </span>\r\n                      )}\r\n                    </MatButton>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n      {/* <AddVitals toggle={AddVitalToggle} showModal={addVitalModal} /> */}\r\n    </div>\r\n  );\r\n};\r\n/**\r\n * export const url =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:8383/api/v1/\"\r\n    : \"/api/v1/\";\r\nexport const token =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJndWVzdEBsYW1pc3BsdXMub3JnIiwiYXV0aCI6IlN1cGVyIEFkbWluIiwibmFtZSI6Ikd1ZXN0IEd1ZXN0IiwiZXhwIjoxNzI3ODM2NTkyfQ.M2dIDnvPm-FTXYDh3-kzohZlfWawLMQvIgdfJLbByhAxqaeaa4T8mdiMa27YLcTd7Tb2jwOs36_13jeKfmq9CA\"\r\n    : new URLSearchParams(window.location.search).get(\"jwt\");\r\n\r\n */\r\nexport default ClinicVisit;\r\n","C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\jsx\\components\\Consultation\\ClinicHistory.js",["293","294","295"],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\api.js",[],"C:\\Users\\gamaliel.dashua\\IdeaProjects\\PrEP-Module\\src\\main\\webapp\\reportWebVitals.js",[],{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","severity":1,"message":"301","line":3,"column":9,"nodeType":"302","messageId":"303","endLine":3,"endColumn":15},{"ruleId":"300","severity":1,"message":"304","line":10,"column":9,"nodeType":"302","messageId":"303","endLine":10,"endColumn":20},{"ruleId":"300","severity":1,"message":"305","line":11,"column":13,"nodeType":"302","messageId":"303","endLine":11,"endColumn":16},{"ruleId":"300","severity":1,"message":"306","line":23,"column":9,"nodeType":"302","messageId":"303","endLine":23,"endColumn":16},{"ruleId":"300","severity":1,"message":"307","line":27,"column":10,"nodeType":"302","messageId":"303","endLine":27,"endColumn":18},{"ruleId":"300","severity":1,"message":"308","line":121,"column":19,"nodeType":"302","messageId":"303","endLine":121,"endColumn":27},{"ruleId":"300","severity":1,"message":"309","line":123,"column":20,"nodeType":"302","messageId":"303","endLine":123,"endColumn":29},{"ruleId":"300","severity":1,"message":"310","line":126,"column":12,"nodeType":"302","messageId":"303","endLine":126,"endColumn":24},{"ruleId":"300","severity":1,"message":"311","line":126,"column":26,"nodeType":"302","messageId":"303","endLine":126,"endColumn":41},{"ruleId":"300","severity":1,"message":"312","line":136,"column":12,"nodeType":"302","messageId":"303","endLine":136,"endColumn":38},{"ruleId":"300","severity":1,"message":"313","line":137,"column":24,"nodeType":"302","messageId":"303","endLine":137,"endColumn":37},{"ruleId":"300","severity":1,"message":"314","line":138,"column":11,"nodeType":"302","messageId":"303","endLine":138,"endColumn":21},{"ruleId":"300","severity":1,"message":"315","line":161,"column":30,"nodeType":"302","messageId":"303","endLine":161,"endColumn":48},{"ruleId":"300","severity":1,"message":"316","line":192,"column":19,"nodeType":"302","messageId":"303","endLine":192,"endColumn":33},{"ruleId":"317","severity":1,"message":"318","line":192,"column":107,"nodeType":"319","messageId":"320","endLine":192,"endColumn":109},{"ruleId":"321","severity":1,"message":"322","line":209,"column":80,"nodeType":"323","messageId":"324","endLine":209,"endColumn":82},{"ruleId":"321","severity":1,"message":"322","line":210,"column":74,"nodeType":"323","messageId":"324","endLine":210,"endColumn":76},{"ruleId":"321","severity":1,"message":"322","line":211,"column":74,"nodeType":"323","messageId":"324","endLine":211,"endColumn":76},{"ruleId":"321","severity":1,"message":"322","line":212,"column":77,"nodeType":"323","messageId":"324","endLine":212,"endColumn":79},{"ruleId":"325","severity":1,"message":"326","line":247,"column":8,"nodeType":"327","endLine":247,"endColumn":61,"suggestions":"328"},{"ruleId":"300","severity":1,"message":"329","line":291,"column":11,"nodeType":"302","messageId":"303","endLine":291,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":392,"column":28,"nodeType":"323","messageId":"324","endLine":392,"endColumn":30},{"ruleId":"321","severity":1,"message":"322","line":394,"column":35,"nodeType":"323","messageId":"324","endLine":394,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":469,"column":49,"nodeType":"323","messageId":"324","endLine":469,"endColumn":51},{"ruleId":"321","severity":1,"message":"322","line":488,"column":69,"nodeType":"323","messageId":"324","endLine":488,"endColumn":71},{"ruleId":"321","severity":1,"message":"322","line":522,"column":49,"nodeType":"323","messageId":"324","endLine":522,"endColumn":51},{"ruleId":"300","severity":1,"message":"316","line":532,"column":19,"nodeType":"302","messageId":"303","endLine":532,"endColumn":33},{"ruleId":"317","severity":1,"message":"318","line":532,"column":83,"nodeType":"319","messageId":"320","endLine":532,"endColumn":85},{"ruleId":"321","severity":1,"message":"322","line":590,"column":67,"nodeType":"323","messageId":"324","endLine":590,"endColumn":69},{"ruleId":"300","severity":1,"message":"330","line":615,"column":23,"nodeType":"302","messageId":"303","endLine":615,"endColumn":31},{"ruleId":"325","severity":1,"message":"331","line":71,"column":9,"nodeType":"327","endLine":71,"endColumn":11,"suggestions":"332"},{"ruleId":"333","severity":1,"message":"334","line":4,"column":10,"nodeType":"335","messageId":"336","endLine":4,"endColumn":24,"fix":"337"},{"ruleId":"300","severity":1,"message":"338","line":25,"column":10,"nodeType":"302","messageId":"303","endLine":25,"endColumn":20},{"ruleId":"300","severity":1,"message":"339","line":33,"column":8,"nodeType":"302","messageId":"303","endLine":33,"endColumn":14},{"ruleId":"300","severity":1,"message":"340","line":64,"column":10,"nodeType":"302","messageId":"303","endLine":64,"endColumn":21},{"ruleId":"300","severity":1,"message":"341","line":65,"column":10,"nodeType":"302","messageId":"303","endLine":65,"endColumn":17},{"ruleId":"300","severity":1,"message":"342","line":1,"column":17,"nodeType":"302","messageId":"303","endLine":1,"endColumn":25},{"ruleId":"300","severity":1,"message":"343","line":2,"column":16,"nodeType":"302","messageId":"303","endLine":2,"endColumn":21},{"ruleId":"300","severity":1,"message":"342","line":1,"column":17,"nodeType":"302","messageId":"303","endLine":1,"endColumn":25},{"ruleId":"300","severity":1,"message":"344","line":1,"column":27,"nodeType":"302","messageId":"303","endLine":1,"endColumn":36},{"ruleId":"300","severity":1,"message":"345","line":4,"column":8,"nodeType":"302","messageId":"303","endLine":4,"endColumn":18},{"ruleId":"300","severity":1,"message":"346","line":23,"column":17,"nodeType":"302","messageId":"303","endLine":23,"endColumn":24},{"ruleId":"300","severity":1,"message":"347","line":23,"column":26,"nodeType":"302","messageId":"303","endLine":23,"endColumn":31},{"ruleId":"300","severity":1,"message":"348","line":92,"column":9,"nodeType":"302","messageId":"303","endLine":92,"endColumn":26},{"ruleId":"300","severity":1,"message":"349","line":97,"column":9,"nodeType":"302","messageId":"303","endLine":97,"endColumn":23},{"ruleId":"300","severity":1,"message":"350","line":102,"column":9,"nodeType":"302","messageId":"303","endLine":102,"endColumn":19},{"ruleId":"300","severity":1,"message":"351","line":1,"column":38,"nodeType":"302","messageId":"303","endLine":1,"endColumn":44},{"ruleId":"300","severity":1,"message":"352","line":2,"column":9,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"353","line":2,"column":15,"nodeType":"302","messageId":"303","endLine":2,"endColumn":26},{"ruleId":"300","severity":1,"message":"354","line":2,"column":28,"nodeType":"302","messageId":"303","endLine":2,"endColumn":37},{"ruleId":"300","severity":1,"message":"355","line":2,"column":38,"nodeType":"302","messageId":"303","endLine":2,"endColumn":42},{"ruleId":"300","severity":1,"message":"356","line":3,"column":15,"nodeType":"302","messageId":"303","endLine":3,"endColumn":19},{"ruleId":"300","severity":1,"message":"357","line":3,"column":20,"nodeType":"302","messageId":"303","endLine":3,"endColumn":28},{"ruleId":"300","severity":1,"message":"358","line":3,"column":44,"nodeType":"302","messageId":"303","endLine":3,"endColumn":54},{"ruleId":"300","severity":1,"message":"359","line":7,"column":8,"nodeType":"302","messageId":"303","endLine":7,"endColumn":14},{"ruleId":"300","severity":1,"message":"360","line":13,"column":10,"nodeType":"302","messageId":"303","endLine":13,"endColumn":17},{"ruleId":"300","severity":1,"message":"361","line":15,"column":8,"nodeType":"302","messageId":"303","endLine":15,"endColumn":19},{"ruleId":"300","severity":1,"message":"362","line":19,"column":17,"nodeType":"302","messageId":"303","endLine":19,"endColumn":20},{"ruleId":"300","severity":1,"message":"363","line":20,"column":10,"nodeType":"302","messageId":"303","endLine":20,"endColumn":16},{"ruleId":"300","severity":1,"message":"364","line":20,"column":18,"nodeType":"302","messageId":"303","endLine":20,"endColumn":24},{"ruleId":"300","severity":1,"message":"365","line":20,"column":26,"nodeType":"302","messageId":"303","endLine":20,"endColumn":31},{"ruleId":"300","severity":1,"message":"366","line":20,"column":33,"nodeType":"302","messageId":"303","endLine":20,"endColumn":40},{"ruleId":"300","severity":1,"message":"367","line":22,"column":8,"nodeType":"302","messageId":"303","endLine":22,"endColumn":11},{"ruleId":"300","severity":1,"message":"368","line":23,"column":8,"nodeType":"302","messageId":"303","endLine":23,"endColumn":24},{"ruleId":"300","severity":1,"message":"369","line":24,"column":8,"nodeType":"302","messageId":"303","endLine":24,"endColumn":14},{"ruleId":"300","severity":1,"message":"370","line":25,"column":8,"nodeType":"302","messageId":"303","endLine":25,"endColumn":11},{"ruleId":"300","severity":1,"message":"371","line":26,"column":8,"nodeType":"302","messageId":"303","endLine":26,"endColumn":17},{"ruleId":"300","severity":1,"message":"372","line":29,"column":8,"nodeType":"302","messageId":"303","endLine":29,"endColumn":18},{"ruleId":"300","severity":1,"message":"373","line":38,"column":8,"nodeType":"302","messageId":"303","endLine":38,"endColumn":19},{"ruleId":"300","severity":1,"message":"374","line":115,"column":11,"nodeType":"302","messageId":"303","endLine":115,"endColumn":22},{"ruleId":"300","severity":1,"message":"375","line":119,"column":12,"nodeType":"302","messageId":"303","endLine":119,"endColumn":19},{"ruleId":"300","severity":1,"message":"341","line":120,"column":12,"nodeType":"302","messageId":"303","endLine":120,"endColumn":19},{"ruleId":"300","severity":1,"message":"376","line":123,"column":12,"nodeType":"302","messageId":"303","endLine":123,"endColumn":20},{"ruleId":"300","severity":1,"message":"377","line":129,"column":12,"nodeType":"302","messageId":"303","endLine":129,"endColumn":27},{"ruleId":"300","severity":1,"message":"378","line":131,"column":11,"nodeType":"302","messageId":"303","endLine":131,"endColumn":19},{"ruleId":"325","severity":1,"message":"379","line":191,"column":8,"nodeType":"327","endLine":191,"endColumn":10,"suggestions":"380"},{"ruleId":"300","severity":1,"message":"381","line":222,"column":11,"nodeType":"302","messageId":"303","endLine":222,"endColumn":27},{"ruleId":"333","severity":1,"message":"334","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":24,"fix":"382"},{"ruleId":"300","severity":1,"message":"338","line":28,"column":10,"nodeType":"302","messageId":"303","endLine":28,"endColumn":20},{"ruleId":"325","severity":1,"message":"383","line":66,"column":10,"nodeType":"327","endLine":66,"endColumn":31,"suggestions":"384"},{"ruleId":"300","severity":1,"message":"338","line":5,"column":10,"nodeType":"302","messageId":"303","endLine":5,"endColumn":20},{"ruleId":"325","severity":1,"message":"385","line":34,"column":6,"nodeType":"327","endLine":34,"endColumn":33,"suggestions":"386"},{"ruleId":"300","severity":1,"message":"387","line":250,"column":12,"nodeType":"302","messageId":"303","endLine":250,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":303,"column":61,"nodeType":"323","messageId":"324","endLine":303,"endColumn":63},{"ruleId":"300","severity":1,"message":"388","line":1,"column":17,"nodeType":"302","messageId":"303","endLine":1,"endColumn":28},{"ruleId":"300","severity":1,"message":"355","line":3,"column":54,"nodeType":"302","messageId":"303","endLine":3,"endColumn":58},{"ruleId":"300","severity":1,"message":"389","line":5,"column":16,"nodeType":"302","messageId":"303","endLine":5,"endColumn":24},{"ruleId":"300","severity":1,"message":"390","line":5,"column":26,"nodeType":"302","messageId":"303","endLine":5,"endColumn":37},{"ruleId":"300","severity":1,"message":"391","line":5,"column":39,"nodeType":"302","messageId":"303","endLine":5,"endColumn":55},{"ruleId":"300","severity":1,"message":"392","line":5,"column":57,"nodeType":"302","messageId":"303","endLine":5,"endColumn":66},{"ruleId":"300","severity":1,"message":"393","line":14,"column":19,"nodeType":"302","messageId":"303","endLine":14,"endColumn":30},{"ruleId":"300","severity":1,"message":"369","line":14,"column":32,"nodeType":"302","messageId":"303","endLine":14,"endColumn":38},{"ruleId":"300","severity":1,"message":"359","line":14,"column":49,"nodeType":"302","messageId":"303","endLine":14,"endColumn":55},{"ruleId":"300","severity":1,"message":"394","line":20,"column":8,"nodeType":"302","messageId":"303","endLine":20,"endColumn":29},{"ruleId":"300","severity":1,"message":"395","line":22,"column":10,"nodeType":"302","messageId":"303","endLine":22,"endColumn":15},{"ruleId":"300","severity":1,"message":"396","line":107,"column":11,"nodeType":"302","messageId":"303","endLine":107,"endColumn":20},{"ruleId":"325","severity":1,"message":"397","line":142,"column":15,"nodeType":"319","endLine":153,"endColumn":6},{"ruleId":"325","severity":1,"message":"398","line":153,"column":8,"nodeType":"327","endLine":153,"endColumn":26,"suggestions":"399"},{"ruleId":"300","severity":1,"message":"400","line":395,"column":12,"nodeType":"302","messageId":"303","endLine":395,"endColumn":27},{"ruleId":"300","severity":1,"message":"401","line":395,"column":29,"nodeType":"302","messageId":"303","endLine":395,"endColumn":47},{"ruleId":"300","severity":1,"message":"402","line":522,"column":12,"nodeType":"302","messageId":"303","endLine":522,"endColumn":28},{"ruleId":"300","severity":1,"message":"403","line":523,"column":14,"nodeType":"302","messageId":"303","endLine":523,"endColumn":34},{"ruleId":"325","severity":1,"message":"404","line":549,"column":44,"nodeType":"327","endLine":549,"endColumn":46,"suggestions":"405"},{"ruleId":"406","severity":1,"message":"407","line":674,"column":65,"nodeType":"408","messageId":"409","endLine":674,"endColumn":67},{"ruleId":"406","severity":1,"message":"407","line":674,"column":103,"nodeType":"408","messageId":"409","endLine":674,"endColumn":105},{"ruleId":"325","severity":1,"message":"410","line":138,"column":8,"nodeType":"327","endLine":138,"endColumn":10,"suggestions":"411"},{"ruleId":"412","severity":1,"message":"413","line":272,"column":42,"nodeType":"414","messageId":"415","endLine":272,"endColumn":62,"fix":"416"},{"ruleId":"321","severity":1,"message":"322","line":295,"column":49,"nodeType":"323","messageId":"324","endLine":295,"endColumn":51},{"ruleId":"325","severity":1,"message":"417","line":58,"column":48,"nodeType":"327","endLine":58,"endColumn":50,"suggestions":"418"},{"ruleId":"300","severity":1,"message":"355","line":2,"column":10,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"419","line":2,"column":16,"nodeType":"302","messageId":"303","endLine":2,"endColumn":19},{"ruleId":"300","severity":1,"message":"420","line":6,"column":8,"nodeType":"302","messageId":"303","endLine":6,"endColumn":18},{"ruleId":"300","severity":1,"message":"421","line":12,"column":10,"nodeType":"302","messageId":"303","endLine":12,"endColumn":20},{"ruleId":"325","severity":1,"message":"422","line":129,"column":6,"nodeType":"327","endLine":129,"endColumn":8,"suggestions":"423"},{"ruleId":"321","severity":1,"message":"322","line":228,"column":47,"nodeType":"323","messageId":"324","endLine":228,"endColumn":49},{"ruleId":"300","severity":1,"message":"355","line":2,"column":10,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"419","line":2,"column":15,"nodeType":"302","messageId":"303","endLine":2,"endColumn":18},{"ruleId":"300","severity":1,"message":"352","line":13,"column":11,"nodeType":"302","messageId":"303","endLine":13,"endColumn":16},{"ruleId":"300","severity":1,"message":"369","line":13,"column":18,"nodeType":"302","messageId":"303","endLine":13,"endColumn":24},{"ruleId":"300","severity":1,"message":"424","line":15,"column":10,"nodeType":"302","messageId":"303","endLine":15,"endColumn":24},{"ruleId":"300","severity":1,"message":"425","line":56,"column":9,"nodeType":"302","messageId":"303","endLine":56,"endColumn":16},{"ruleId":"300","severity":1,"message":"426","line":61,"column":24,"nodeType":"302","messageId":"303","endLine":61,"endColumn":37},{"ruleId":"300","severity":1,"message":"427","line":62,"column":23,"nodeType":"302","messageId":"303","endLine":62,"endColumn":35},{"ruleId":"300","severity":1,"message":"428","line":64,"column":12,"nodeType":"302","messageId":"303","endLine":64,"endColumn":22},{"ruleId":"300","severity":1,"message":"429","line":66,"column":12,"nodeType":"302","messageId":"303","endLine":66,"endColumn":23},{"ruleId":"300","severity":1,"message":"430","line":86,"column":11,"nodeType":"302","messageId":"303","endLine":86,"endColumn":25},{"ruleId":"300","severity":1,"message":"431","line":94,"column":11,"nodeType":"302","messageId":"303","endLine":94,"endColumn":19},{"ruleId":"321","severity":1,"message":"322","line":101,"column":49,"nodeType":"323","messageId":"324","endLine":101,"endColumn":51},{"ruleId":"300","severity":1,"message":"355","line":2,"column":10,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"419","line":2,"column":15,"nodeType":"302","messageId":"303","endLine":2,"endColumn":18},{"ruleId":"300","severity":1,"message":"432","line":98,"column":12,"nodeType":"302","messageId":"303","endLine":98,"endColumn":25},{"ruleId":"325","severity":1,"message":"433","line":131,"column":8,"nodeType":"327","endLine":131,"endColumn":10,"suggestions":"434"},{"ruleId":"412","severity":1,"message":"435","line":199,"column":43,"nodeType":"414","messageId":"415","endLine":199,"endColumn":64,"fix":"436"},{"ruleId":"412","severity":1,"message":"437","line":200,"column":43,"nodeType":"414","messageId":"415","endLine":200,"endColumn":70,"fix":"438"},{"ruleId":"412","severity":1,"message":"439","line":208,"column":43,"nodeType":"414","messageId":"415","endLine":208,"endColumn":63,"fix":"440"},{"ruleId":"412","severity":1,"message":"441","line":209,"column":43,"nodeType":"414","messageId":"415","endLine":209,"endColumn":68,"fix":"442"},{"ruleId":"412","severity":1,"message":"443","line":210,"column":43,"nodeType":"414","messageId":"415","endLine":210,"endColumn":65,"fix":"444"},{"ruleId":"412","severity":1,"message":"445","line":215,"column":43,"nodeType":"414","messageId":"415","endLine":215,"endColumn":82,"fix":"446"},{"ruleId":"412","severity":1,"message":"447","line":221,"column":43,"nodeType":"414","messageId":"415","endLine":221,"endColumn":69,"fix":"448"},{"ruleId":"412","severity":1,"message":"449","line":222,"column":43,"nodeType":"414","messageId":"415","endLine":222,"endColumn":72,"fix":"450"},{"ruleId":"412","severity":1,"message":"451","line":228,"column":43,"nodeType":"414","messageId":"415","endLine":228,"endColumn":68,"fix":"452"},{"ruleId":"412","severity":1,"message":"453","line":229,"column":43,"nodeType":"414","messageId":"415","endLine":229,"endColumn":60,"fix":"454"},{"ruleId":"321","severity":1,"message":"322","line":243,"column":49,"nodeType":"323","messageId":"324","endLine":243,"endColumn":51},{"ruleId":"300","severity":1,"message":"455","line":2,"column":32,"nodeType":"302","messageId":"303","endLine":2,"endColumn":36},{"ruleId":"300","severity":1,"message":"356","line":2,"column":38,"nodeType":"302","messageId":"303","endLine":2,"endColumn":42},{"ruleId":"300","severity":1,"message":"359","line":19,"column":8,"nodeType":"302","messageId":"303","endLine":19,"endColumn":14},{"ruleId":"300","severity":1,"message":"456","line":23,"column":10,"nodeType":"302","messageId":"303","endLine":23,"endColumn":20},{"ruleId":"300","severity":1,"message":"457","line":100,"column":10,"nodeType":"302","messageId":"303","endLine":100,"endColumn":20},{"ruleId":"300","severity":1,"message":"458","line":102,"column":10,"nodeType":"302","messageId":"303","endLine":102,"endColumn":19},{"ruleId":"300","severity":1,"message":"459","line":105,"column":10,"nodeType":"302","messageId":"303","endLine":105,"endColumn":24},{"ruleId":"300","severity":1,"message":"460","line":117,"column":10,"nodeType":"302","messageId":"303","endLine":117,"endColumn":32},{"ruleId":"325","severity":1,"message":"397","line":220,"column":13,"nodeType":"319","endLine":259,"endColumn":4},{"ruleId":"325","severity":1,"message":"461","line":259,"column":6,"nodeType":"327","endLine":259,"endColumn":17,"suggestions":"462"},{"ruleId":"325","severity":1,"message":"463","line":296,"column":6,"nodeType":"327","endLine":296,"endColumn":27,"suggestions":"464"},{"ruleId":"317","severity":1,"message":"318","line":338,"column":31,"nodeType":"319","messageId":"320","endLine":338,"endColumn":33},{"ruleId":"317","severity":1,"message":"318","line":339,"column":31,"nodeType":"319","messageId":"320","endLine":339,"endColumn":33},{"ruleId":"300","severity":1,"message":"465","line":443,"column":13,"nodeType":"302","messageId":"303","endLine":443,"endColumn":31},{"ruleId":"300","severity":1,"message":"466","line":490,"column":9,"nodeType":"302","messageId":"303","endLine":490,"endColumn":29},{"ruleId":"300","severity":1,"message":"467","line":529,"column":13,"nodeType":"302","messageId":"303","endLine":529,"endColumn":34},{"ruleId":"300","severity":1,"message":"468","line":532,"column":13,"nodeType":"302","messageId":"303","endLine":532,"endColumn":33},{"ruleId":"325","severity":1,"message":"469","line":539,"column":6,"nodeType":"327","endLine":539,"endColumn":29,"suggestions":"470"},{"ruleId":"325","severity":1,"message":"471","line":569,"column":6,"nodeType":"327","endLine":569,"endColumn":32,"suggestions":"472"},{"ruleId":"412","severity":1,"message":"473","line":743,"column":42,"nodeType":"414","messageId":"415","endLine":743,"endColumn":56,"fix":"474"},{"ruleId":"412","severity":1,"message":"475","line":752,"column":42,"nodeType":"414","messageId":"415","endLine":752,"endColumn":65,"fix":"476"},{"ruleId":"412","severity":1,"message":"475","line":754,"column":42,"nodeType":"414","messageId":"415","endLine":754,"endColumn":64,"fix":"477"},{"ruleId":"412","severity":1,"message":"478","line":760,"column":44,"nodeType":"414","messageId":"415","endLine":760,"endColumn":68,"fix":"479"},{"ruleId":"412","severity":1,"message":"475","line":762,"column":43,"nodeType":"414","messageId":"415","endLine":762,"endColumn":65,"fix":"480"},{"ruleId":"300","severity":1,"message":"481","line":788,"column":9,"nodeType":"302","messageId":"303","endLine":788,"endColumn":29},{"ruleId":"412","severity":1,"message":"482","line":811,"column":46,"nodeType":"414","messageId":"415","endLine":811,"endColumn":71,"fix":"483"},{"ruleId":"412","severity":1,"message":"482","line":813,"column":41,"nodeType":"414","messageId":"415","endLine":813,"endColumn":65,"fix":"484"},{"ruleId":"325","severity":1,"message":"485","line":914,"column":6,"nodeType":"327","endLine":914,"endColumn":38,"suggestions":"486"},{"ruleId":"300","severity":1,"message":"465","line":1152,"column":15,"nodeType":"302","messageId":"303","endLine":1152,"endColumn":33},{"ruleId":"300","severity":1,"message":"387","line":1164,"column":12,"nodeType":"302","messageId":"303","endLine":1164,"endColumn":26},{"ruleId":"300","severity":1,"message":"403","line":1169,"column":12,"nodeType":"302","messageId":"303","endLine":1169,"endColumn":32},{"ruleId":"300","severity":1,"message":"487","line":1182,"column":12,"nodeType":"302","messageId":"303","endLine":1182,"endColumn":23},{"ruleId":"300","severity":1,"message":"402","line":1203,"column":10,"nodeType":"302","messageId":"303","endLine":1203,"endColumn":26},{"ruleId":"300","severity":1,"message":"488","line":1221,"column":9,"nodeType":"302","messageId":"303","endLine":1221,"endColumn":29},{"ruleId":"325","severity":1,"message":"489","line":1228,"column":6,"nodeType":"327","endLine":1228,"endColumn":8,"suggestions":"490"},{"ruleId":"300","severity":1,"message":"491","line":1229,"column":9,"nodeType":"302","messageId":"303","endLine":1229,"endColumn":34},{"ruleId":"492","severity":1,"message":"493","line":1725,"column":15,"nodeType":"494","endLine":1725,"endColumn":45},{"ruleId":"321","severity":1,"message":"322","line":1764,"column":40,"nodeType":"323","messageId":"324","endLine":1764,"endColumn":42},{"ruleId":"321","severity":1,"message":"322","line":1768,"column":36,"nodeType":"323","messageId":"324","endLine":1768,"endColumn":38},{"ruleId":"321","severity":1,"message":"322","line":2337,"column":53,"nodeType":"323","messageId":"324","endLine":2337,"endColumn":55},{"ruleId":"333","severity":1,"message":"334","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":24,"fix":"495"},{"ruleId":"300","severity":1,"message":"496","line":56,"column":7,"nodeType":"302","messageId":"303","endLine":56,"endColumn":16},{"ruleId":"325","severity":1,"message":"497","line":113,"column":8,"nodeType":"327","endLine":113,"endColumn":61,"suggestions":"498"},"no-native-reassign",["499"],"no-negated-in-lhs",["500"],"no-unused-vars","'format' is defined but never used.","Identifier","unusedVar","'yupResolver' is defined but never used.","'yup' is defined but never used.","'useForm' is defined but never used.","'getValue' is defined but never used.","'setToday' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'editRelative' is assigned a value but never used.","'setEditRelative' is assigned a value but never used.","'topLevelUnitCountryOptions' is assigned a value but never used.","'setPatientDTO' is assigned a value but never used.","'userDetail' is assigned a value but never used.","'setHideTargetGroup' is assigned a value but never used.","'actualcontacts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'basicInfo', 'loadEducation', 'loadGenders', 'loadMaritalStatus', 'loadOccupation', 'loadRelationships', and 'loadTopLevelCountry'. Either include them or remove the dependency array.","ArrayExpression",["501"],"'loadOrganisationUnitsByParentId' is assigned a value but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'PatientObject'. Either include it or remove the dependency array.",["502"],"no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"503","text":"504"},"'makeStyles' is defined but never used.","'moment' is defined but never used.","'patientList' is assigned a value but never used.","'loading' is assigned a value but never used.","'useState' is defined but never used.","'Popup' is defined but never used.","'useEffect' is defined but never used.","'classNames' is defined but never used.","'baseUrl' is defined but never used.","'token' is defined but never used.","'getHospitalNumber' is assigned a value but never used.","'getPhoneNumber' is assigned a value but never used.","'getAddress' is assigned a value but never used.","'useRef' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardHeader' is defined but never used.","'Select' is defined but never used.","'Button2' is defined but never used.","'ThumbUpIcon' is defined but never used.","'red' is defined but never used.","'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Image' is defined but never used.","'Segment' is defined but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'Fab' is defined but never used.","'CheckIcon' is defined but never used.","'Typography' is defined but never used.","'UpgradeIcon' is defined but never used.","'permissions' is assigned a value but never used.","'devices' is assigned a value but never used.","'tryAgain' is assigned a value but never used.","'selectedFingers' is assigned a value but never used.","'buttonSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clear_storelist' and 'getPersonBiometrics'. Either include them or remove the dependency array.",["505"],"'biometricFingers' is assigned a value but never used.",{"range":"506","text":"504"},"React Hook useEffect has a missing dependency: 'PatientHistory'. Either include it or remove the dependency array.",["507"],"React Hook useEffect has missing dependencies: 'RecentActivities' and 'Summary'. Either include them or remove the dependency array.",["508"],"'joinActivities' is defined but never used.","'useCallback' is defined but never used.","'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'LabelRibbon' is defined but never used.","'ReactReadMoreReadLess' is defined but never used.","'color' is defined but never used.","'patientID' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'props.activeContent.actionType' and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["509"],"'assessmentScore' is assigned a value but never used.","'setAssessmentScore' is assigned a value but never used.","'recentActivities' is assigned a value but never used.","'countPrepEligibility' is defined but never used.","React Hook useEffect has a missing dependency: 'getRecentActivities'. Either include it or remove the dependency array.",["510"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'GetPatientCommercement', 'GetPatientDTOObj', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["511"],"no-useless-computed-key","Unnecessarily computed property ['datereferred'] found.","Property","unnecessarilyComputedProperty",{"range":"512","text":"513"},"React Hook useEffect has a missing dependency: 'fetchListOfEncounters'. Either include it or remove the dependency array.",["514"],"'Row' is defined but never used.","'CancelIcon' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientPrepEnrollment', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setSisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["515"],"'DateTimePicker' is defined but never used.","'history' is assigned a value but never used.","'setCarePoints' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'transferIn' is assigned a value but never used.","'ovcEnrolled' is assigned a value but never used.","'handleCheckBox' is assigned a value but never used.","'validate' is assigned a value but never used.","'disabledField' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'GetPatientDTOObj', 'GetPatientInterruption', 'props.activeContent.actionType', and 'props.activeContent.id'. Either include them or remove the dependency array. If 'setDisabledField' needs the current value of 'props.activeContent.actionType', you can also switch to useReducer instead of useState and read 'props.activeContent.actionType' in the reducer.",["516"],"Unnecessarily computed property ['reasonStopped'] found.",{"range":"517","text":"518"},"Unnecessarily computed property ['reasonStoppedOthers'] found.",{"range":"519","text":"520"},"Unnecessarily computed property ['causeOfDeath'] found.",{"range":"521","text":"522"},"Unnecessarily computed property ['sourceOfDeathInfo'] found.",{"range":"523","text":"524"},"Unnecessarily computed property ['dateClientDied'] found.",{"range":"525","text":"526"},"Unnecessarily computed property ['dateRestartPlacedBackMedication'] found.",{"range":"527","text":"528"},"Unnecessarily computed property ['facilityReferredTo'] found.",{"range":"529","text":"530"},"Unnecessarily computed property ['dateClientReferredOut'] found.",{"range":"531","text":"532"},"Unnecessarily computed property ['dateSeroconverted'] found.",{"range":"533","text":"534"},"Unnecessarily computed property ['linkToArt'] found.",{"range":"535","text":"536"},"'List' is defined but never used.","'formValues' is defined but never used.","'prepStatus' is assigned a value but never used.","'htsResult' is assigned a value but never used.","'labTestOptions' is assigned a value but never used.","'selectedPopulationType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hepatitisTest', 'syphilisTest', and 'urinalysisTest'. Either include them or remove the dependency array. You can also do a functional update 'setUrinalysisTest(u => ...)' if you only need 'urinalysisTest' in the 'setUrinalysisTest' call.",["537"],"React Hook useEffect has missing dependencies: 'GetLatestFromEligibility', 'GetPatientDTOObj', 'GetPatientVisit', 'PrepEligibilityObj', and 'TestGroup'. Either include them or remove the dependency array.",["538"],"'isEligibleForCABLA' is assigned a value but never used.","'LAST_HIV_TEST_RESULT' is assigned a value but never used.","'autoPopulateVisitType' is assigned a value but never used.","'autoPopulatePregnant' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'objValues', 'populationType', 'pregnant', and 'visitType'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["539"],"React Hook useEffect has a missing dependency: 'populationType'. Either include it or remove the dependency array.",["540"],"Unnecessarily computed property [\"others\"] found.",{"range":"541","text":"542"},"Unnecessarily computed property [\"syphilisTest\"] found.",{"range":"543","text":"544"},{"range":"545","text":"544"},"Unnecessarily computed property [\"hepatitisTest\"] found.",{"range":"546","text":"547"},{"range":"548","text":"544"},"'loadOtherTestOptions' is assigned a value but never used.","Unnecessarily computed property [\"urinalysisTest\"] found.",{"range":"549","text":"550"},{"range":"551","text":"550"},"React Hook useEffect has a missing dependency: 'emptyObjValues'. Either include it or remove the dependency array.",["552"],"'isValidDate' is defined but never used.","'handleOtherTestsDone' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getHIVresult' and 'getRecentActivities'. Either include them or remove the dependency array.",["553"],"'handleOtherTestDoneChange' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",{"range":"554","text":"504"},"'useStyles' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["555"],"no-global-assign","no-unsafe-negation",{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},[154,168],"token",{"desc":"560","fix":"561"},[184,198],{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},[8580,8596],"'datereferred'",{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},[6342,6359],"'reasonStopped'",[6410,6433],"'reasonStoppedOthers'",[6826,6842],"'causeOfDeath'",[6893,6914],"'sourceOfDeathInfo'",[6965,6983],"'dateClientDied'",[7272,7307],"'dateRestartPlacedBackMedication'",[7636,7658],"'facilityReferredTo'",[7709,7734],"'dateClientReferredOut'",[8051,8072],"'dateSeroconverted'",[8123,8136],"'linkToArt'",{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},[22929,22939],"\"others\"",[23306,23322],"\"syphilisTest\"",[23390,23406],[23603,23620],"\"hepatitisTest\"",[23689,23705],[25060,25078],"\"urinalysisTest\"",[25145,25163],{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},[184,198],{"desc":"590","fix":"591"},"Update the dependencies array to be: [patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",{"range":"592","text":"593"},"Update the dependencies array to be: [PatientObject]",{"range":"594","text":"595"},"Update the dependencies array to be: [clear_storelist, getPersonBiometrics]",{"range":"596","text":"597"},"Update the dependencies array to be: [PatientHistory, props.patientObj.id]",{"range":"598","text":"599"},"Update the dependencies array to be: [RecentActivities, Summary, props.patientObj.personId]",{"range":"600","text":"601"},"Update the dependencies array to be: [props.activeContent.actionType, props.activeContent.id, props.patientObj]",{"range":"602","text":"603"},"Update the dependencies array to be: [getRecentActivities]",{"range":"604","text":"605"},"Update the dependencies array to be: [GetPatientCommercement, GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",{"range":"606","text":"607"},"Update the dependencies array to be: [fetchListOfEncounters]",{"range":"608","text":"609"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",{"range":"610","text":"611"},"Update the dependencies array to be: [GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",{"range":"612","text":"613"},"Update the dependencies array to be: [hepatitisTest, objValues, syphilisTest, urinalysisTest]",{"range":"614","text":"615"},"Update the dependencies array to be: [GetLatestFromEligibility, GetPatientDTOObj, GetPatientVisit, PrepEligibilityObj, TestGroup, props.activeContent]",{"range":"616","text":"617"},"Update the dependencies array to be: [latestFromEligibility, objValues, populationType, pregnant, visitType]",{"range":"618","text":"619"},"Update the dependencies array to be: [objValues.populationType, populationType]",{"range":"620","text":"621"},"Update the dependencies array to be: [emptyObjValues, props.activeContent.actionType]",{"range":"622","text":"623"},"Update the dependencies array to be: [getHIVresult, getRecentActivities]",{"range":"624","text":"625"},"Update the dependencies array to be: [props.patientObj.id, props.activeContent.actionType, props]",{"range":"626","text":"627"},[10577,10630],"[patientObj, patientId, basicInfo.dateOfRegistration, loadGenders, loadMaritalStatus, loadEducation, loadOccupation, loadRelationships, loadTopLevelCountry, basicInfo]",[2460,2462],"[PatientObject]",[6965,6967],"[clear_storelist, getPersonBiometrics]",[3326,3347],"[PatientHistory, props.patientObj.id]",[1182,1209],"[RecentActivities, Summary, props.patientObj.personId]",[4992,5010],"[props.activeContent.actionType, props.activeContent.id, props.patientObj]",[21925,21927],"[getRecentActivities]",[4281,4283],"[GetPatientCommercement, GetPatientDTOObj, props.activeContent.actionType, props.activeContent.id]",[1665,1667],"[fetchListOfEncounters]",[3587,3589],"[GetPatientDTOObj, GetPatientPrepEnrollment, props.activeContent.actionType, props.activeContent.id]",[4032,4034],"[GetPatientDTOObj, GetPatientInterruption, props.activeContent.actionType, props.activeContent.id]",[7336,7347],"[hepatitisTest, objValues, syphilisTest, urinalysisTest]",[8284,8305],"[GetLatestFromEligibility, GetPatientDTOObj, GetPatientVisit, PrepEligibilityObj, TestGroup, props.activeContent]",[16179,16202],"[latestFromEligibility, objValues, populationType, pregnant, visitType]",[17148,17174],"[objValues.populationType, populationType]",[28550,28582],"[emptyObjValues, props.activeContent.actionType]",[38866,38868],"[getHIVresult, getRecentActivities]",[4238,4291],"[props.patientObj.id, props.activeContent.actionType, props]"]